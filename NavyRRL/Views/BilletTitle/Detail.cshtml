@using Models.Schema;
@using Models.DTO;
@using Models.Search;
@model BilletTitle
@{
	ViewBag.Title = "Billet Title: " + Model.Name;
	@*
	var ratingTasks = Factories.RatingTaskManager.Search( new SearchQuery()
	{
		PageSize = -1,
		Filters = new List<SearchFilter>()
		{
			new SearchFilter()
			{
				Name = "navy:Job",
				ItemIds = new List<int>(){ Model.Id }
			}
		},
		GetAllData = true
	} );
	*@
}

@Html.Partial( "~/Views/Shared/_DetailShared.cshtml" )
@Html.Partial( "~/Views/Shared/_DetailBasicInfo.cshtml", new DetailBasicInfoHelper()
{
	TypeLabel = "Billet Title",
	TypeURL = Model.GetType().Name.ToLower(),
	Id = Model.Id,
	CTID = Model.CTID,
	Name = Model.Name,
	Description = Model.Description,
	Identifiers = new List<NamedString>()
	{
		new NamedString( "System ID", Model.Id.ToString() ),
		new NamedString( "CTID", Model.CTID )
	}
} )

@Html.Partial( "~/Views/Shared/_RatingTaskCountBySourceTypeTable.cshtml", new List<SearchFilter>()
{
	new SearchFilter()
	{
		Name = "navy:Job",
		ItemIds = new List<int>(){ Model.Id }
	}
} )

@Html.Partial( "~/Views/Search/_ItemListSearch.cshtml" )
<script type="text/javascript">
	var ItemListConfigs = {
		CommonFilters: [
			{ Name: "navy:Job", ItemIds: [ @Model.Id ] }
		],
		Searches: {
			RatingTasks: {
				Header: "Rating Tasks",
				Type: "RatingTask",
				Columns: ["Description", "Training Gap Type"],
				Cells: [(Result) => { return ItemListSearches.getLink("@Url.Content("~/RatingTask/Detail/")" + Result.Id, Result.Description); }, (Result) => { return Result.TaskTrainingGap?.Name || "Unknown" }],
				customizeQuery: function (query) {
					query.GetAllData = true;
				}
			}
		}
	};
	//

	$(document).ready(function () {
		ItemListSearches.setupItemLists(ItemListConfigs);
	});
	//
</script>
<style type="text/css">
	table[data-type='RatingTask'] [data-column='Training Gap Type'] { width: 75px; }
</style>

<item-list-search name="RatingTasks"></item-list-search>

@*
@if( ratingTasks.Count() > 0 )
{
	<div class="section">
		<h3 class="sectionHeader">Rating Tasks (@ratingTasks.Count())</h3>
		<table class="ratingTasksTable">
			<thead>
				<tr>
					<th>Description</th>
					<th>Training Gap Type</th>
				</tr>
			</thead>
			<tbody>
				@foreach ( var item in ratingTasks.OrderByDescending( m => m.TaskTrainingGap?.Name ?? "Unknown" ).ThenBy( m => m.Description ) )
				{
					<tr>
						<td><a href="@Url.Content( "~/RatingTask/Detail/" + item.Id )">@item.Description</a></td>
						<td>@(item.TaskTrainingGap?.Name ?? "Unknown")</td>
					</tr>
				}
			</tbody>
		</table>

	</div>
}
*@