@using Models.Schema;
@using Models.DTO;
@using Models.Search;
@model Concept
@{
	ViewBag.Title = "Concept: " + Model.Name;
	var scheme = Factories.ConceptSchemeManager.Get( Model.InScheme );
	var taskFilter = new List<NamedValue>()
	{
		new NamedValue( Factories.ConceptSchemeManager.ConceptScheme_ReferenceResource, "dummy:DummyFilter" ), //The partial already filters by this scheme, but this item needs to be included here
		new NamedValue( Factories.ConceptSchemeManager.ConceptScheme_TrainingGap, "dummy:DummyFilter" ), //This is already part of the querying, so use a dummy filter here too
		new NamedValue( Factories.ConceptSchemeManager.ConceptScheme_TaskApplicability, "navy:ApplicabilityCategory" ),
		new NamedValue( Factories.ConceptSchemeManager.ConceptScheme_Pay_Grade, "navy:PayGradeCategory" )
	}.FirstOrDefault( m => m.Name == scheme.SchemaUri );
}

@Html.Partial( "~/Views/Shared/_DetailBasicInfo.cshtml", new DetailBasicInfoHelper()
{
	TypeLabel = "Concept",
	TypeURL = Model.GetType().Name.ToLower(),
	Id = Model.Id,
	Name = Model.Name,
	Description = Model.Description,
	Identifiers = new List<NamedValue>()
	{
		new NamedValue( "System ID", Model.Id.ToString() ),
		new NamedValue( "CTID", Model.CTID ),
		new NamedValue( "Work Element Type", Model.WorkElementType ),
		new NamedValue( "Code", Model.CodedNotation ),
		new NamedValue( "In Scheme", "<a href=\"" + Url.Content( "~/ConceptScheme/detail/" + scheme.Id ) + "\">" + scheme.Name + "</a>" )
	}
} )

@if( taskFilter != null )
{
	@Html.Partial( "~/Views/Shared/_RatingTaskCountBySourceTypeTable.cshtml", new List<SearchFilter>()
	{
		new SearchFilter()
		{
			Name = taskFilter.Value,
			ItemIds = new List<int>(){ Model.Id }
		}
	} )
}
