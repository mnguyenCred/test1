@model NavyRRL.Models.IndexViewModel
@{
	ViewBag.Title = "Manage";

	var userAPIKey = Factories.AccountManager.GetAPIKeyForUser( Services.AccountServices.GetUserFromSession()?.Id ?? 0 ).Data;
}

@Html.Partial( "~/Views/Shared/_AJAXTools.cshtml" )
<script type="text/javascript">
	$(document).ready(function () {
		setupAPIKeyBox();
	});
	//

	function setupAPIKeyBox() {
		var APIKeyBox = {
			Key: "@userAPIKey",
			Box: $(".apiKeyBox"),
			TextBox: $("[data-property='APIKeyInput']"),
			ShowHideButton: $("[data-action='ShowHideAPIKey']"),
			GenerateAPIKeyButton: $("[data-action='RegenerateAPIKey']"),
			StatusBox: $(".apiKeyStatusBox")
		};

		APIKeyBox.showKey = function () {
			APIKeyBox.TextBox.attr("data-mode", "visible");
			APIKeyBox.TextBox.val(APIKeyBox.Key);
		}

		APIKeyBox.hideKey = function () {
			APIKeyBox.TextBox.attr("data-mode", "hidden");
			APIKeyBox.TextBox.val("@(Guid.Empty.ToString().Replace("0", "*"))");
		}

		APIKeyBox.TextBox.on("click", function () {
			APIKeyBox.TextBox.select();
		});

		APIKeyBox.ShowHideButton.on("click", function () {
			APIKeyBox.TextBox.attr("data-mode") == "hidden" ? APIKeyBox.showKey() : APIKeyBox.hideKey();
		});

		APIKeyBox.GenerateAPIKeyButton.on("click", function () {
			if (confirm("Are you sure you want to generate a new API Key?\n\nYour old key will no longer be usable.\n\nThere is no way to undo this!")) {
				APIKeyBox.StatusBox.attr("data-status", "processing").html("Generating API Key...");
				AJAX.doGETRequest("@Url.Content("~/Manage/GenerateNewAPIKey")", response => {
					if (response.Valid) {
						APIKeyBox.Key = response.Data;
						APIKeyBox.TextBox.attr("data-mode") == "visible" && APIKeyBox.showKey(); //Refresh the Key display if the key is already visible
						APIKeyBox.StatusBox.attr("data-status", "success").html("Successfully generated a new API key.");
					}
					else {
						APIKeyBox.StatusBox.attr("data-status", "error").html("Error generating a new API key: " + response.Status.join("<br />"));
					}
				}, error => {
					APIKeyBox.StatusBox.attr("data-status", "error").html("Error regenerating API Key: " + error.Message);
				});
			}
		});
	}
	//

	function writeCodeBlock(content) {
		document.write("<code class=\"block\">" + JSON.stringify(content, null, "\t") + "</code>");
	}
	//
</script>
<style type="text/css">
	h5 { font-weight: bold; }

	.apiKeyBox { display: flex; align-items: baseline; gap: 10px; }
	.apiKeyBox input { flex: 1 1 100%; max-width: none; font-family: Consolas, 'Courier New', monospace; height: 30px; }
	.apiKeyBox button { flex: 1 1 150px; white-space: nowrap; height: 30px; }
	.apiKeyStatusBox { padding: 5px; margin: 5px 0; }
	.apiKeyStatusBox[data-status='processing'] { }
	.apiKeyStatusBox[data-status='success'] { background-color: #CFC; }
	.apiKeyStatusBox[data-status='error'] { background-color: #FCC; }

	.apiSection { margin-bottom: 20px; }
	code.block { display: block; white-space: pre-wrap; margin-bottom: 10px; }
</style>

<h2>Manage Your Account</h2>

<p class="text-success">@ViewBag.StatusMessage</p>
<div>
    <h4>Change your account settings</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>Password:</dt>
        <dd>
            @if (Model.HasPassword)
            {
                @Html.ActionLink("Change your password", "ChangePassword")
            }
            else
            {
                @Html.ActionLink("Create", "SetPassword")
            }
        </dd>
        @*<dt>External Logins:</dt>
        <dd>
            @Model.Logins.Count [
            @Html.ActionLink("Manage", "ManageLogins") ]
        </dd>*@
        @*
            Phone Numbers can used as a second factor of verification in a two-factor authentication system.
             
             See <a href="https://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
                for details on setting up this ASP.NET application to support two-factor authentication using SMS.
             
             Uncomment the following block after you have set up two-factor authentication
        *@
        @*  
            <dt>Phone Number:</dt>
            <dd>
                @(Model.PhoneNumber ?? "None")
                @if (Model.PhoneNumber != null)
                {
                    <br />
                    <text>[&nbsp;&nbsp;@Html.ActionLink("Change", "AddPhoneNumber")&nbsp;&nbsp;]</text>
                    using (Html.BeginForm("RemovePhoneNumber", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <text>[<input type="submit" value="Remove" class="btn-link" />]</text>
                    }
                }
                else
                {
                    <text>[&nbsp;&nbsp;@Html.ActionLink("Add", "AddPhoneNumber")
                }
            </dd>
        *@

        <!--<dt>Two-Factor Authentication:</dt>
        <dd>
            <p>
                There are no two-factor authentication providers configured. See <a href="https://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
                for details on setting up this ASP.NET application to support two-factor authentication.
            </p>-->
            @*@if (Model.TwoFactor)
                {
                    using (Html.BeginForm("DisableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <text>Enabled
                        <input type="submit" value="Disable" class="btn btn-link" />
                        </text>
                    }
                }
                else
                {
                    using (Html.BeginForm("EnableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <text>Disabled
                        <input type="submit" value="Enable" class="btn btn-link" />
                        </text>
                    }
                }*@
        <!--</dd>-->
    </dl>
	<hr />
	<h4>Manage your API Key</h4>
	<p>Include the API Key in your request header using the form <code>Authorization: Bearer abcdefgh-ijkl-mnop...</code> when getting records or doing searches.</p>
	<div class="apiKeyBox">
		<input type="text" readonly="readonly" data-property="APIKeyInput" data-mode="hidden" value="@(Guid.Empty.ToString().Replace("0", "*"))" />
		<button data-action="ShowHideAPIKey">Show/Hide</button>
		<button data-action="RegenerateAPIKey">Generate New Key</button>
	</div>
	<p class="apiKeyStatusBox"></p>
	<hr />
	<h4>API Quick Reference</h4>
	<div class="apiSection">
		<h5>General</h5>
		<p>Use the <a href="@Url.Content("~/rdf/terms")" target="_blank">RDF Terms Page</a> to lookup classes, properties, concept schemes, and concepts, as needed.</p>
		<p>Use <a href="@Url.Content("~/rdf/schema/json")" target="_blank">@Url.Content("~/rdf/schema/json")</a> to get JSON-LD schema data for classes and properties. Use <a href="@Url.Content("~/rdf/vocabs/json")" target="_blank">@Url.Content("~/rdf/vocabs/json")</a> to get JSON-LD data for concept schemes and concepts.</p>
	</div>

	<div class="apiSection">
		<h5>Get Records</h5>
		<p>Use the following structure to make HTTP GET requests the <code>/rdf/resources</code> API endpoint with your API key in the header as shown above:</p>
		<p><code>/rdf/resources/[CTID here]</code></p>
		<p>For example:</p>
		<p><code>/rdf/resources/ce-@Guid.NewGuid()</code></p>
	</div>

	<div class="apiSection">
		<h5>Search</h5>
		<p>Use the following structure to make HTTP POST requests the <code>/rdf/search</code> API endpoint with your API key in the header as shown above:</p>
		<script type="text/javascript">
			writeCodeBlock({ "Type": "[The RDF class of the object you want to find]", "Keywords": "[Your keywords here]", "Skip": "Number of results to skip", "Take": "Number of results to take" })
		</script>
		<p>For example, to find the Ratings (<code>@Models.Schema.Rating.RDFType</code>s) with "OS" in the name or description, skip the first two, and take the next ten:</p>
		<script type="text/javascript">
			writeCodeBlock({ "Type": "@Models.Schema.Rating.RDFType", "Keywords": "OS", "Skip": 2, "Take": 10 })
		</script>
	</div>
</div>
