@using Models.Schema;
@using Models.DTO;
@using Models.Search;
@model RatingContext
@{
	ViewBag.Title = "Rating Context: " + Model.CodedNotation;

	var ratingTaskData = Factories.RatingTaskManager.GetByRowId( Model.HasRatingTask, true );
	var courseContextData = Factories.CourseContextManager.GetByRowId( Model.HasCourseContext, true );
	var courseData = courseContextData == null ? null : Factories.CourseManager.GetByRowId( courseContextData.HasCourse );
	//var trainingTaskData = courseContextData == null ? null : Factories.TrainingTaskManager.GetByRowId( courseContextData.HasTrainingTask, true );
	var clusterAnalysisData = Factories.ClusterAnalysisManager.GetByRowId( Model.HasClusterAnalysis, true );
}
@functions {
	string GetConceptLink( Guid conceptRowID )
	{
		return LinkHelper.GetDetailPageLink( Factories.ConceptManager.GetByRowId( conceptRowID ), Url.Content, concept => concept.Name );
	}
	string GetConceptLinkList( List<Guid> conceptRowIDs )
	{
		return LinkHelper.GetDetailPageLinkList( Factories.ConceptManager.GetMultiple( conceptRowIDs ), Url.Content, concept => concept.Name, "<ul><li>", "</li><li>", "</li></ul>" );
	}
}

@Html.Partial( "~/Views/Shared/_DetailBasicInfo.cshtml", new DetailBasicInfoHelper( Model )
{
	TypeLabel = "Rating Context",
	Name = "Rating Context",
	PropertyList = new List<NamedString>()
	{
		new NamedString( "", "value" ){ HeaderSectionLabel = "Part I Data" },
		new NamedString( "Notes", Model.Notes ),
		new NamedString( "Code", Model.CodedNotation ),
		new NamedString( "Rating", LinkHelper.GetDetailPageLink( Factories.RatingManager.GetByRowId( Model.HasRating ), Url.Content, m => m.Name + " (" + m.CodedNotation + ")" ) ),
		new NamedString( "Billet Title", LinkHelper.GetDetailPageLink( Factories.JobManager.GetByRowId( Model.HasBilletTitle ), Url.Content, m => m.Name ) ),
		new NamedString( "Functional Area", LinkHelper.GetDetailPageLink( Factories.WorkRoleManager.GetByRowId( Model.HasWorkRole ), Url.Content, m => m.Name ) ),
		new NamedString( "Rating Task", ratingTaskData == null ? null : LinkHelper.GetDetailPageLink( ratingTaskData, Url.Content, m => m.Description ) ),
		new NamedString( "Source", ratingTaskData == null ? null : LinkHelper.GetDetailPageLink( Factories.ReferenceResourceManager.GetByRowId( ratingTaskData.HasReferenceResource ), Url.Content, m => m.Name ) ),
		new NamedString( "Source Date", ratingTaskData == null ? null : LinkHelper.GetDetailPageLink( Factories.ReferenceResourceManager.GetByRowId( ratingTaskData.HasReferenceResource ), Url.Content, m => m.PublicationDate ) ),
		new NamedString( "Applicability Type", GetConceptLink( Model.ApplicabilityType ) ),
		new NamedString( "Pay Grade Type", GetConceptLink( Model.PayGradeType ) ),
		new NamedString( "Training Gap Type", GetConceptLink( Model.TrainingGapType ) ),
		new NamedString( "", courseContextData == null ? null : "value" ){ HeaderSectionLabel = "Part II Data" },
		new NamedString( "Course Context Details", courseContextData == null ? null : LinkHelper.GetDetailPageLink( courseContextData, Url.Content, m => m.RowId.ToString() ) ),
		new NamedString( "Course", courseContextData == null ? null : LinkHelper.GetDetailPageLink( courseData, Url.Content, m => m.Name + " (" + m.CodedNotation + ")" ) ),
		new NamedString( "Curriculum Control Authority", courseData == null ? null : LinkHelper.GetDetailPageLink( Factories.OrganizationManager.GetByRowId( courseData.CurriculumControlAuthority ), Url.Content, m => m.Name ) ),
		new NamedString( "Training Task", courseContextData == null ? null : LinkHelper.GetDetailPageLink( Factories.TrainingTaskManager.GetByRowId( courseContextData.HasTrainingTask, true ), Url.Content, m => m.Description ) ),
		new NamedString( "Assessment Method Type(s)", courseContextData == null ? null : GetConceptLinkList( courseContextData.AssessmentMethodType ) ),
		new NamedString( "", clusterAnalysisData == null ? null : "value" ){ HeaderSectionLabel = "Part III Data" },
		new NamedString( "Cluster Analysis Details", clusterAnalysisData == null ? null : LinkHelper.GetDetailPageLink( clusterAnalysisData, Url.Content, m => m.RowId.ToString() ) ),
		new NamedString( "Cluster Analysis Title", clusterAnalysisData == null ? null : LinkHelper.GetDetailPageLink( Factories.ClusterAnalysisTitleManager.GetByRowId( clusterAnalysisData.HasClusterAnalysisTitle ), Url.Content, m => m.Name ) ),
		new NamedString( "Training Solution Type", clusterAnalysisData == null ? null : GetConceptLink( clusterAnalysisData.TrainingSolutionType ) ),
		new NamedString( "Recommended Modality Type", clusterAnalysisData == null ? null : GetConceptLink( clusterAnalysisData.RecommendedModalityType ) ),
		new NamedString( "Development Specification Type", clusterAnalysisData == null ? null : GetConceptLink( clusterAnalysisData.DevelopmentSpecificationType ) ),
		new NamedString( "Candidate Platform Type(s)", clusterAnalysisData == null ? null : GetConceptLinkList( clusterAnalysisData.CandidatePlatformType ) ),
		new NamedString( "CFM Placement Type", clusterAnalysisData == null ? null : GetConceptLinkList( clusterAnalysisData.CFMPlacementType ) ),
		new NamedString( "Development Ratio", clusterAnalysisData == null ? null : GetConceptLink( clusterAnalysisData.DevelopmentRatioType ) ),
		new NamedString( "Estimated Instructional Time", clusterAnalysisData == null ? null : clusterAnalysisData.EstimatedInstructionalTime.ToString() ),
		new NamedString( "Development Time", clusterAnalysisData == null ? null : clusterAnalysisData.DevelopmentTime.ToString() ),
		new NamedString( "Priority Placement", clusterAnalysisData == null ? null : clusterAnalysisData.PriorityPlacement.ToString() )
	}
} )

