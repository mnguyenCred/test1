@using Models.Schema;
@using Models.DTO;
@using Newtonsoft.Json;
@model RatingContext
@{
	var title = Model.Id > 0 ? "Editing Rating Context" : "New Rating Context";
	ViewBag.Title = title;

	var payGradeTypeList = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_Pay_Grade ).Concepts.Select( m => SimpleItemHelper.GetSimpleItem( m ) ).ToList();
	var applicabilityTypeList = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_TaskApplicability ).Concepts.Select( m => SimpleItemHelper.GetSimpleItem( m ) ).ToList();
	var trainingGapTypeList = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_TrainingGap ).Concepts.Select( m => SimpleItemHelper.GetSimpleItem( m ) ).ToList();

	var currentRating = Factories.RatingManager.Get( Model.HasRating );
	var currentRatingTask = Factories.RatingTaskManager.Get( Model.HasRatingTask );
	var currentBilletTitle = Factories.JobManager.Get( Model.HasBilletTitle );
	var currentWorkRole = Factories.WorkRoleManager.Get( Model.HasWorkRole );
	var currentTrainingTask = Factories.TrainingTaskManager.Get( Model.HasTrainingTask );
}

@Html.Partial( "~/Views/Shared/_FormHelperV1.cshtml" )

<script type="text/javascript">
	var Data = {
		//The original resource
		Source: @Html.Raw( JsonConvert.SerializeObject( Model, Formatting.None ) ),
		//Mapping used internally for the FormItem stuff
		Form: {},
		//Functions to configure FormItem stuff
		Config: {
			//Configure Save Button
			SaveButton: function (Field) {
				Field.SaveURL = "@Url.Content("~/ratingtask/save/")";
				Field.RedirectAfterSuccessURL = "@Url.Content("~/ratingtask/detail/")";
				Field.getDataToSave = function () {
					return {
						...Data.Source,
						...Data.Form.read()
					};
				}
			},
			PayGradeType: function (Field) {
				Field.Items = @Html.Raw( JsonConvert.SerializeObject( payGradeTypeList, Formatting.None ) );
				Field.renderItems();
			},
			ApplicabilityType: function (Field) {
				Field.Items = @Html.Raw( JsonConvert.SerializeObject( applicabilityTypeList, Formatting.None ) );
				Field.renderItems();
			},
			TrainingGapType: function (Field) {
				Field.Items = @Html.Raw( JsonConvert.SerializeObject( trainingGapTypeList, Formatting.None ) );
				Field.renderItems();
			},
			HasRating: function (Field) {
				//Search to add new valid Ratings
				Field.SelectedItems = [@Html.Raw( (currentRating == null || currentRating.Id == 0) ? "" : JsonConvert.SerializeObject( currentRating, Formatting.None ) )];
				Field.Search.SearchURL = "@Url.Content( "~/rating/dosearch" )";
				Field.Search.modifyQuery = function (query) {
					//And where Ratings are NOT already associated with this Rating Context...
					query.Filters.push({ Name: "navy:RatingContext", ItemIds: [Data.Source.Id], IsNegation: true });
				}

				//Configure for single selection
				useSingleSelectionMode(Field);

				//Show the current item
				Field.Selected.doSearch();
			},
			HasRatingTask: function (Field) {
				//Search to add new valid Ratings
				Field.SelectedItems = [@Html.Raw( (currentRatingTask == null || currentRatingTask.Id == 0) ? "" : JsonConvert.SerializeObject( currentRatingTask, Formatting.None ) )];
				Field.Search.SearchURL = "@Url.Content( "~/ratingtask/dosearch" )";
				Field.Search.modifyQuery = function (query) {
					//And where Rating Tasks are NOT already associated with this Rating Context...
					query.Filters.push({ Name: "navy:RatingContext", ItemIds: [Data.Source.Id], IsNegation: true });
				}

				//Configure for single selection
				useSingleSelectionMode(Field);

				//Show the current item
				Field.Selected.doSearch();
			},
			HasBilletTitle: function (Field) {
				//Search to select Billet Titles
				Field.SelectedItems = [@Html.Raw( (currentBilletTitle == null || currentBilletTitle.Id == 0) ? "" : JsonConvert.SerializeObject( currentBilletTitle, Formatting.None ) )];
				Field.Search.SearchURL = "@Url.Content( "~/billettitle/dosearch" )";
				Field.Search.modifyQuery = function (query) {
					//And where Billet Titles are NOT already associated with this Rating Context...
					query.Filters.push({ Name: "navy:RatingContext", ItemIds: [Data.Source.Id], IsNegation: true });
				}

				//Configure for single selection
				useSingleSelectionMode(Field);

				//Show the current item
				Field.Selected.doSearch();
			},
			HasWorkRole: function (Field) {
				//Search to select Work Role
				Field.SelectedItems = [@Html.Raw( (currentWorkRole == null || currentWorkRole.Id == 0) ? "" : JsonConvert.SerializeObject( currentWorkRole, Formatting.None ) )];
				Field.Search.SearchURL = "@Url.Content( "~/workrole/dosearch" )";
				Field.Search.modifyQuery = function (query) {
					//And where Work Roles are NOT already associated with this Rating Context...
					query.Filters.push({ Name: "navy:RatingContext", ItemIds: [Data.Source.Id], IsNegation: true });
				}

				//Configure for single selection
				useSingleSelectionMode(Field);

				//Show the current item
				Field.Selected.doSearch();
			},
			HasTrainingTask: function (Field) {
				//Search to select Training Task
				Field.SelectedItems = [@Html.Raw( (currentTrainingTask == null || currentTrainingTask.Id == 0) ? "" : JsonConvert.SerializeObject( currentTrainingTask, Formatting.None ) )];
				Field.Search.SearchURL = "@Url.Content( "~/trainingtask/dosearch" )";
				Field.Search.modifyQuery = function (query) {
					//Where Training Tasks are NOT already associated with this Rating Context...
					query.Filters.push({ Name: "navy:RatingContext", ItemIds: [Data.Source.Id], IsNegation: true });
				}

				//Configure for single selection
				useSingleSelectionMode(Field);

				//Show the current item
				Field.Selected.doSearch();
			}
		}
	};
	//

	$(document).ready(function () {
		FormItem.setupFormItems(Data.Form, "RatingContext", Data.Config);
		Data.Form.write(Data.Source);
	});
	//

	function useSingleSelectionMode(Field) {
		//Force single selection
		Field.addItem = function (Item) {
			Field.SelectedItems = [Item];
			Field.refresh();
		}

		//Return the first item or null
		Field.read = function () {
			return Field.SelectedItems[0]?.RowId || null;
		}

		//Use "Remove" instead of "Cancel" for the button text
		Field.Selected.renderResultWrapper = function (container, Result) {
			var button = $("<button>Remove</button>");
			Field.renderWrappedResult(container, Result, Field.Selected.renderResult, button, Field.removeItem);
		};
	}
	//
</script>

<h2>@title</h2>
<form-item data-path="RatingContext.Id" data-ui="display" data-label="ID"></form-item>
<form-item data-path="RatingContext.RowId" data-ui="display" data-label="RowID"></form-item>

<h3>Basic Info</h3>
<form-item data-path="RatingContext.CodedNotation" data-ui="text" data-label="Code"></form-item>
<form-item data-path="RatingContext.Note" data-ui="textarea" data-label="Note"></form-item>
<form-item data-path="RatingContext.PayGradeType" data-ui="select" data-label="Rank (Pay Grade)" data-config="PayGradeType"></form-item>
<form-item data-path="RatingContext.ApplicabilityType" data-ui="select" data-label="Applicability Type" data-config="ApplicabilityType"></form-item>
<form-item data-path="RatingContext.TrainingGapType" data-ui="select" data-label="Training Gap Type" data-config="TrainingGapType"></form-item>

<h3>Connections</h3>
<form-item data-path="RatingContext.HasRating" data-ui="searchselectdeferred" data-label="Related Rating" data-config="HasRating"></form-item>
<form-item data-path="RatingContext.HasRatingTask" data-ui="searchselectdeferred" data-label="Related Rating Task" data-config="HasRatingTask"></form-item>
<form-item data-path="RatingContext.HasBilletTitle" data-ui="searchselectdeferred" data-label="Related Billet Title" data-config="HasBilletTitle"></form-item>
<form-item data-path="RatingContext.HasWorkRole" data-ui="searchselectdeferred" data-label="Related Functional Area" data-config="HasWorkRole"></form-item>
<form-item data-path="RatingContext.HasTrainingTask" data-ui="searchselectdeferred" data-label="Related Training Task" data-config="HasTrainingTask"></form-item>

<h3>Save Changes</h3>
<form-item data-path="RatingContext.SaveButton" data-ui="savebutton" data-label="Save Changes" data-config="SaveButton"></form-item>