@using Models.Schema;
@using Models.DTO;
@using Models.Search;
@model ReferenceResource
@{
	ViewBag.Title = "Reference Resource: " + Model.Name;
	var referenceType = Factories.ConceptManager.GetMultiple( Model.ReferenceType );
}

@Html.Partial( "~/Views/Shared/_DetailBasicInfo.cshtml", new DetailBasicInfoHelper( Model )
{
	TypeLabel = "Reference Resource",
	Name = Model.Name,
	PropertyList = new List<NamedString>()
	{
		new NamedString( "Description", Model.Description ),
		new NamedString( "Date of Source", Model.PublicationDate ),
		new NamedString( "Reference Resource Type",  LinkHelper.GetDetailPageLinkList( Factories.ConceptManager.GetMultiple( Model.ReferenceType ), Url.Content, m => m.Name, "<ul><li>", "</li><li>", "</li></ul>" ) )
	}
} )

@Html.Partial( "~/Views/Shared/_RatingTaskCountBySourceTypeTable.cshtml", new List<SearchFilter>()
{
	new SearchFilter()
	{
		Name = "> RatingTaskId > RatingTask > ReferenceResourceId > ReferenceResource",
		ItemIds = new List<int>(){ Model.Id }
	}
} )

@Html.Partial( "~/Views/Search/_ItemListSearch.cshtml" )
<script type="text/javascript">
	var ItemListConfigs = {
		CommonFilters: [
			{ Name: "> RatingTaskId > RatingTask > ReferenceResourceId > ReferenceResource", ItemIds: [ @Model.Id ] }
		],
		Searches: {
			RatingTasks: {
				Header: "Rating Tasks",
				SearchType: "RatingContext",
				StyleType: "RatingTask",
				Fields: [
					{ Label: "Rating Context", RenderPath: ["Id|RatingContext"], QueryPath: ".Id", IsNumeric: true },
					{ Label: "Rating", RenderPath: ["HasRating|Rating", "CodedNotation|Rating"], QueryPath: "> RatingId > Rating.CodedNotation" },
					{ Label: "Rating Task", RenderPath: ["HasRatingTask|RatingTask", "Description|RatingTask"], QueryPath: "> RatingTaskId > RatingTask.TextFields" },
					{ Label: "Training Gap", RenderPath: ["TrainingGapType|Concept", "Name|Concept"], QueryPath: "> FormalTrainingGapId > Concept.Name" }
				]
			},
			TrainingTasks: {
				Header: "Training Tasks",
				SearchType: "RatingContext",
				StyleType: "TrainingTask",
				Filters: [
					{ Name: "> CourseContextId > CourseContext:NotNull" }
				],
				Fields: [
					{ Label: "Rating Context", RenderPath: ["Id|RatingContext"], QueryPath: ".Id", IsNumeric: true },
					{ Label: "Course Context", RenderPath: ["HasCourseContext|CourseContext", "Id|CourseContext"], QueryPath: "> CourseContextId > CourseContext", IsNumeric: true },
					{ Label: "Rating", RenderPath: ["HasRating|Rating", "CodedNotation|Rating"], QueryPath: "> RatingId > Rating.CodedNotation" },
					{ Label: "Training Task", RenderPath: [ "HasCourseContext|CourseContext", "HasTrainingTask|TrainingTask", "Description|TrainingTask" ], QueryPath: "> CourseContextId > CourseContext > HasTrainingTaskId > TrainingTask.TextFields" },
					{ Label: "Course Code", RenderPath: [ "HasCourseContext|CourseContext", "HasCourse|Course", "CodedNotation|Course" ], QueryPath: "> CourseContextId > CourseContext > HasCourseId > Course.CodedNotation" },
					{ Label: "Assessment Approach", RenderPath: ["HasCourseContext|CourseContext", "AssessmentMethodType|Concept", "Name|Concept"], QueryPath: "> CourseContextId > CourseContext > AssessmentMethodConceptId > Concept.Name" }
				]
			}
		}
	};
	//

	$(document).ready(function () {
		ItemListSearches.setupItemLists(ItemListConfigs);
	});
	//
</script>
<style type="text/css">
	table [data-column='Course Context'] { width: 125px; }
	table[data-styletype='RatingTask'] [data-column='Rating'] { width: 75px; }
	table[data-styletype='RatingTask'] [data-column='Training Gap'] { width: 100px; margin-left: auto; }
	table[data-styletype='TrainingTask'] [data-column='Rating'] { width: 75px; }
	table[data-styletype='TrainingTask'] [data-column='Assessment Approach'] { width: 200px; }
	table[data-styletype='TrainingTask'] [data-column='Assessment Approach'] a { display: block; }
</style>

<item-list-search name="RatingTasks"></item-list-search>
<item-list-search name="TrainingTasks"></item-list-search>
