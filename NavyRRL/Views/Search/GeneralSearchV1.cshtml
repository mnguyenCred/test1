
@{
	ViewBag.Title = "Search";

	var searchType = ViewBag.SearchType ?? Request.Params["searchType"] ?? "Rating";
	var isAdmin = Services.AccountServices.IsUserSiteManager();

}

@Html.Partial( "~/Views/Help/_GeneralSearch.cshtml" )
@Html.Partial( "~/Views/Shared/_AJAXTools.cshtml" )
@Html.Partial( "~/Views/Search/_SearchCoreV1.cshtml" )

<script type="text/javascript">
	var UI = {};
	var SearchData = {
		Active: {},
		Types: [
			{ Name: "BilletTitle", LabelSingle: "Billet Title", LabelMulti: "Billet Titles" },
			{ Name: "ClusterAnalysis", LabelSingle: "Cluster Analysis", LabelMulti: "Cluster Analyses", customRenderResult: function (Result, container) {
				container.find(".codedNotation, .name, .description").html("<div class=\"spinner\"></div>");
				this.Search.getRelatedResourceOrLookup(Result.HasRating, "@Url.Content("~/Rating/GetByRowId/")" + Result.HasRating, (data) => {
					container.find(".codedNotation").html(data.CodedNotation);
				});
				this.Search.getRelatedResourceOrLookup(Result.HasClusterAnalysisTitle, "@Url.Content("~/ClusterAnalysisTitle/GetByRowId/")" + Result.HasClusterAnalysisTitle, (data) => {
					container.find(".name").html(data.Name);
				});
				this.Search.getRelatedResourceOrLookup(Result.HasRatingTask, "@Url.Content("~/RatingTask/GetByRowId/")" + Result.HasRatingTask, (data) => {
					container.find(".description").html(data.Description);
				});
			} },
			{ Name: "ClusterAnalysisTitle", LabelSingle: "Cluster Analysis Title", LabelMulti: "Cluster Analysis Titles" },
			{ Name: "Concept", LabelSingle: "Concept", LabelMulti: "Concepts", customRenderResult: function (Result, container) {
				container.find(".inScheme").html("<div class=\"spinner\"></div>");
				this.Search.getRelatedResourceOrLookup(Result.InScheme, "@Url.Content("~/ConceptScheme/GetByRowId/")" + Result.InScheme, (data) => {
					container.find(".inScheme").html(data.Name);
				});
			} },
			{ Name: "ConceptScheme", LabelSingle: "Concept Scheme", LabelMulti: "Concept Schemes" },
			{ Name: "Course", LabelSingle: "Course", LabelMulti: "Courses" },
			{ Name: "CourseContext", LabelSingle: "Course Context", LabelMulti: "Course Contexts", customRenderResult: function (Result, container) {
				container.find(".codedNotation, .name, .description").html("<div class=\"spinner\"></div>");
				this.Search.getRelatedResourceOrLookup(Result.HasCourse, "@Url.Content("~/Course/GetByRowId/")" + Result.HasCourse, (data) => {
					container.find(".codedNotation").html(data.CodedNotation);
					container.find(".name").html(data.Name);
				});
				this.Search.getRelatedResourceOrLookup(Result.HasTrainingTask, "@Url.Content("~/TrainingTask/GetByRowId/")" + Result.HasTrainingTask, (data) => {
					container.find(".description").html(data.Description);
				});
			} },
			{ Name: "WorkRole", LabelSingle: "Functional Area", LabelMulti: "Functional Areas" },
			{ Name: "Organization", LabelSingle: "Organization (CCA)", LabelMulti: "Organizations (CCAs)", customRenderResult: function (Result, container) {
				//container.find(".name").html(Result.Name + (Result.AlternateName ? " (" + Result.AlternateName + ")" : ""));
				container.find(".description").html("");
			} },
			{ Name: "Rating", LabelSingle: "Rating", LabelMulti: "Ratings" },
			{ Name: "RatingContext", LabelSingle: "Rating Context", LabelMulti: "Rating Contexts", customRenderResult: function (Result, container) {
				container.find(".codedNotation, .name, .description").html("<div class=\"spinner\"></div>");
				this.Search.getRelatedResourceOrLookup(Result.HasRating, "@Url.Content("~/Rating/GetByRowId/")" + Result.HasRating, (data) => {
					container.find(".codedNotation").html(data.CodedNotation);
					container.find(".name").html(data.Name);
				});
				this.Search.getRelatedResourceOrLookup(Result.HasRatingTask, "@Url.Content("~/RatingTask/GetByRowId/")" + Result.HasRatingTask, (data) => {
					container.find(".description").html(data.Description);
				});
			} },
			{ Name: "RatingTask", LabelSingle: "Rating Task", LabelMulti: "Rating Tasks" },
			{ Name: "ReferenceResource", LabelSingle: "Reference Resource", LabelMulti: "Reference Resources", customRenderResult: function (Result, container) { 
				container.find(".codedNotation").html(Result.PublicationDate || "No Publication Date");
				container.find(".name").html(Result.Name);
			} },
			{ Name: "RMTLProject", LabelSingle: "RMTL Project", LabelMulti: "RMTL Projects" },
			{ Name: "TrainingTask", LabelSingle: "Training Task", LabelMulti: "Training Tasks" }
		]
	};
	//

	$(document).ready(function () {
		setupUI();
		setupSearches();
	});
	//

	function setupUI() {
		UI.SearchTypeSelect = $("[data-property='search:SearchType']");
		UI.KeywordsText = $("[data-property='search:Keyword']");
		UI.SortOrderSelect = $("[data-property='search:SortOrder']");
		UI.FiltersBox = $(".searchFiltersBox");
		UI.StatusText = $(".searchStatusBox");
		UI.Spinner = $(".searchSpinner");
		UI.ResultsBox = $(".searchResultsBox");
		UI.PagingBox = $(".searchPagingBox");
		UI.NewItemLink = $(".newItemLink");
	}
	//

	function setupSearches() {
		//Create individual searches
		SearchData.Types.forEach(Type => {
			Type.Search = createSearch(Type.Name, "@Url.Content("~/")" + Type.Name.toLowerCase() + "/dosearch", UI.StatusText, UI.Spinner, UI.ResultsBox, UI.PagingBox, 25, 800);
			UI.SearchTypeSelect.append("<option value=\"" + Type.Name + "\">" + Type.LabelSingle + "</option>");
			Type.IsActive = false;

			//Assign method to get filters
			Type.Search.getFilters = function () {
				return [
					{ Name: "search:Keyword", Text: UI.KeywordsText.val().trim() }
				];
			};

			//Assign method to get sort order
			Type.Search.getSortOrder = function () {
				var selected = UI.SortOrderSelect.find(":selected");
				return [{ Column: selected.attr("data-column"), Ascending: selected.attr("data-ascending") == "true" }];
			}

			//Assign method to render a search result
			Type.Search.renderResult = function (Result, container, index) {
				var resultBox = renderResult(Result, container, Type);
				setTimeout(function () {
					Type.customRenderResult?.(Result, resultBox);
				}, index);
			};

			//Scroll to top after everything is rendered
			Type.Search.afterRenderAll = function () {
				window.scrollTo(0, 0);
			};
		});

		//When the search type changes, swap out the active search and trigger its doSearch method
		UI.SearchTypeSelect.on("change", function () {
			UI.KeywordsText.val("");
			setSearchType(UI.SearchTypeSelect.val());
		});

		//Auto-select the search type that matches the desired search type, and trigger the .change() method
		UI.SearchTypeSelect.val("@searchType").trigger("change");

		//When the keywords change, do a search
		UI.KeywordsText.on("keyup change", function () {
			SearchData.Active.Search.delayThenSearch(true, true);
		});

		//When the sort order changes, do a search
		UI.SortOrderSelect.on("change", function () {
			SearchData.Active.Search.delayThenSearch(true, true);
		});
	}
	//

	function setSearchType(searchType) {
		SearchData.Types.map(m => m.IsActive = m.Name == searchType);
		SearchData.Active = SearchData.Types.filter(m => m.Name == searchType)[0];
		SearchData.Active.Search.delayThenSearch(true, true);
		UI.NewItemLink?.attr("href", "@Url.Content("~/")" + SearchData.Active.Name + "/edit/0");
		UI.NewItemLink?.html("Create New " + SearchData.Active.LabelSingle);
	}
	//

	function renderResult(Result, container, Type) {
		var box = $("<div class=\"searchResult\"></div>").appendTo(container);
		var text = $("<div class=\"resultText\"></div>").appendTo(box);
		renderProperty(Result.InScheme, text, "inScheme");
		var label = $("<div class=\"resultLabel\"></div>").appendTo(text);
		renderProperty(Result.CodedNotation, label, "codedNotation");
		renderProperty(Result.Name, label, "name");
		renderProperty(Result.AlternateName ? "(" + Result.AlternateName + ")" : "", label, "alternateName");
		renderProperty(Result.Description, text, "description");

		var linksBox = $("<div class=\"resultLinks\"></div>").appendTo(box);
		linksBox.append("<a href=\"@Url.Content("~/")" + Type.Name + "/detail/" + Result.Id + "\" target=\"_blank\">Details</a>");
		@( isAdmin ? "true" : "false" ) && linksBox.append( "<a href=\"@Url.Content("~/ ")" + Type.Name + "/edit/" + Result.Id + "\" target=\"_blank\">Edit</a>" );

		return box;
	}
	//

	function renderProperty(value, container, cssClass) {
		container.append("<div class=\"resultField " + cssClass + "\">" + (value || "") + "</div>");
	}
	//
</script>
<style type="text/css">
	.searchHeader { background-color: #F5F5F5; padding: 5px 10px 10px 10px; }
	.searchHeader input, .searchHeader select { display: block; width: 100%; max-width: none; height: 26px; }
	.searchHeader .searchMainInputs { display: flex; margin-bottom: 5px; }
	.searchHeader .searchMainInputs .searchMainInput { margin: 0 5px; }
	.searchHeader .searchMainInputs .searchMainInput:first-child { margin-left: 0; }
	.searchHeader .searchMainInputs .searchMainInput:last-child { margin-right: 0; }
	.searchHeader .searchMainInputs .searchMainInput .searchHeaderLabel { font-weight: bold; }
	.searchHeader .searchMainInputs .searchTypeBox { flex: 0 0 200px; }
	.searchHeader .searchMainInputs .keywordsBox { flex: 1 1 auto; }
	.searchHeader .searchMainInputs .sortOrderBox { flex: 0 0 200px; }
	.searchHeader .searchFiltersBox { }
	.searchHeader .searchStatusWrapper { display: flex; align-items: center; }
	.searchHeader .searchStatusWrapper .searchStatusBox { font-style: italic; margin-right: 10px; padding: 0 5px; }

	.searchResultsBox { }
	.searchResultsBox .searchResult { display: flex; padding: 10px; border-top: 1px solid #CCC; }
	.searchResultsBox .searchResult .resultText {  }
	.searchResultsBox .searchResult .resultText .resultField:empty { display: none; }
	.searchResultsBox .searchResult .resultText .inScheme { font-style: italic; margin-bottom: 5px; }
	.searchResultsBox .searchResult .resultText .resultLabel { display: flex; align-items: baseline; gap: 10px; }
	.searchResultsBox .searchResult .resultText .resultLabel .codedNotation { padding: 2.5px 5px; background-color: #EEE; border-radius: 5px; }
	.searchResultsBox .searchResult .resultText .resultLabel .name { font-weight: bold; }
	.searchResultsBox .searchResult .resultText .resultLabel .alternateName { font-weight: bold; }
	.searchResultsBox .searchResult .resultText .description { padding: 5px 10px; }
	.searchResultsBox .searchResult .resultLinks { display: flex; margin-left: auto; }
	.searchResultsBox .searchResult .resultLinks a { padding: 0 10px; border-left: 1px solid #CCC; }
	.searchResultsBox .searchResult .resultLinks a:first-child { border: none; }

	.searchPagingBox { display: flex; gap: 2px 5px; justify-content: center; padding: 10px; }
	.searchPagingBox .currentPage { font-weight: bold; }

	.headerWithNewButton { display: flex; align-items: center; }
	.headerWithNewButton a { margin-left: auto; font-size: 14px; }
</style>

<h2 class="headerWithNewButton">
	<span>Search by Type</span>
	@if ( isAdmin ) { 
		<a class="newItemLink"></a>
	}
</h2>

<div class="searchBox">
	<div class="searchHeader">
		<div class="searchMainInputs">
			<div class="searchMainInput searchTypeBox">
				<div class="searchHeaderLabel">Search Type</div>
				<select data-property="search:SearchType"></select>
			</div>
			<div class="searchMainInput keywordsBox">
				<div class="searchHeaderLabel">Keywords</div>
				<input type="text" data-property="search:Keyword" placeholder="Search..." />
			</div>
			<div class="searchMainInput sortOrderBox">
				<div class="searchHeaderLabel">Sort Order</div>
				<select data-property="search:SortOrder">
					<option data-column="sortOrder:Relevance">Relevance</option>
					<option data-column="sortOrder:DefaultMethod">Default</option>
					<option data-column="Id" data-ascending="false">Newest</option>
					<option data-column="Id" data-ascending="true">Oldest</option>
					<option data-column="sortOrder:DefaultAlphaSort" data-ascending="true">A to Z</option>
					<option data-column="sortOrder:DefaultAlphaSort" data-ascending="false">Z to A</option>
				</select>
			</div>
		</div>
		<div class="searchFiltersBox"></div>
		<div class="searchStatusWrapper">
			<div class="searchStatusBox"></div>
			<div class="spinner searchSpinner"></div>
		</div>
	</div>
	<div class="searchPagingBox"></div>
	<div class="searchResultsBox"></div>
	<div class="searchPagingBox"></div>
</div>