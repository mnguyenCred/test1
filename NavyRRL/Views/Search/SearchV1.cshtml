
@{
    ViewBag.Title = "SearchV1";
}

<script type="text/javascript">
	//This assumes the "Data.Graph" object from UploadV1 is available and populated
	var Data = Data || { Graph: [] };
	var Search = {
		UI: {},
		Results: [],
		//Call this once Data.Graph is ready
		setupFilters: function () {
			Search.UI.FilterList.html("");
			Search.Filters = [
				makeFilter_MicroSearch("Rating", "Add Rating...", {
					doMicroSearch: function (Filter) {
						Data.Graph.filter(m => m.Type == "Rating" && m.CodedNotation.toLowerCase().indexOf(Filter.Text.val().toLowerCase()) > -1).slice(0, 10).forEach(function (Item) {
							Filter.addOption(Item.CodedNotation, Item.CTID);
						});
					},
					applyFilter: function (Filter, Results) {
						return Results.filter(m => m.HasRating?.filter(n => Filter.Items.map(o => o.value).indexOf(n) > -1).length > 0);
					}
				}),
				makeFilter_MicroSearch("Functional Area", "Add Functional Area...", {
					doMicroSearch: function (Filter) {
						Data.Graph.filter(m => m.Type == "WorkRole" && m.Name.toLowerCase().indexOf(Filter.Text.val().toLowerCase()) > -1).slice(0, 10).forEach(function (Item) {
							Filter.addOption(Item.Name, Item.CTID);
						});
					},
					applyFilter: function (Filter, Results) {
						return Results.filter(m => m.HasWorkRole?.filter(n => Filter.Items.map(o => o.value).indexOf(n) > -1).length > 0);
					}
				}),
				makeFilter_MicroSearch("Billet Title", "Add Billet Title...", {
					doMicroSearch: function (Filter) {
						return Data.Graph.filter(m => m.Type == "BilletTitle" && m.Name.toLowerCase().indexOf(Filter.Text.val().toLowerCase()) > -1).slice(0, 10).forEach(function (Item) {
							Filter.addOption(Item.Name, Item.CTID);
						});
					},
					applyFilter: function (Filter, Results) {
						var matchingBilletTitleTaskCTIDs = Data.Graph.filter(m => Filter.Items.map(n => n.value).indexOf(m.CTID) > -1).flatMap(m => m.HasRatingTask);
						return Results.filter(m => matchingBilletTitleTaskCTIDs.indexOf(m.CTID) > -1);
					}
				}),
				makeFilter_Text("Rating Task Keywords", {
					applyFilter: function (Filter, Results) {
						return Results.filter(m => m.Description?.toLowerCase().indexOf(Filter.Text.val().toLowerCase()) > -1);
					}
				}),
				makeFilter_Text("Training Task Keywords", {
					applyFilter: function (Filter, Results) {
						var matchingTrainingTaskCTIDs = Data.Graph.filter(n => n.Type == "TrainingTask" && n.Description?.toLowerCase().indexOf(Filter.Text.val().toLowerCase()) > -1).map(m => m.CTID);
						return Results.filter(m => m.HasTrainingTask && matchingTrainingTaskCTIDs.filter(n => m.HasTrainingTask?.indexOf(n) > -1).length > 0);
					}
				}),
				makeFilter_CheckBoxList("Pay Grade Type", {
					initialize: function (Filter) {
						var matchingCTIDs = Data.Graph.filter(m => m.Type == "RatingTask").flatMap(m => m.PayGradeType);
						var payGrades = Data.Graph.filter(m => matchingCTIDs.indexOf(m.CTID) > -1).sort((a, b) => { return a.CodedNotation > b.CodedNotation ? 1 : -1 });
						payGrades.forEach(function (Grade) {
							Filter.addOption(Grade.CodedNotation, Grade.CTID);
						});
					},
					applyFilter: function (Filter, Results) {
						return Results.filter(m => Filter.Items.filter(n => m.PayGradeType.indexOf(n) > -1).length > 0);
					}
				}),
				makeFilter_CheckBoxList("Source Type", {
					initialize: function (Filter) {
						var matchingCTIDs = Data.Graph.filter(m => m.Type == "ReferenceResource" && m.ReferenceType).flatMap(m => m.ReferenceType);
						var sourceTypes = Data.Graph.filter(m => matchingCTIDs.indexOf(m.CTID) > -1).sort((a, b) => { return a.Name > b.Name ? 1 : -1 });
						sourceTypes.forEach(function (Source) {
							Filter.addOption(Source.Name, Source.CTID);
						});
					},
					applyFilter: function (Filter, Results) {
						var matchingSourceTypeCTIDs = Data.Graph.filter(m => m.Type == "ReferenceResource" && m.ReferenceType?.filter(n => Filter.Items.indexOf(n) > -1).length > 0).map(m => m.CTID);
						return Results.filter(m => matchingSourceTypeCTIDs.filter(n => m.HasReferenceResource.indexOf(n) > -1).length > 0);
					}
				}),
				makeFilter_CheckBoxList("Training Gap Type", {
					initialize: function (Filter) {
						var matchingCTIDs = Data.Graph.filter(m => m.Type == "RatingTask").flatMap(m => m.TrainingGapType);
						var gapTypes = Data.Graph.filter(m => matchingCTIDs.indexOf(m.CTID) > -1).sort((a, b) => { return a.Name > b.Name ? 1 : -1 });
						gapTypes.forEach(function (Gap) {
							Filter.addOption(Gap.Name, Gap.CTID);
						});
					},
					applyFilter: function (Filter, Results) {
						return Results.filter(m => Filter.Items.filter(n => m.TrainingGapType.indexOf(n) > -1).length > 0);
					}
				}),
				makeFilter_CheckBoxList("Applicability Type", {
					initialize: function (Filter) {
						var matchingCTIDs = Data.Graph.filter(m => m.Type == "RatingTask").flatMap(m => m.ApplicabilityType);
						var applicabilityTypes = Data.Graph.filter(m => matchingCTIDs.indexOf(m.CTID) > -1).sort((a, b) => { return a.Name > b.Name ? 1 : -1 });
						applicabilityTypes.forEach(function (Applicability) {
							Filter.addOption(Applicability.Name, Applicability.CTID);
						});
					},
					applyFilter: function (Filter, Results) {
						return Results.filter(m => Filter.Items.filter(n => m.ApplicabilityType.indexOf(n) > -1).length > 0);
					}
				})
			];
			doSearch();
		}
	};
	//

	function makeFilter_Text(label, settings) {
		var Filter = makeFilter_Core(label, "text", settings);
		Filter.Timeout = 0;
		Filter.Text = $("<input type=\"text\" />").appendTo(Filter.Content);
		Filter.isApplicable = function () {
			return Filter.Text.val().trim().length > 0;
		};
		Filter.Text.on("keyup change", function () {
			clearTimeout(Filter.Timeout);
			Filter.Timeout = setTimeout(doSearch, 500);
		});
		return Filter;
	}
	//

	function makeFilter_CheckBoxList(label, settings) {
		var Filter = makeFilter_Core(label, "text", settings);
		Filter.Items = [];
		Filter.addOption = function (label, value) {
			var wrapper = $("<label><span>" + label + "</span></label>").appendTo(Filter.Content);
			var checkBox = $("<input type=\"checkbox\" value=\"" + value + "\">").prependTo(wrapper);
			checkBox.on("change", function () {
				Filter.Items = Filter.Content.find("input:checked").get().map(m => m.value);
				doSearch();
			});
		};
		Filter.isApplicable = function () {
			return Filter.Content.find("input:checked").length > 0;
		};
		Filter.initialize(Filter);
		return Filter;
	}
	//

	function makeFilter_MicroSearch(label, placeholder, settings) {
		var Filter = makeFilter_Core(label, "text", settings);
		Filter.Text = $("<input type=\"text\" placeholder=\"" + (placeholder || "") + "\" />").appendTo(Filter.Content);
		Filter.OptionsBox = $("<div class=\"optionsBox\"></div>").appendTo(Filter.Content);
		Filter.ItemsBox = $("<div class=\"itemsBox\"></div>").appendTo(Filter.Content);
		Filter.BlurTimeout = 0;
		Filter.Items = [];
		Filter.addOption = function (label, value) {
			var button = $("<button>" + label + "</button>").appendTo(Filter.OptionsBox);
			button.on("click", function (e) {
				Filter.addItem(label, value);
				Filter.Text.val("");
				Filter.OptionsBox.html("");
				doSearch();
			});
		}
		Filter.addItem = function (label, value) {
			if (Filter.Items.filter(m => m.value == value).length == 0) {
				var item = {
					label: label,
					value: value,
					box: $("<div class=\"microSearchItem\"></div>").appendTo(Filter.ItemsBox)
				};
				item.box.append("<span>" + label + "</span>");
				$("<button class=\"redButton\">X</button>").appendTo(item.box).on("click", function () {
					Filter.Items = Filter.Items.filter(m => m != item);
					item.box.remove();
					doSearch();
				});
				Filter.Items.push(item);
			}
		}
		Filter.isApplicable = function () {
			return Filter.Items.length > 0;
		}
		Filter.Text.on("keyup", function () {
			Filter.OptionsBox.html("");
			if (Filter.Text.val().trim().length > 0) {
				Filter.doMicroSearch(Filter);
			}
		});
		Filter.Text.on("blur", function () {
			clearTimeout(Filter.BlurTimeout);
			Filter.BlurTimeout = setTimeout(function () {
				Filter.OptionsBox.html("");
			}, 100);
		});
		return Filter;
	}
	//

	function makeFilter_Core(label, type, settings) {
		var Filter = {
			Box: $("<div class=\"filterItem " + type + "\"></div>").appendTo(Search.UI.FilterList),
			...settings
		};
		Filter.Box.append("<div class=\"filterLabel\">" + label + "</div>");
		Filter.Content = $("<div class=\"filterContent\"></div>").appendTo(Filter.Box);

		return Filter;
	}

	$(document).ready(function () {
		setupSearchUI();
	});
	//

	function setupSearchUI() {
		Search.UI.Box = $(".searchBox");
		Search.UI.StatusBox = Search.UI.Box.find(".searchStatusBox");
		Search.UI.FilterList = Search.UI.Box.find(".searchFilterList");
		Search.UI.ResultsBox = Search.UI.Box.find(".searchResultsBox");
		Search.UI.ResultsTableBody = Search.UI.Box.find(".searchResultsTable tbody");
	}
	//

	function doSearch() {
		Search.Results = Data.Graph.filter(m => m.Type == "RatingTask");
		Search.Filters.forEach(function (Filter) {
			if (Filter.isApplicable()) {
				Search.Results = Filter.applyFilter(Filter, Search.Results);
			}
		});
		renderResults();
	}
	//

	function renderResults() {
		console.log("Rendering Results", Search.Results);
		Search.UI.StatusBox.html("Found " + Search.Results.length + " Results");
		Search.UI.ResultsTableBody.find("tr:not(.tableHeader)").remove();
		Search.Results.forEach(function (Result) {
			var row = $("<tr></tr>").appendTo(Search.UI.ResultsTableBody);
			setTimeout(function () {
				row.append("<td>" + getFields(Result.PayGradeType, "CodedNotation") + "</td>");
				row.append("<td>" + Result.Description + "</td>");
				row.append("<td>" + getFields(Result.HasTrainingTask, "Description") + "</td>");
			}, 0);
		});
	}
	//

	function getDataByCTIDs(ctids) {
		return Data.Graph.filter(m => (ctids || []).indexOf(m.CTID) > -1);
	}
	//

	function getFields(ctids, fieldName) {
		return getDataByCTIDs(ctids)?.map(m => m[fieldName] || "").join(" | ");
	}
	//

</script>
<style type="text/css">
	.container { width: 100%; }

	.searchBox { display: flex; }
	.searchBox .searchFilterBox { flex: 300px 0 0; margin-right: 10px; }
	.searchBox .searchResultsBox { flex: 1 1 auto; }
	.searchBox .searchFilterBox .filterItem { padding: 5px 0 10px 0; }
	.searchBox .searchFilterBox .filterItem:not(:last-child) { border-bottom: 1px solid #CCC; }
	.searchBox .searchFilterBox .filterItem .filterLabel { font-weight: bold; }
	.searchBox .searchFilterBox .filterItem .filterContent { position: relative; }
	.searchBox .searchFilterBox .filterItem .filterContent input[type='text'] { display: block; width: 100%; max-width: none; }
	.searchBox .searchFilterBox .filterItem .filterContent label { display: block; width: 100%; font-weight: normal; margin: 0; padding: 1px 5px; }
	.searchBox .searchFilterBox .filterItem .filterContent label:hover, .searchBox .searchFilterBox .filterItem .filterContent label:focus { cursor: pointer; background-color: rgba(0,0,0,0.1); }
	.searchBox .searchFilterBox .filterItem .filterContent label input { margin-right: 10px; }
	.searchBox .searchFilterBox .filterItem .filterContent .optionsBox { position: absolute; z-index: 10; width: 100%; background-color: #FFF; border: 1px solid #CCC; }
	.searchBox .searchFilterBox .filterItem .filterContent .optionsBox:empty { display: none; }
	.searchBox .searchFilterBox .filterItem .filterContent .optionsBox button { display: block; width: 100%; padding: 10px; border: none; background-color: #FFF; border-radius: 0; }
	.searchBox .searchFilterBox .filterItem .filterContent .optionsBox button:hover, .searchBox .searchFilterBox .filterItem .filterContent .optionsBox button:focus { background-color: rgba(0,0,0,0.1); }
	.searchBox .searchFilterBox .filterItem .filterContent .itemsBox { padding: 5px 0; }
	.searchBox .searchFilterBox .filterItem .filterContent .itemsBox .microSearchItem { display: flex; }
	.searchBox .searchFilterBox .filterItem .filterContent .itemsBox .microSearchItem:not(:last-child) { border-bottom: 1px dashed #CCC; }
	.searchBox .searchFilterBox .filterItem .filterContent .itemsBox .microSearchItem span { flex: 1 1 auto; padding: 2.5px 10px 2.5px 5px; }
	.searchBox .searchFilterBox .filterItem .filterContent .itemsBox .microSearchItem .redButton { width: 26px; height: 26px; background-color: #D55; color: #FFF; font-weight: bold; border: none; }

	.searchBox .searchResultsBox { overflow-x: scroll; }
	.searchBox .searchResultsBox .searchResultsTable { min-width: 100%; }
	.searchBox .searchResultsBox .searchResultsTable th { white-space: nowrap; background-color: #555; color: #FFF; padding: 5px 10px; }
	.searchBox .searchResultsBox .searchResultsTable td { border: 1px solid #CCC; padding: 1px 5px; font-size: 12px; }
</style>

<h2>Search</h2>

<div class="searchBox">
	<div class="searchFilterBox">
		<div class="filterItem searchStatusBox"></div>
		<div class="searchFilterList"></div>
	</div>
	<div class="searchResultsBox">
		<table class="searchResultsTable">
			<tbody>
				<tr class="tableHeader"><th>Pay Grade</th><th>Rating Task Text</th><th>Training Task Text</th></tr>
			</tbody>
		</table>
	</div>
</div>
