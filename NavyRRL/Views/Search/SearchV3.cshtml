@using Newtonsoft.Json;
@using Models.Schema;
@using Services;
@{
	ViewBag.Title = "Search V2";

	var ratings = RatingServices.GetAllActiveRatings().OrderByDescending( m => m.CodedNotation.ToLower() == "all" ).ToList();
	var ratingFilter = new SimpleFilter()
	{
		Name = "navy:Rating",
		Items = ratings.Select( m => { return new SimpleFilterItem() { Label = m.CodedNotation + " - " + m.Name, Id = m.Id }; } ).ToList()
	};
	var billetTitles = RatingTaskServices.GetAllActiveBilletTitles().ToList();
	var billetFilter = new SimpleFilter()
	{
		Name = "navy:Job",
		Items = billetTitles.Select( m => { return new SimpleFilterItem() { Label = m.Name, Id = m.Id }; } ).ToList()
	};
	var cca = RatingTaskServices.GetAllOrganizations().ToList();
	var ccaFilter = new SimpleFilter()
	{
		Name = "navy:Organization",
		Items = cca.Select( m => { return new SimpleFilterItem() { Label = m.Name, Id = m.Id }; } ).ToList()
	};
	var functionalAreas = RatingTaskServices.GetAllFunctionalAreas().ToList();
	var functionalAreaFilter = new SimpleFilter()
	{
		Name = "navy:WorkRole",
		Items = functionalAreas.Select( m => { return new SimpleFilterItem() { Label = m.Name, Id = m.Id }; } ).ToList()
	};
	var levels = SchemeToFilter( Factories.ConceptSchemeManager.ConceptScheme_RatingLevel );
	var payGradeTypeFilter = SchemeToFilter( Factories.ConceptSchemeManager.ConceptScheme_Pay_Grade );
	var trainingGapTypeFilter = SchemeToFilter( Factories.ConceptSchemeManager.ConceptScheme_TrainingGap );
	var applicabilityTypeFilter = SchemeToFilter( Factories.ConceptSchemeManager.ConceptScheme_TaskApplicability );
	var referenceTypeFilter = SchemeToFilter( Factories.ConceptSchemeManager.ConceptScheme_ReferenceResource );
	var courseTypeFilter = SchemeToFilter( Factories.ConceptSchemeManager.ConceptScheme_CourseType );
	var assessmentMethodTypeFilter = SchemeToFilter( Factories.ConceptSchemeManager.ConceptScheme_CurrentAssessmentApproach );
}
@functions {
	public class SimpleFilter
	{
		public SimpleFilter()
		{
			Items = new List<SimpleFilterItem>();
		}

		public string Name { get; set; }
		public int Id { get; set; }
		public List<SimpleFilterItem> Items { get; set; }
	}

	public class SimpleFilterItem
	{
		public string Label { get; set; }
		public int Id { get; set; }
	}

	public SimpleFilter SchemeToFilter( string shortURI )
	{
		var scheme = Factories.ConceptSchemeManager.GetbyShortUri( shortURI ) ?? new ConceptScheme();

		return new SimpleFilter()
		{
			Name = shortURI,
			Id = scheme.Id,
			Items = scheme.Concepts.Select( m =>
			{
				return new SimpleFilterItem()
				{
					Label = string.Join( " - ", new List<string>() { m.CodedNotation, m.Name }.Where( n => !string.IsNullOrWhiteSpace( n ) ).ToList() ),
					Id = m.Id
				};
			} ).ToList()
		};
	}
}

<script type="text/javascript">
	var Search = {
		UI: {},
		Columns: [
			{ Label: "Rating", ResultMap: "Rating_CodedNotation", SortOrder: "Ratings", Category: "overall", CssClass: "rating" },
			{ Label: "Rank", ResultMap: "PayGradeType_Notation", SortOrder: "Rank", Category: "overall", CssClass: "payGrade" },
			{ Label: "Level (A/J/M)", ResultMap: "Level_Name", SortOrder: "Level", Category: "overall", CssClass: "level" },
			{ Label: "Billet Title", ResultMap: "BilletTitle_Name", SortOrder: "BilletTitles", Category: "overall", CssClass: "billetTitle" },
			{ Label: "Functional Area", ResultMap: "WorkRole_Name", SortOrder: "FunctionalArea", Category: "ratingTask", CssClass: "workRole" },
			{ Label: "Source", ResultMap: "ReferenceResource_Name", SortOrder: "ReferenceResource", Category: "ratingTask", CssClass: "source" },
			{ Label: "Date of Source", ResultMap: "ReferenceResource_PublicationDate", SortOrder: "SourceDate", Category: "ratingTask", CssClass: "sourceDate" },
			{ Label: "Work Element Type", ResultMap: "Shared_ReferenceType", SortOrder: "WorkElementType", Category: "ratingTask", CssClass: "sourceType" },
			{ Label: "Work Element (Task)", ResultMap: "RatingTask_Description", SortOrder: "RatingTask", Category: "ratingTask", CssClass: "ratingTaskDescription" },
			{ Label: "Task Applicability", ResultMap: "RatingTask_ApplicabilityType_Label", SortOrder: "TaskApplicability", Category: "ratingTask", CssClass: "applicabilityType" },
			{ Label: "Formal Training Gap", ResultMap: "RatingTask_TrainingGapType_Label", SortOrder: "FormalTrainingGap", Category: "course", CssClass: "trainingGapType" },
			{ Label: "CIN", ResultMap: "Course_CodedNotation", SortOrder: "CIN", Category: "course", CssClass: "courseID" },
			{ Label: "Course Name", ResultMap: "Course_Name", SortOrder: "CourseName", Category: "course", CssClass: "courseName" },
			{ Label: "Course Type (A/C/G/F/T)", ResultMap: "Course_CourseType_Label", SortOrder: "CourseTypes", Category: "course", CssClass: "courseType" },
			{ Label: "Curriculum Control Authority (CCA)", ResultMap: "Course_CurriculumControlAuthority_Name", SortOrder: "CurriculumControlAuthority", Category: "course", CssClass: "cca" },
			{ Label: "Life-Cycle Control Document", ResultMap: "Course_HasReferenceResource_Name", SortOrder: "LifeCycleControlDocument", Category: "course", CssClass: "lccd" },
			{ Label: "CTTL/PPP/TCCD Statement", ResultMap: "TrainingTask_Description", SortOrder: "TrainingTask", Category: "course", CssClass: "trainingTaskDescription" },
			{ Label: "Course Assessment Approach", ResultMap: "Course_AssessmentMethodType_Label", SortOrder: "AssessmentMethodTypes", Category: "course", CssClass: "assessmentMethodType" }
		],
		Prefilled: {
			Rating: @Html.Raw(JsonConvert.SerializeObject(ratingFilter, Formatting.None)),
			BilletTitle: @Html.Raw(JsonConvert.SerializeObject( billetFilter, Formatting.None)),
			Organization: @Html.Raw(JsonConvert.SerializeObject( ccaFilter, Formatting.None)),
			PayGradeType: @Html.Raw(JsonConvert.SerializeObject(payGradeTypeFilter, Formatting.None)),
			FunctionalArea: @Html.Raw(JsonConvert.SerializeObject( functionalAreaFilter, Formatting.None)),
			TrainingGapType: @Html.Raw(JsonConvert.SerializeObject(trainingGapTypeFilter, Formatting.None)),
			ApplicabilityType: @Html.Raw(JsonConvert.SerializeObject(applicabilityTypeFilter, Formatting.None)),
			ReferenceType: @Html.Raw(JsonConvert.SerializeObject(referenceTypeFilter, Formatting.None)),
			CourseType: @Html.Raw(JsonConvert.SerializeObject(courseTypeFilter, Formatting.None)),
			AssessmentMethodType: @Html.Raw(JsonConvert.SerializeObject(assessmentMethodTypeFilter, Formatting.None))
		},
		SortOrders: [],
		PageNumber: 1,
		PageSize: 250,
		Filters: []
	};
	//

	$(document).ready(function () {
		setupSearchUI();
		setupSearchResultsTable();
		setupSearchHeader();
		setupFilters();
	});
	//

	function setupSearchUI() {
		Search.UI.StyleBox = $(".searchTableStyles");
		Search.UI.FiltersBox = $(".filtersBox");
		Search.UI.SearchResultsBox = $(".searchResults");
		Search.UI.SearchStatusBox = $(".searchStatus");
		Search.UI.SearchSpinner = $(".searchSpinner");
		Search.UI.NavbarScrollThreshhold = $(".navbar-fixed-top").outerHeight();
		Search.UI.SearchResultsTable = $(".searchResultsTable tbody");
		Search.UI.ExportButton = $("[data-action='export']");
		Search.UI.ExportSpinner = $(".exportSpinner");
		Search.UI.FullScreenViewButton = $("[data-action='fullScreenView']");
		Search.UI.NormalViewButton = $("[data-action='normalView']");
		Search.UI.PageSelector = $(".pageSelector");
		Search.UI.ResetAllFiltersButton = $("[data-action='resetFilters']");
		Search.UI.SearchSpinner.hide();
		Search.UI.ExportSpinner.hide();
	}
	//

	function setupSearchResultsTable() {
		var headerRow = $("<tr class=\"header\"></tr>").appendTo(Search.UI.SearchResultsTable);
		Search.Columns.forEach((Column) => {
			headerRow.append("<th class=\"" + Column.Category + " " + Column.CssClass + "\">" + Column.Label + "</th>");
		});
		Search.UI.SearchResultsTableResetContent = Search.UI.SearchResultsTable.html();
	}
	//

	function setupSearchHeader() {
		Search.UI.ExportButton.on("click", () => {
			exportResults();
		});

		Search.UI.FullScreenViewButton.on("click", () => {
			Search.UI.SearchResultsBox.addClass("fullScreen");
			Search.UI.FullScreenViewButton.hide();
			Search.UI.NormalViewButton.show();
		});

		Search.UI.NormalViewButton.on("click", () => {
			Search.UI.SearchResultsBox.removeClass("fullScreen");
			Search.UI.FullScreenViewButton.show();
			Search.UI.NormalViewButton.hide();
		});

		Search.UI.ResetAllFiltersButton.on("click", () => {
			if (confirm("Really reset all search filters?")) {
				Search.Filters.forEach(Filter => {
					Filter.reset();
				});
				doSearch();
			}
		});

		Search.UI.NormalViewButton.hide();

		Search.UI.PageSelector.on("change", () => {
			Search.PageNumber = parseInt(Search.UI.PageSelector.val() || "1");
			doSearch(true);
		});
	}
	//

	function setupFilters() {
		//Show/hide columns
		var columnSelectorBox = Search.UI.FiltersBox.find(".columnSelector");
		var ColumnFilter = createFilter_CheckBox("Column", 0, columnSelectorBox, "Show/Hide Columns", Search.Columns, (Filter, Changed) => {
			Search.UI.StyleBox.html("");
			Filter.Items.forEach((Item, index) => {
				if (Item.CheckBox.prop("checked") == false) {
					Search.UI.StyleBox.append(".searchResultsTable th:nth-child(" + (index + 1) + ") { display: none; }");
					Search.UI.StyleBox.append(".searchResultsTable td:nth-child(" + (index + 1) + ") { display: none; }");
				}
			})
		}, true);
		ColumnFilter.reset = function () { ColumnFilter.Items.forEach(Item => { Item.CheckBox.prop("checked", true).trigger("change"); }); };
		ColumnFilter.reset();

		//Text Filters
		var textFilterBox = Search.UI.FiltersBox.find(".textFilters");
		createFilter_Text("search:RatingTaskKeyword", 0, textFilterBox, "Rating Task Keywords");
		createFilter_Text("search:TrainingTaskKeyword", 0, textFilterBox, "Training Task Keywords");
		/*createFilter_Text("search:BilletTitleKeyword", 0, textFilterBox, "Billet Title Keywords");*/
		createFilter_Autofill("navy:Rating", 0, textFilterBox, "Rating", (Filter, text) => {
			return findSimpleFilterItem(Search.Prefilled.Rating.Items, Filter.Items, text);
		});
		createFilter_Autofill("navy:Job", 0, textFilterBox, "BilletTitle", (Filter, text) => {
			return findSimpleFilterItem(Search.Prefilled.BilletTitle.Items, Filter.Items, text);
		});
		createFilter_Autofill("navy:WorkRole", 0, textFilterBox, "Functional Area", (Filter, text) => {
			return findSimpleFilterItem(Search.Prefilled.FunctionalArea.Items, Filter.Items, text);
		});
		createFilter_Autofill("navy:Organization", 0, textFilterBox, "CCA", (Filter, text) => {
			return findSimpleFilterItem(Search.Prefilled.Organization.Items, Filter.Items, text);
		});
		Search.SortOrders = Search.Columns.map(column => {
			return { Label: column.Label, Column: column.SortOrder, Ascending: true };
		}).concat(Search.Columns.map(column => {
			return { Label: column.Label + " (Reverse)", Column: column.SortOrder, Ascending: false };
		}));
		createFilter_Autofill("SortOrder", 0, textFilterBox, "Sort Order", (Filter, text) => {
			return findSimpleFilterItem(Search.SortOrders, Filter.Items, text);
		}, (Filter) => {
			return Filter.Items.map(m => { return { Column: m.Column, Ascending: m.Ascending }; });
		});

		//Checkbox Filters
		var checkBoxFilterBox = Search.UI.FiltersBox.find(".checkBoxFilters");
		createFilter_CheckBox(Search.Prefilled.PayGradeType.Name, Search.Prefilled.PayGradeType.Id, checkBoxFilterBox, "Pay Grade Type", Search.Prefilled.PayGradeType.Items);
		createFilter_CheckBox(Search.Prefilled.ReferenceType.Name, Search.Prefilled.ReferenceType.Id, checkBoxFilterBox, "Source Type", Search.Prefilled.ReferenceType.Items);
		createFilter_CheckBox(Search.Prefilled.ApplicabilityType.Name, Search.Prefilled.ApplicabilityType.Id, checkBoxFilterBox, "Applicability Type", Search.Prefilled.ApplicabilityType.Items);
		createFilter_CheckBox(Search.Prefilled.TrainingGapType.Name, Search.Prefilled.TrainingGapType.Id, checkBoxFilterBox, "Training Gap Type", Search.Prefilled.TrainingGapType.Items);
		createFilter_CheckBox(Search.Prefilled.CourseType.Name, Search.Prefilled.CourseType.Id, checkBoxFilterBox, "Course Type", Search.Prefilled.CourseType.Items);
		createFilter_CheckBox(Search.Prefilled.AssessmentMethodType.Name, Search.Prefilled.AssessmentMethodType.Id, checkBoxFilterBox, "Assessment Method Type", Search.Prefilled.AssessmentMethodType.Items);
	}
	//

	function createFilter(name, id, container, label, cssClass, init) {
		var Filter = {
			Name: name,
			Id: id,
			Box: $("<div class=\"filter " + cssClass + "\"></div>").appendTo(container),
			Label: label,
			Timeout: 0,
			...(init || {})
		};

		Filter.LabelBox = $("<div class=\"filterLabel\">" + Filter.Label + "</div>").appendTo(Filter.Box);

		Search.Filters.push(Filter);
		return Filter;
	}
	//

	function createFilter_Text(name, id, container, label) {
		var Filter = createFilter(name, id, container, label, "text");
		Filter.Input = $("<input type=\"text\" />").appendTo(Filter.Box);

		Filter.Input.on("keyup change", () => {
			handleTimeout(Filter, 800, doSearch);
		});

		Filter.readValue = function () {
			return { Text: Filter.Input.val().trim() };
		};

		Filter.reset = function () {
			Filter.Input.val("");
		}

		return Filter;
	}
	//

	function createFilter_CheckBox(name, id, container, label, Items, onChange, isClientSideOnly) {
		var Filter = createFilter(name, id, container, label, "checkBox", { Items: Items, onChange: onChange });

		Filter.Items.forEach((Item) => {
			var wrapper = $("<label></label>").appendTo(Filter.Box);
			Item.CheckBox = $("<input type=\"checkbox\" />").appendTo(wrapper);
			var itemLabel = $("<span>" + Item.Label + "</span>").appendTo(wrapper);
			Item.CheckBox.on("change", () => {
				onChange?.(Filter, Item);
				!isClientSideOnly && handleTimeout(Filter, 500, doSearch);
			});
		});

		Filter.ToggleAllButton = $("<button class=\"toggleAll\">Toggle All</button>").appendTo(Filter.LabelBox);
		Filter.ToggleAllButton.on("click", () => {
			var allChecked = Filter.Items.every(Item => { return Item.CheckBox.prop("checked"); });
			Filter.Items.forEach(Item => { Item.CheckBox.prop("checked", !allChecked).trigger("change"); });
		});

		Filter.readValue = function () {
			return { ItemIds: Filter.Items.filter(Item => Item.CheckBox.prop("checked")).map(Item => Item.Id) };
		};

		Filter.reset = function () {
			Filter.Items.forEach((Item) => { Item.CheckBox.prop("checked", false); });
		}

		return Filter;
	}
	//

	function createFilter_Autofill(name, id, container, label, findItems, customReadValue) {
		var Filter = createFilter(name, id, container, label, "autofill", { Items: [], findItems: findItems });

		Filter.Input = $("<input type=\"text\" placeholder=\"Search...\" />").appendTo(Filter.Box);
		Filter.OptionsBox = $("<div class=\"filterOptions\"></div>").appendTo(Filter.Box);
		Filter.ItemsBox = $("<div class=\"filterItems\"></div>").appendTo(Filter.Box);

		Filter.Input.on("focus keyup", (e) => {
			Filter.OptionsBox.html("");
			Filter.OptionsBox.addClass("visible");
			var options = Filter.findItems(Filter, Filter.Input.val().trim());
			options.forEach(option => {
				var button = $("<button>" + option.Label + "</button>").appendTo(Filter.OptionsBox);
				button.on("click", function () {
					!Filter.Items.includes(option) && Filter.Items.push(option);
					Filter.Input.val("");
					Filter.OptionsBox.removeClass("visible");
					Filter.renderItems();
					handleTimeout(Filter, 500, doSearch);
				});
			});
		});

		Filter.Input.on("blur", () => {
			handleTimeout(Filter, 100, () => {
				if (!Filter.OptionsBox.is(":hover") && !Filter.OptionsBox.find("button").is(":focus")) {
					Filter.OptionsBox.removeClass("visible");
				}
			});
		});

		Filter.renderItems = function () {
			Filter.ItemsBox.html("");
			Filter.Items.forEach(Item => {
				var itemBox = $("<div class=\"filterItem\"></div>").appendTo(Filter.ItemsBox);
				itemBox.append("<span>" + Item.Label + "</span>");
				var removeButton = $("<button class=\"removeButton\">X</button>").appendTo(itemBox);
				removeButton.on("click", function () {
					Filter.Items = Filter.Items.filter(m => m != Item);
					Filter.renderItems();
					handleTimeout(Filter, 500, doSearch);
				});
			});
		};

		Filter.readValue = function () {
			return customReadValue?.(Filter) || { ItemIds: Filter.Items.map(Item => Item.Id) };
		};

		Filter.reset = function () {
			Filter.Input.val("");
			Filter.Items = [];
			Filter.renderItems();
		};

		return Filter;
	}
	//

	function findSimpleFilterItem(searchIn, notIn, text, limit) {
		text = (text || "").toLowerCase();
		return searchIn.filter(Item => {
			return !notIn.includes(Item) && Item.Label.toLowerCase().includes(text)
		}).sort((a, b) => {
			return a.Label.toLowerCase().indexOf(text) < b.Label.toLowerCase().indexOf(text) ? -1 : 1
		}).slice(0, limit || 10);
	}
	//

	function handleTimeout(Filter, delay, onTimeout) {
		clearTimeout(Filter.Timeout);
		Filter.Timeout = setTimeout(() => {
			onTimeout?.();
		}, delay);
	}
	//

	function doSearch(asPaging, getAllHandler) {
		Search.PageNumber = asPaging ? Search.PageNumber : 1;

		var currentFilters = Search.Filters
			.filter(Filter => Filter.Name != "Column")
			.filter(Filter => Filter.Name != "SortOrder")
			.map(Filter => {
				return {
					Name: Filter.Name,
					Id: Filter.Id,
                    ...Filter.readValue()
				};
			})
			.filter(Filter => { return (Filter.Text && Filter.Text.length > 0) || (Filter.ItemIds && Filter.ItemIds.length > 0) });

		var query = {
			Filters: currentFilters,
			SortOrder: Search.Filters.filter(m => m.Name == "SortOrder")[0].readValue(),
			PageSize: getAllHandler ? -1 : 250,
			PageNumber: getAllHandler ? 1 : Search.PageNumber
		};

		console.log("Sending Query...", query);
		setSearchStatus("Searching...", true);
		fetch("@Url.Content("~/search/mainsearch")", {
			method: "POST",
			headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
			body: JSON.stringify(query)
		}).then((response) => {
			console.log("Received response", response);
			return response.text();
		}).then((text) => {
			var resultsData = JSON.parse(text);
			console.log("Parsed JSON", Search.Results);
			if (getAllHandler) {
				setSearchStatus("Exported " + (Search.Results.Data.TotalResults || 0) + " Rows");
				getAllHandler(resultsData);
			}
			else {
				Search.Results = resultsData
				renderResults();
			}
		});
	}
	//

	function renderResults() {
		console.log("Rendering results", Search.Results);
		if (Search.Results.Valid) {
			setSearchStatus("Found " + (Search.Results.Data.TotalResults || 0) + " Rows");

			//Update paging
			var totalPages = Math.ceil((Search.Results.Data.TotalResults || 1) / Search.PageSize);
			Search.UI.PageSelector.html("");
			for (var i = 1; i <= totalPages; i++) {
				Search.UI.PageSelector.append("<option value=\"" + i + "\"" + (i == Search.PageNumber ? " selected=\"selected\"" : "") + ">Page " + i + "</option>");
			}

			//Render results
			Search.UI.SearchResultsTable.html(Search.UI.SearchResultsTableResetContent);
			Search.Results.Data.Results.forEach(Result => {
				var resultBox = $("<tr></tr>").appendTo(Search.UI.SearchResultsTable);
				setTimeout(() => {
					resultBox.html("<td>" + Search.Columns.map(column => { return Result.Data[column.ResultMap] || Result.Extra[column.ResultMap] || "" }).join("</td><td>") + "</td>");
				}, 0)
			});
		}
		else {
			setSearchStatus("Error(s): " + Search.Results.Status.join(" | "));
		}
	}
	//

	function setSearchStatus(message, showSpinner) {
		Search.UI.SearchStatusBox.html(message);
		showSpinner ? Search.UI.SearchSpinner.show() : Search.UI.SearchSpinner.hide();
	}
	//

	async function exportResults() {
		Search.UI.ExportButton.hide();
		Search.UI.ExportSpinner.show();

		//Be sure to get all of the results first!
		doSearch(true, (allResults) => {
			if (allResults.Valid) {
				saveResultsAsCSV(allResults.Data.Results)
			}
			else {
				alert("Error: " + allResults.Status.join("\n"));
			}

			Search.UI.ExportButton.show();
			Search.UI.ExportSpinner.hide();
		});
	}
	//

	function saveResultsAsCSV(results) {
		//var columns = Search.Filters.filter(m => m.Name == "Column")[0].Items.filter(m => m.CheckBox.prop("checked") == true).map(m => { return m.Label });
		//var rows = [columns];
		//results.forEach(result => {
		//	rows.push(columns.map(m => {
		//		var text = (result.Data[m] || result.Extra[m] || "").replace(/"/g, '""').replace(/\r\n/g, "\n");
		//		return text.includes("\n") || text.includes(",") ? '"' + text + '"' : text;
		//	}));
		//});
		var columns = Search.Filters.filter(m => m.Name == "Column")[0].Items.filter(m => m.CheckBox.prop("checked") == true);
		var rows = [columns.map(m => m.Label)];
		results.forEach(result => {
			rows.push(columns.map(m => {
				var text = (result.Data[m.ResultMap] || result.Extra[m.ResultMap] || "").replace(/"/g, '""').replace(/\r\n/g, "\n");
				var text2 = (result.Data[m.Label] || result.Extra[m.ResultMap] || "").replace(/"/g, '""').replace(/\r\n/g, "\n");
				var textReturn = text.includes("\n") || text.includes(",") ? '"' + text + '"' : text;
				return textReturn;
			}));
		});

		var csv = rows.map(m => m.join(",")).join("\n");
		var file = new Blob([csv], { type: "text/csv" });
		var url = window.URL.createObjectURL(file);
		var link = $("<a href=\"" + url + "\" download=\"Task Data Export.csv\"></a>").appendTo(document.body);
		link[0].click();
		window.URL.revokeObjectURL(url);
		link.remove();
	}
	//
</script>
<style type="text/css">
	html body .container { width: 98vw; }
	.spinner { display: inline-block; box-shadow: inset 4px 0 0 5px; border-radius: 50%; height: 20px; width: 20px; animation: spin 1s linear infinite; }
	@@keyframes spin {
		100% { transform: rotate(360deg); }
	}

	.searchBox { }
		.searchBox .searchHeader { }
			.searchBox .searchHeader .filtersBox { display: flex; }
				.searchBox .searchHeader .filtersBox .topSection { flex: 0 0 650px; display: flex; }
				.searchBox .searchHeader .filtersBox .filter { padding: 5px; }
					.searchBox .searchHeader .filtersBox .filter .filterLabel { font-weight: bold; border-bottom: 1px solid #CCC; }
				.searchBox .searchHeader .filtersBox .columnSelector { flex: 1 1 50%; }
				.searchBox .searchHeader .filtersBox .textFilters { flex: 1 1 50%; }
				.searchBox .searchHeader .filtersBox .checkBoxFilters { flex: 1 1 auto; display: grid; grid-template-columns: repeat(auto-fill, minmax(325px, 1fr)); }

				.searchBox .searchHeader .filtersBox .filter.text { }
					.searchBox .searchHeader .filtersBox .filter.text input { display: block; width: 100%; max-width: none; }

				.searchBox .searchHeader .filtersBox .filter.checkBox { }
					.searchBox .searchHeader .filtersBox .filter.checkBox label { display: flex; padding: 2.5px 5px; width: 100%; font-weight: normal; margin-bottom: 0; }
						.searchBox .searchHeader .filtersBox .filter.checkBox label:hover, .searchBox .searchHeader .filtersBox .filter.checkBox label:focus { cursor: pointer; background-color: rgba(0,0,0,0.05); }
						.searchBox .searchHeader .filtersBox .filter.checkBox label input { margin-right: 5px; }
					.searchBox .searchHeader .filtersBox .filter.checkBox .filterLabel { display: flex; align-items: baseline; }
						.searchBox .searchHeader .filtersBox .filter.checkBox .filterLabel .toggleAll { font-weight: normal; margin-left: auto; }

				.searchBox .searchHeader .filtersBox .filter.autofill { position: relative; }
					.searchBox .searchHeader .filtersBox .filter.autofill input { display: block; width: 100%; max-width: none; }
					.searchBox .searchHeader .filtersBox .filter.autofill .filterOptions { position: absolute; z-index: 10; background-color: #FFF; border: 1px solid #CCC; width: 100%; }
						.searchBox .searchHeader .filtersBox .filter.autofill .filterOptions:not(.visible) { display: none; }
						.searchBox .searchHeader .filtersBox .filter.autofill .filterOptions button { display: block; width: 100%; padding: 5px 10px; background-color: #FFF; border: none; }
							.searchBox .searchHeader .filtersBox .filter.autofill .filterOptions button:hover, .searchBox .searchHeader .filtersBox .filter.autofill .filterOptions button:focus { background-color: rgba(0,0,0,0.05); }
					.searchBox .searchHeader .filtersBox .filter.autofill .filterItems { }
						.searchBox .searchHeader .filtersBox .filter.autofill .filterItems .filterItem { display: flex; width: 100%; padding: 2.5px 5px; }
							.searchBox .searchHeader .filtersBox .filter.autofill .filterItems .filterItem:not(:last-child) { border-bottom: 1px dashed #CCC; }
							.searchBox .searchHeader .filtersBox .filter.autofill .filterItems .filterItem span { flex: 1 1 auto; }
							.searchBox .searchHeader .filtersBox .filter.autofill .filterItems .filterItem button { margin-left: 10px; background-color: #F55; border: none; color: #FFF; font-weight: bold; height: 22px; width: 22px; }
								.searchBox .searchHeader .filtersBox .filter.autofill .filterItems .filterItem button:hover, .searchBox .searchHeader .filtersBox .filter.autofill .filterItems .filterItem button:focus { background-color: #F77; }

	.searchTableTopBar { display: flex; flex-wrap: wrap; align-items: center; padding: 5px 10px; background-color: #EEE; }
		.searchTableTopBar > *:not(:last-child) { margin-right: 10px; }
		.searchTableTopBar .searchStatus { font-weight: bold; }
		.searchTableTopBar .searchSpinner { }
		.searchTableTopBar .searchTopBarDivider { margin-left: auto; }
		.searchTableTopBar .pageSelector { height: 26px; }

	.searchResults { background-color: #FFF; }
		.searchResults.fullScreen { display: flex; flex-direction: column; position: fixed; z-index: 5000; top: 0; left: 0; width: 100vw; height: 100vh; }
			.searchResults.fullScreen .searchResultsTableWrapper { max-height: none; }
		.searchResults .searchResultsTableWrapper { flex: 1 1 auto; max-width: 100%; max-height: 90vh; overflow: scroll; }
			.searchResults .searchResultsTableWrapper .searchResultsTable { border-collapse: separate; border-spacing: 0; }
				.searchResults .searchResultsTableWrapper .searchResultsTable th { position: sticky; top: 0px; border: 1px solid #777; border-width: 0 0 0 1px; }
				.searchResults .searchResultsTableWrapper .searchResultsTable td { padding: 5px 10px; border: 1px solid #CCC; border-width: 1px 0 0 1px; font-size: 12px; }

	@@media(max-width: 1300px) {
		.searchBox .searchHeader .filtersBox { display: block; }
	}
	@@media(max-width: 650px) {
		.searchBox .searchHeader .filtersBox .topSection { display: block; }
	}

	/* Table Column widths */
	/* Have to hard-set these so that the headers stay synched up with the results */
	table th { padding: 5px 10px; border: 1px solid #777; border-width: 0 1px; }
	table td { padding: 5px 10px; border: 1px solid #CCC; }
	table th.overall { background-color: #CCF; }
	table th.ratingTask { background-color: #FC5; }
	table th.course { background-color: #FEA; }
	table .rating { min-width: 100px; max-width: 100px; }
	table .payGrade { min-width: 100px; max-width: 100px; }
	table .level { min-width: 100px; max-width: 100px; }
	table .billetTitle { min-width: 200px; max-width: 200px; }
	table .workRole { min-width: 200px; max-width: 200px; }
	table .source { min-width: 200px; max-width: 200px; }
	table .sourceDate { min-width: 100px; max-width: 100px; }
	table .sourceType { min-width: 150px; max-width: 150px; }
	table .ratingTaskDescription { min-width: 300px; max-width: 300px; }
	table .applicabilityType { min-width: 150px; max-width: 150px; }
	table .trainingGapType { min-width: 100px; max-width: 100px; }
	table .trainingTaskDescription { min-width: 300px; max-width: 300px; }
	table .courseID { min-width: 100px; max-width: 100px; }
	table .courseName { min-width: 150px; max-width: 150px; }
	table .courseType { min-width: 100px; max-width: 100px; }
	table .cca { min-width: 100px; max-width: 100px; }
	table .lccd { min-width: 100px; max-width: 100px; }
	table .assessmentMethodType { min-width: 200px; max-width: 200px; }
</style>
<style class="searchTableStyles"></style>

<h2>Search</h2>
<div class="searchBox">
	<div class="searchHeader">
		<div class="filtersBox">
			<div class="topSection">
				<div class="columnSelector"></div>
				<div class="textFilters"></div>
			</div>
			<div class="checkBoxFilters"></div>
		</div>
	</div>
	<div class="searchResults">
		<div class="searchTableTopBar">
			<div class="searchStatus"></div>
			<div class="searchSpinner spinner"></div>
			<div class="searchTopBarDivider"></div>
			<div class="exportSpinner spinner"></div>
			<select class="pageSelector">
				<option value="1">Page 1</option>
			</select>
			<button data-action="export">Export All Results</button>
			<button data-action="fullScreenView">Full Screen View</button>
			<button data-action="normalView">Normal View</button>
			<button data-action="resetFilters">Reset All Filters</button>
		</div>
		<div class="searchResultsTableWrapper">
			<table class="searchResultsTable">
				<tbody></tbody>
			</table>
		</div>
	</div>
</div>