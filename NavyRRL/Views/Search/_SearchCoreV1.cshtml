<script type="text/javascript">
	var Searches = [];
	var ResourceCache = [];
	//

	function createSearch (searchType, searchURL, statusBox, spinner, resultsBox, pagingBox, pageSize, delay) {
		var Search = {
			SearchType: searchType,
			SearchURL: searchURL,
			PageSize: pageSize || 20,
			PageNumber: 1,
			Delay: delay || 800,
			StatusBox: statusBox || $("<div></div>"),
			ResultsBox: resultsBox || $("<div></div>"),
			PagingBox: pagingBox || $("<div></div>"),
			Spinner: spinner || $("<div></div>"),
			Timeout: 0,
			Query: {},
			Results: [],
			RelatedResources: [], //Not to be confused with ResourceCache, as this one gets reset every time a result comes back
			TotalResults: 0,
			TotalPages: 0,
			PagingButtonThreshold: 5,
			AppendResults: false,
			Busy: false
		};
		//

		Search.delayThenSearch = function (resetPaging, clearRequestQueue) {
			clearTimeout(Search.Timeout);
			Search.Timeout = setTimeout(() => {
				Search.doSearch(resetPaging, clearRequestQueue);
			}, Search.Delay);
		};
		//

		Search.prepareToSearch = function (resetPaging, clearRequestQueue) {
			Search.PageNumber = resetPaging ? 1 : Search.PageNumber;
			clearRequestQueue && AJAX.cancelCurrentRequests();
			Search.Query = {
				SearchType: Search.SearchType,
				Filters: Search.getFilters(),
				Skip: (Search.PageNumber - 1) * Search.PageSize,
				Take: Search.PageSize,
				SortOrder: Search.getSortOrder()
			};
			Search.customizeQuery();
		}
		//

		Search.doSearch = function (resetPaging, clearRequestQueue) {
			Search.prepareToSearch(resetPaging, clearRequestQueue);
			Search.setStatus("Searching...", true);
			Search.Busy = true;
			Search.doPOSTRequest(Search.SearchURL, Search.Query, Search.handleResponse, Search.handleError);
		};
		//

		Search.getFilters = function () {
			//Intended for use/overriding by other code
		};
		//

		Search.getSortOrder = function () {
			//Intended for use/overriding by other code
		};
		//

		Search.customizeQuery = function () {
			//Intended for use/overriding by other code
		};
		//

		Search.beforeRenderAll = function () {
			//Intended for use/overriding by other code
		};
		//

		Search.afterRenderAll = function () {
			//Intended for use/overriding by other code
		};
		//

		Search.onPageChange = function () {
			//Intended for use/overriding by other code
		}
		//

		Search.renderTotalResultsStatus = function () {
			Search.setStatus("Found " + Search.TotalResults + " Results"); //Can be overridden with a custom status message
		}
		//

		Search.getAndRenderReferenceList = function (urls, renderMethod) {
			urls?.forEach(url => {
				Search.getResource(url, renderMethod, error => {
					console.log("Error loading resource: " + url, error);
				});
			});
		}
		//

		Search.addResourceToCache = function (url, data) {
			AJAX.appendToCache(url, data);
		}
		//

		Search.getRelatedResourceOrLookup = function(rowID, url, handleSuccess, handleError){
			setTimeout(function () {
				var match = Search.RelatedResources.find(m => m.RowId == rowID);
				if (match) {
					handleSuccess?.(match);
				}
				else if (url) {
					Search.getResource(url, handleSuccess, handleError);
				}
				else {
					handleError?.({Message: "Resource not found in Related Resources list."});
				}
			}, 0);
		}
		//

		Search.getResource = function (url, handleSuccess, handleError) {
			return AJAX.getResource(url, handleSuccess, handleError);
		}
		//

		Search.doGETRequest = function (url, handleSuccess, handleError) {
			return AJAX.doGETRequest(url, handleSuccess, handleError);
		}
		//

		Search.doPOSTRequest = function (url, data, handleSuccess, handleError) {
			return AJAX.doPOSTRequest(url, data, handleSuccess, handleError);
		};
		//

		Search.doAJAX = function (url, handleSuccess, handleError, params) {
			return AJAX.doFetch(url, handleSuccess, handleError, params);
		};
		//

		Search.handleResponse = function (response) {
			Search.Busy = false;
			if (response.Valid) {
				Search.Results = response.Data.Results || [];
				Search.TotalResults = response.Data.TotalResults || 0;
				Search.RelatedResources = response.Data.RelatedResources || [];
				Search.TotalPages = Math.ceil(Search.TotalResults / Search.PageSize);
				//Search.setStatus("Found " + Search.TotalResults + " Results");
				Search.renderTotalResultsStatus();
				Search.beforeRenderAll();
				Search.renderResults();
				Search.renderPaging();
				Search.afterRenderAll();
			}
			else {
				Search.setStatus("Error: " + response.Status.join(", "));
			}
		};
		//

		Search.handleError = function (error) {
			Search.Busy = false;
			console.log("Error", error);
			Search.setStatus(error?.Message || "Error performing search. Check console for details.");
		};
		//

		Search.renderResults = function () {
			if (!Search.AppendResults) {
				Search.ResultsBox.html("");
			}
			Search.Results.forEach((Result, index) => {
				Search.renderResult(Result, Search.ResultsBox, index);
			});
		}
		//

		Search.renderResult = function (Result, container) {
			container.append("<div class=\"searchResult\">" + (Result.CodedNotation || Result.Name || Result.Description) + "</div>");
		}
		//

		Search.renderPaging = function () {
			Search.PagingBox.html("Page ");

			for (var i = 1; i <= Search.TotalPages; i++) {
				if (i == 1 || i == Search.TotalPages || ((i - Search.PagingButtonThreshold) <= Search.PageNumber && Search.PageNumber <= (i + Search.PagingButtonThreshold))) {
					createPagingButton(i);
				}
			}

			function createPagingButton(page) {
				var button = $("<button class=\"pagingButton " + (Search.PageNumber == i ? "currentPage greenButton" : "") + "\" " + (Search.PageNumber == i ? "disabled=\"disabled\"" : "") + ">" + i + "</button>").appendTo(Search.PagingBox);
				button.on("click", function () {
					Search.PageNumber = page;
					Search.doSearch(false, true);
					Search.onPageChange();
				});
			}
		}
		//

		Search.setStatus = function (message, showSpinner) {
			Search.StatusBox.html(message);
			showSpinner ? Search.Spinner.show() : Search.Spinner.hide();
		}
		//

		//Initialize and track
		Search.Spinner.hide();
		Searches.push(Search);

		//Return
		return Search;
	}
	//

</script>
<style type="text/css">
	.spinner { display: inline-block; box-shadow: inset 4px 0 0 5px; border-radius: 50%; height: 20px; width: 20px; animation: spin 1s linear infinite; }
	@@keyframes spin { 100% { transform: rotate(360deg); } }

	.pagingButton { min-width: 30px; }
</style>