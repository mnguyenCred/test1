<script type="text/javascript">
	//Namespace
	var AJAX = {
		RequestQueueMaxLength: 25,
		RequestQueue: [],
		Cache: []
	};

	//Do a generic POST Request
	AJAX.doPOSTRequest = function (url, body, onSuccess, onError) {
		AJAX.doFetch(url, onSuccess, onError, {
			method: "POST",
			headers: { "Accept": "application/json", "Content-Type": "application/json" },
			body: JSON.stringify(body || {})
		});
	}
	//

	//Do a generic GET Request
	AJAX.doGETRequest = function (url, onSuccess, onError) {
		AJAX.doFetch(url, onSuccess, onError);
	}
	//

	//Do a generic Fetch and process the results
	AJAX.doFetch = function (url, onSuccess, onError, options) {
		//Enable queueing requests so as not to overload the server
		var Request = {};
		Request.Status = "waiting";
		Request.run = function () {
			fetch(url, options).then(response => {
				response.text().then(value => {
					if (response.ok) {
						try {
							onSuccess(JSON.parse(value));
						}
						catch (e) {
							onError?.(buildError("JSON Parse Error", "Error parsing JSON", value, onSuccess, e));
						}
					}
					else {
						onError?.(buildError("Fetch Error", "Error Code " + response.status + (response.statusText ? ": " + response.statusText : ""), value, onSuccess, null));
					}
					processRequestQueue(Request);
				});
			}).catch(networkError => {
				onError?.(buildError("Network Error", "Failed to call resource: " + url, null, onSuccess, networkError));
				processRequestQueue();
			});
		};
		AJAX.RequestQueue.push(Request);
		processRequestQueue();

		//Helper function
		function buildError(type, message, rawData, successFunction, jsError) {
			return { Type: type, Message: message, RawData: rawData, SuccessFunction: successFunction, JSError: jsError };
		}

		//Helper function
		function processRequestQueue(Request) {
			setTimeout(function () {
				if (Request) {
					AJAX.RequestQueue = AJAX.RequestQueue.filter(OtherRequest => OtherRequest != Request);
				}
				for (var i = 0; i < AJAX.RequestQueueMaxLength; i++) {
					if (AJAX.RequestQueue[i]?.Status == "waiting") {
						AJAX.RequestQueue[i].Status = "running";
						AJAX.RequestQueue[i].run();
					}
				}
			}, 0);
		}
	}
	//

	//Append the request (and handlers) for a resource to the cache. When the resource loads, run all of its handlers and then reset the handler lists. 
	AJAX.getResource = function (url, onSuccess, onError) {
		//Find the request if it already exists
		var Request = AJAX.Cache.find(item => item.URL == url);
		//If there's data for it already, run the success handler
		if (Request?.Data) {
			runHandler(Request.Data, onSuccess);
		}
		//If there's an error for it already, run the error handler
		else if (Request?.Error) {
			runHandler(Request.Error, onError);
		}
		//If there's a request, but no data and no error, then append the handlers (the request is still being retrieved)
		else if (Request) {
			Request.SuccessHandlers.push(onSuccess);
			Request.ErrorHandlers.push(onError);
		}
		//If there's no request at all, create/inject one and do the AJAX request. When the request finishes, run the handlers it has accumulated by that point, and clear them out.
		else {
			Request = AJAX.appendToCache(url);
			Request.SuccessHandlers.push(onSuccess);
			Request.ErrorHandlers.push(onError);
			AJAX.doGETRequest(url, response => {
				Request.Data = response.Data;
				processHandlers(Request, Request.Data, Request.SuccessHandlers);
			}, Error => {
				Request.Error = Error;
				processHandlers(Request, Request.Error, Request.ErrorHandlers);
			});
		}

		//Helper function to process handlers
		function processHandlers(Request, DataOrError, Handlers) {
			Handlers.forEach(handler => {
				handler?.(DataOrError);
			});
			Request.SuccessHandlers = [];
			Request.ErrorHandlers = [];
		}

		//Helper function to simulate the async nature of requests, so that they are consistently run asynchronously
		function runHandler(dataOrError, handler) {
			setTimeout(() => {
				handler?.(dataOrError);
			}, 0);
		}
	}
	//

	//Put a resource request into the cache, and add its data if the data is already loaded
	AJAX.appendToCache = function (url, data) {
		var Request = AJAX.Cache.find(item => item.URL == url);
		if (!Request) {
			Request = {
				URL: url,
				SuccessHandlers: [],
				ErrorHandlers: [],
				Data: data,
				Error: null
			};
			AJAX.Cache.push(Request);
		}

		return Request;
	}
	//
</script>
