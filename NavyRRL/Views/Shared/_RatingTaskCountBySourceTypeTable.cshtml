@using Models.Schema;
@using Models.DTO;
@using Models.Search;
@model List<SearchFilter>
@{ 
	var sourceTypes = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_ReferenceResourceCategory ).Concepts;
	var trainingGapTypes = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_TrainingGapCategory ).Concepts;
	var tasksBySource = new List<TaskCountBySource>();
	var filters = Model ?? new List<SearchFilter>();
	var gapConceptIDs = trainingGapTypes.Where( m => m.Name.ToLower() != "no" ).Select( m => m.Id ).ToList();
	var grandTotalTasks = Factories.RatingContextManager.Search( new SearchQuery() { Take = 0, SortOrder = new List<SortOrderItem>() { new SortOrderItem() { Column = "sortOrder:Unsorted" } } } ).ExtraData[ "RatingTaskCount" ].ToObject<int>();

	foreach ( var sourceType in sourceTypes )
	{
		var allTotal = 0;
		var gapTotal = 0;

		var countQuery = new SearchQuery() { Take = 0, SortOrder = new List<SortOrderItem>() { new SortOrderItem() { Column = "sortOrder:Unsorted" } }, Filters = new List<SearchFilter>().Concat( filters ).ToList() };
		countQuery.Filters.Add( new SearchFilter()
		{
			Name = "> RatingTaskId > RatingTask > ReferenceResourceTypeId > Concept",
			ItemIds = new List<int>() { sourceType.Id }
		} );
		var allResultSet = Factories.RatingContextManager.Search( countQuery );
		allTotal = allResultSet.ExtraData[ "RatingTaskCount" ].ToObject<int>();

		if ( allTotal > 0 )
		{
			countQuery.Filters.Add( new SearchFilter()
			{
				Name = "> FormalTrainingGapId > Concept",
				ItemIds = gapConceptIDs
			} );
			var gapResultSet = Factories.RatingContextManager.Search( countQuery );
			gapTotal = gapResultSet.ExtraData[ "RatingTaskCount" ].ToObject<int>();
		}

		tasksBySource.Add( new TaskCountBySource()
		{
			SourceID = sourceType.Id,
			SourceName = sourceType.Name,
			TotalTasks = allTotal,
			TasksWithGaps = gapTotal
		} );
	}

	var totalTasks = tasksBySource.Sum( m => m.TotalTasks );
	var totalTasksWithCoverage = tasksBySource.Sum( m => m.TasksWithTraining );
	var totalTasksWithGaps = tasksBySource.Sum( m => m.TasksWithGaps );
	var totalTrainingCoveragePercent = GetPercent( totalTasksWithCoverage, totalTasks );
	var totalTrainingGapsPercent = GetPercent( totalTasksWithGaps, totalTasks );
	var allTasksPercentOfGrandTotal = GetPercent( totalTasks, grandTotalTasks );
}
@functions {
	public class TaskCountBySource
	{
		public int SourceID { get; set; }
		public string SourceName { get; set; }
		public int TotalTasks { get; set; }
		public int TasksWithTraining { get { return TotalTasks - TasksWithGaps; } }
		public int TasksWithGaps { get; set; }
	}

	public string GetPercent( int numerator, int denominator, int decimalPlaces = 4, string returnIfZero = "0%" )
	{
		return denominator == 0 ? returnIfZero : ( Math.Round( ( double ) numerator / ( double ) denominator, decimalPlaces ) * 100d + "%" );
	}
}

<style type="text/css">
	.tasksBySource { width: 100%; }
	.tasksBySource thead th { padding: 2px 15px; text-align: right; width: 75px; }
	.tasksBySource thead th.name, .tasksBySource thead th.barChartHeader { text-align: left; max-width: none; }
	.tasksBySource thead th.name { width: 200px; }
	.tasksBySource thead th.barChartHeader { padding-left: 5px; width: 100px; }
	.tasksBySource tbody tr { border-top: 1px solid #CCC; }
	.tasksBySource tbody td { padding: 0 15px; }
	.tasksBySource tbody td:not(.name) { text-align: right; }
	.tasksBySource tbody tr.total { font-weight: bold; }
	.tasksBySource tbody .barChart { padding: 2px 5px; vertical-align: middle; }
	.tasksBySource tbody .barChart .barChartWrapper { background-color: #DDD; height: 18px; padding: 1px 2px; }
	.tasksBySource tbody .barChart .barChartWrapper .allTasks { background-color: #D83; height: 100%; }
	.tasksBySource tbody .barChart .barChartWrapper .coveredTasks { background-color: #0C3; height: 100%; }
</style>

<div class="section">
	<h3 class="sectionHeader">Rating Tasks by Source Type</h3>
	<table class="tasksBySource">
		<thead>
			<tr><th class="name">Source Type</th><th>Tasks</th><th>Gaps</th><th>Coverage %</th><th>Gaps %</th><th>% of All Tasks</th><th class="barChartHeader">Tasks and Coverage</th></tr>
		</thead>
		<tbody>
			@foreach ( var count in tasksBySource.OrderByDescending( m => m.TotalTasks ).ThenBy( m => m.TasksWithGaps ).ToList() )
			{
				var totalPercentageOfAll = GetPercent( count.TotalTasks, totalTasks );
				var coveredPercentageOfCount = GetPercent( count.TasksWithTraining, count.TotalTasks );
				var coveragePercentage = GetPercent( count.TasksWithTraining, count.TotalTasks, 4, "N/A" );
				var gapPercentage = GetPercent( count.TasksWithGaps, count.TotalTasks, 4, "N/A" );
				<tr>
					<td class="name"><a href="@Url.Content("~/Concept/Detail/" + count.SourceID)" target="_blank">@count.SourceName</a></td>
					<td>@count.TotalTasks</td>
					<td>@count.TasksWithGaps</td>
					<td>@coveragePercentage</td>
					<td>@gapPercentage</td>
					<td>@totalPercentageOfAll</td>
					<td class="barChart">
						<div class="barChartWrapper">
							<div class="allTasks" style="width:@totalPercentageOfAll">
								<div class="coveredTasks" style="width:@coveredPercentageOfCount"></div>
							</div>
						</div>
					</td>
				</tr>
			}
			<tr class="total">
				<td class="name">Total from All Sources</td>
				<td>@totalTasks</td>
				<td>@totalTasksWithGaps</td>
				<td>@totalTrainingCoveragePercent</td>
				<td>@totalTrainingGapsPercent</td>
				<td>@allTasksPercentOfGrandTotal</td>
				<td class="barChart">
					<div class="barChartWrapper">
						<div class="allTasks" style="width:@allTasksPercentOfGrandTotal">
							<div class="coveredTasks" style="width:@totalTrainingCoveragePercent"></div>
						</div>
					</div>
				</td>
			</tr>
		</tbody>
	</table>
</div>
