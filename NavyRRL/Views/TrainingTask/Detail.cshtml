@using Models.Schema;
@using Models.Search;
@using Models.DTO;
@model TrainingTask
@{
	ViewBag.Title = "Training Task: " + Model.Description;
}

@Html.Partial( "~/Views/Shared/_DetailBasicInfo.cshtml", new DetailBasicInfoHelper( Model )
{
	TypeLabel = "Training Task",
	Name = "Training Task",
	PropertyList = new List<NamedString>()
	{
		new NamedString( "Description", Model.Description ),
		new NamedString( "Indirectly Related Source", LinkHelper.GetDetailPageLink( Factories.ReferenceResourceManager.GetByRowId( Model.HasReferenceResource ), Url.Content, m => m.Name ) ),
		new NamedString( "Indirectly Related Source Date", LinkHelper.GetDetailPageLink( Factories.ReferenceResourceManager.GetByRowId( Model.HasReferenceResource ), Url.Content, m => m.PublicationDate ) ),
	}
} )

@Html.Partial( "~/Views/Shared/_TasksBySourceType.cshtml", new TasksBySourceTypeConfig( "which are associated with this Training Task", "for this Training Task", new List<SearchFilter>() { 
	new SearchFilter()
	{
		Name = "> CourseContextId > CourseContext > HasTrainingTaskId > TrainingTask",
		ItemIds = new List<int>(){ Model.Id }
	}
} ) )

@*
@Html.Partial( "~/Views/Shared/_RatingTaskCountBySourceTypeTable.cshtml", new List<SearchFilter>()
{
	new SearchFilter()
	{
		Name = "> CourseContextId > CourseContext > HasTrainingTaskId > TrainingTask",
		ItemIds = new List<int>(){ Model.Id }
	}
} )
*@

@Html.Partial( "~/Views/Search/_ItemListSearch.cshtml" )
<script type="text/javascript">
	var ItemListConfigs = {
		Searches: {
			@*RatingTasks: {
				Header: "Rating Tasks",
				SearchType: "RatingContext",
				StyleType: "RatingTask",
				Filters: [
					{ Name: "> CourseContextId > CourseContext > HasTrainingTaskId > TrainingTask", ItemIds: [ @Model.Id ] }
				]
				Fields: [
					{ Label: "Rating", RenderPath: ["HasRating|Rating", "CodedNotation|Rating"] },
					{ Label: "Description", RenderPath: ["HasRatingTask|RatingTask", "Description|RatingTask"] },
					{ Label: "Training Gap", RenderPath: ["TrainingGapType|Concept", "Name|Concept"] },
				]
			},*@
			Courses: {
				Header: "Rating Tasks and Courses",
				Description: "<p>Rating Tasks related to this Training Task, along with which Course(s) and Assessment Approach(es) are used with that Rating Task, in the context of the listed Rating.</p>",
				SearchType: "RatingContext",
				StyleType: "RatingContext",
				Filters: [
					{ Name: "> CourseContextId > CourseContext > HasTrainingTaskId > TrainingTask", ItemIds: [ @Model.Id ] }
				],
				Fields: [
					{ Label: ItemListSearches.RatingContextLabel, RenderPath: ["Id|RatingContext"], QueryPath: ".Id", IsNumeric: true },
					{ Label: "Course Context", RenderPath: ["HasCourseContext|CourseContext", "Id|CourseContext"], QueryPath: "> CourseContextId > CourseContext", IsNumeric: true },
					{ Label: "Rating", RenderPath: ["HasRating|Rating", "CodedNotation|Rating"], QueryPath: "> RatingId > Rating.CodedNotation" },
					{ Label: "Rating Task", RenderPath: ["HasRatingTask|RatingTask", "Description|RatingTask"], QueryPath: "> RatingTaskId > RatingTask.TextFields" },
					{ Label: "Course Code", RenderPath: [ "HasCourseContext|CourseContext", "HasCourse|Course", "CodedNotation|Course" ], QueryPath: "> CourseContextId > CourseContext > HasCourseId > Course.CodedNotation" },
					//{ Label: "Course", RenderPath: [ "HasCourseContext|CourseContext", "HasCourse|Course", "Name|Course" ], QueryPath: "> CourseContextId > CourseContext > HasCourseId > Course.Name" },
					{ Label: "Assessment Approach", RenderPath: ["HasCourseContext|CourseContext", "AssessmentMethodType|Concept", "Name|Concept"], QueryPath: "> CourseContextId > CourseContext > AssessmentMethodConceptId > Concept.Name", AsPlainText: true }
				]
			},
			SimilarTrainingTasks: {
				Header: "Potentially Related Training Tasks",
				Description: "<p>Other Training Tasks which have the same description text as this Training Task, but which have been indirectly related to a different Source (or a different version of the same Source), based on which Rating Tasks the respective Training Tasks are associated with in the RMTL data. The Training Tasks below may describe the same underlying information as this Training Task does, or the similarity may be a coincidence.</p>",
				SearchType: "TrainingTask",
				StyleType: "TrainingTask",
				Filters: [
					{ Name: "search:Exclude", ItemIds: [ @Model.Id ] },
					{ Name: ".DescriptionExact", Text: "@Model.Description" }
				],
				Fields: [
					{ Label: "Indirect Source Date", RenderPath: ["HasReferenceResource|ReferenceResource", "PublicationDate|ReferenceResource"], QueryPath: "> HasReferenceResourceId > ReferenceResource.PublicationDate", AsPlainText: true },
					{ Label: "Indirect Source", RenderPath: ["HasReferenceResource|ReferenceResource", "Name|ReferenceResource"], QueryPath: "> HasReferenceResourceId > ReferenceResource.TextFields" },
					{ Label: "Training Task Text", RenderPath: ["Description|TrainingTask"], QueryPath: ".TextFields" },
				]
			}
		}
	};
	//

	$(document).ready(function () {
		ItemListSearches.setupItemLists(ItemListConfigs);
	});
	//
</script>
<style type="text/css">
	table [data-column='Course Context'] { width: 125px; }
	table [data-column='Rating'] { width: 75px; }
	table [data-column='Training Gap'] { width: 100px; margin-left: auto; }
	table [data-column='Indirect Source Date'] { width: 175px; }
	table [data-column='Indirect Source'] { width: 500px; }
</style>

@*<item-list-search name="RatingTasks"></item-list-search>*@
<item-list-search name="Courses"></item-list-search>
<item-list-search name="SimilarTrainingTasks"></item-list-search>
