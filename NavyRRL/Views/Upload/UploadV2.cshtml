@using Services;
@using Newtonsoft.Json;
@{
	ViewBag.Title = "Upload V2";
	var allRatings = RatingServices.GetAll().OrderByDescending( m => m.CodedNotation.ToLower() == "all" ).ToList();
	var payGradeTypeConcepts = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_Pay_Grade ).Concepts;
	var trainingGapTypeConcepts = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_TrainingGap ).Concepts;
	var applicabilityTypeConcepts = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_TaskApplicability ).Concepts;
	var sourceTypeConcepts = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_ReferenceResource ).Concepts;
	var courseTypeConcepts = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_CourseType ).Concepts;
	var assessmentMethodTypeConcepts = Factories.ConceptSchemeManager.GetbyShortUri( Factories.ConceptSchemeManager.ConceptScheme_CurrentAssessmentApproach ).Concepts;
}

<script type="text/javascript">
	var Upload = {
		UI: {},
		StaticData: {
			Ratings: @Html.Raw(JsonConvert.SerializeObject(allRatings)),
			PayGradeTypeConcepts: @Html.Raw(JsonConvert.SerializeObject(payGradeTypeConcepts)),
			TrainingGapTypeConcepts: @Html.Raw(JsonConvert.SerializeObject(trainingGapTypeConcepts)),
			ApplicabilityTypeConcepts: @Html.Raw(JsonConvert.SerializeObject(applicabilityTypeConcepts)),
			SourceTypeConcepts: @Html.Raw(JsonConvert.SerializeObject(sourceTypeConcepts)),
			CourseTypeConcepts: @Html.Raw(JsonConvert.SerializeObject(courseTypeConcepts)),
			AssessmentMethodTypeConcepts: @Html.Raw(JsonConvert.SerializeObject(assessmentMethodTypeConcepts))
		},
		LookupGraph: []
	};
	//

	$(document).ready(function () {
		setupUploadUI();
	});
	//

	function setupUploadUI() {
		Upload.UI.RatingSelector = $(".ratingSelector");
		Upload.UI.FileInput = $(".mainFileUpload");
		Upload.UI.ProcessButton = $(".processButton");
		Upload.UI.StatusBox = $(".status");
		Upload.UI.Spinner = $(".uploadSpinner");
		Upload.UI.UploadSummaryBox = $(".uploadSummary");
		Upload.UI.ConfirmChangesSection = $(".confirmChangesSection");
		Upload.UI.ConfirmationButton = $(".confirmationButton");
		Upload.UI.TabBox = {
			Box: $(".uploadDisplay"),
			ButtonList: $(".uploadDisplay > .tabButtons"),
			TabList: $(".uploadDisplay > .tabList"),
			Tabs: [],
			TabsMap: {}
		};

		Upload.UI.ProcessButton.on("click", function () {
			processFile();
		});

		Upload.UI.ConfirmationButton.on("click", function () {
			confirmChanges();
		});

		Upload.UI.Spinner.hide();

		setupTabs();
	}
	//

	function setupTabs() {
		createTab("Summary", "Summary", $(".tab[data-tab='Summary']"));
		@*createTab("ItemsToBeDeleted", "Items to be Deleted");*@
		createTab("PossibleDuplicates", "Possible Duplicates");
		createTab("ItemsToBeCreated", "Items to be Created");
		createTab("AddedItemsToInnerListsForCopiesOfItems", "References to be Added to Existing Items");
		createTab("RemovedItemsFromInnerListsForCopiesOfItems", "References to be Removed from Existing Items");
		Upload.UI.TabBox.Tabs[0].Button.trigger("click");
	}
	//

	function createTab(name, label, existingBox) {
		var Tab = {
			Label: label,
			Name: name,
			Box: existingBox || $("<div class=\"tab\" data-tab=\"" + name + "\"></div>").appendTo(Upload.UI.TabBox.TabList),
			Button: $("<button class=\"tabButton\">" + label + "</button>").appendTo(Upload.UI.TabBox.ButtonList)
		};

		Tab.Header = Tab.Box.find("h3").length > 0 ? Tab.Box.find("h3") : $("<h3>" + label + "</h3>").appendTo(Tab.Box);
		Tab.ContentBox = Tab.Box.find(".tabContent").length > 0 ? Tab.Box.find(".tabContent") : $("<div class=\"tabContent\"></div>").appendTo(Tab.Box);

		Tab.Button.on("click", () => {
			Upload.UI.TabBox.Tabs.forEach(OtherTab => {
				OtherTab.Box.removeClass("active");
				OtherTab.Button.removeClass("active");
			});
			Tab.Box.addClass("active");
			Tab.Button.addClass("active");
		});

		Upload.UI.TabBox.Tabs.push(Tab);
		Upload.UI.TabBox.TabsMap[name] = Tab;
	}
	//

	function processFile() {
		var file = Upload.UI.FileInput[0].files[0];
		if (!file) {
			setUploadStatus("Please select a file.");
			alert("Please select a file.");
		}
		else {
			setUploadStatus("Reading File...");
			var reader = new FileReader();
			reader.onload = function () {
				setUploadStatus("Processing File...");
				parseCSV(reader.result);

				setUploadStatus("Mapping Data...");
				mapCSVJSON();

				setUploadStatus("Sending Data...");
				submitData();
			};
			reader.onerror = function () {
				setUploadStatus("Error reading file: " + reader.error);
			}
			reader.readAsText(file);
		}
	}
	//

	function parseCSV(rawText) {
		//Normalize the text
		Upload.RawCSV = rawText.trim().replace(/\r\n/g, "\n").replace(/""/g, "<INSERTQUOTE>");
		var rows = [];
		var currentRow = [];
		var currentCell = [];
		var isInQuotes = false;

		//Process each character
		Upload.RawCSV.split("").forEach(function (character) {
			if (character == '"') {
				isInQuotes = !isInQuotes;
			}
			else if (isInQuotes) {
				currentCell.push(character);
			}
			else if (character == ",") {
				currentRow.push(joinCSVCellData(currentCell));
				currentCell = [];
			}
			else if (character == "\n") {
				currentRow.push(joinCSVCellData(currentCell));
				currentCell = [];
				rows.push(currentRow);
				currentRow = [];
			}
			else {
				currentCell.push(character);
			}
		});

		//Don't forget stragglers at the end
		currentRow.push(joinCSVCellData(currentCell));
		rows.push(currentRow);

		//Set data
		rows.shift(); //Discard first row, since it is not a true header row
		Upload.CSVColumns = rows.shift();
		Upload.CSVRows = rows;

		//Create flat JSON
		Upload.CSVJSON = [];
		Upload.CSVRows.forEach(function (row) {
			var temp = {};
			Upload.CSVColumns.forEach(function (column, index) {
				temp[column] = row[index];
			});
			Upload.CSVJSON.push(temp);
		});

		console.log("CSV Processed", Upload);
	}
	//

	function joinCSVCellData(cell) {
		return cell.join("").replace(/<INSERTQUOTE>/g, '"').trim().replace(/^N\/A$/g, "");
	}
	//

	function mapCSVJSON() {
		Upload.MappedTable = {
			Rows: Upload.CSVJSON.map((row, index) => {
				return {
					Row_Index: index,
                    Row_Identifier: row["Unique Identifier"], //Not used?
					Row_CodedNotation: row["Index #"],
					Rating_CodedNotation: row["Rating"],
					PayGradeType_CodedNotation: row["Rank"],
					Level_Name: row["Level (A/J/M)"], //Not used, seems to have changed to a single character and a column named "Level (A)" instead?
					BilletTitle_Name: row[ "Billet Title" ],
					WorkRole_Name: row[ "Functional Area" ],
					ReferenceResource_Name: row[ "Source" ],
					ReferenceResource_PublicationDate: row[ "Date of Source" ],
					Shared_ReferenceType: row[ "Work Element Type" ],
					RatingTask_Description: row[ "Work Element (Task)" ],
					RatingTask_ApplicabilityType_Name: row[ "Task Applicability" ],
					RatingTask_TrainingGapType_Name: row[ "Formal Training Gap" ],
					Course_CodedNotation: row[ "CIN" ],
					Course_Name: row[ "Course Name" ],
					Course_CourseType_Name: row[ "Course Type (A/C/G/F/T)" ],
					Course_CurriculumControlAuthority_Name: row["Curriculum Control Authority (CCA)"],
					Course_HasReferenceResource_Name: row["Life-Cycle Control Document"],
					TrainingTask_Description: row[ "CTTL/PPP/TCCD Statement" ],
					Course_AssessmentMethodType_Name: row[ "Current Assessment Approach" ],
					Note: row[ "Notes" ]
				}
			})
		};
	}
	//

	function submitData() {
		hideConfirmChangesSection();
		var data = {
			rawData: Upload.MappedTable,
			ratingRowID: Upload.UI.RatingSelector.val()
		};

		if (!data.ratingRowID) {
			setUploadStatus("Please select a Rating.");
			alert("Please select a Rating.");
			return;
		}

		setUploadStatus("Status: Processing data, please wait...", true);
		console.log("Submitting data", data);
		Upload.UI.UploadSummaryBox.html("");
		
		postData("@Url.Content("~/upload/processupload")", data).then((response) => {
			if (response.ok) {
				console.log("Received response", response);
				return response.text()
			}
			else {
				throw response;
			}
		}).then((text) => {
			setUploadStatus("Please review the Summary report below. If there are no issues, then click the <b>Confirm All Changes</b> button to save the data to the database.");
			Upload.Summary = JSON.parse(text);
			console.log("Parsed Data", Upload.Summary);
			//renderResults();
			//renderRichSummary();
			renderRichResults(Upload.UI.UploadSummaryBox, false, Upload.Summary);

			if (Upload.Summary.Valid && Upload.Summary.Data.Messages.Error?.length == 0) {
				showConfirmChangesSection();
			}
			else {
				hideConfirmChangesSection();
			}
		}).catch((response) => {
			console.log("Error handling request", response);
			setUploadStatus("Error processing upload. " + response.statusText + " (Error code " + response.status + ")");
		});
	}
	//

	/*
	function renderRichSummary() {
		Upload.UI.UploadSummaryBox.html("");
		renderCountTable(Upload.UI.UploadSummaryBox, false, Upload.Summary);
		collapseSummaryGraph(Upload.StaticData);
		collapseSummaryGraph(Upload.Summary.Data.ItemsToBeCreated);
		collapseSummaryGraph(Upload.Summary.Data.ItemsToBeDeleted);
		getLabels(Upload.Summary.Data.AddedItemsToInnerListsForCopiesOfItems);
		getLabels(Upload.Summary.Data.RemovedItemsFromInnerListsForCopiesOfItems);
		renderTextSet("Errors", Upload.Summary.Data.Messages.Error, Upload.UI.UploadSummaryBox, false, "Please correct the errors and try again.");
		renderTextSet("Warnings", Upload.Summary.Data.Messages.Warning, Upload.UI.UploadSummaryBox, false, "Please review the warnings carefully before confirming the update.");
		renderTextSet("Notes", Upload.Summary.Data.Messages.Note, Upload.UI.UploadSummaryBox, false, "Miscellaneous notes.");
		renderRichSet("Possible Duplicates", { PossibleDuplicates: Upload.Summary.Data.PossibleDuplicates }, Upload.Summary.Data.Messages.Duplicate, Upload.UI.TabBox.TabsMap.PossibleDuplicates.ContentBox, false, false, "Found multiple instances of one or more items. This may be caused by inconsistent capitalization on different rows. Please carefully review the data before confirming the update.")
		renderRichSet("Items to be Created", Upload.Summary.Data.ItemsToBeCreated, Upload.Summary.Data.Messages.Create, Upload.UI.TabBox.TabsMap.ItemsToBeCreated.ContentBox, true, true, "The following items will be created if you confirm the changes.");
		renderRichSet("Additional References for Existing Items", Upload.Summary.Data.AddedItemsToInnerListsForCopiesOfItems, Upload.Summary.Data.Messages.AddItem, Upload.UI.TabBox.TabsMap.AddedItemsToInnerListsForCopiesOfItems.ContentBox, true, false, "New references have been detected for the following existing items.");
		renderRichSet("References to be Removed from Existing Items", Upload.Summary.Data.RemovedItemsFromInnerListsForCopiesOfItems, Upload.Summary.Data.Messages.RemoveItem, Upload.UI.TabBox.TabsMap.RemovedItemsFromInnerListsForCopiesOfItems.ContentBox, true, false, "These references will be removed from the following existing items.");
	}
	//
	*/

	/*
	function renderSummaryTable(container) {
		var table = $("<table class=\"summaryTable\"><tbody></tbody></table>").appendTo(container);
		var tbody = table.find("tbody");
		tbody.append("<tr><th>Item Type</th><th>Unchanged</th><th>Possible Duplicates</th><th>To be Created</th><th>Has Data to be Added</th><th>Has Data to be Removed</th></tr>");
		["BilletTitle|Billet Title", "Course|Course", "Organization|Curriculum Control Authority", "RatingTask|Rating Task", "ReferenceResource|Reference Resource", "TrainingTask|Training Task", "WorkRole|Functional Area"].forEach(item => {
			var property = item.split("|")[0];
			var label = item.split("|")[1];
			tbody.append("<tr><td>" + [
				label,
				(Upload.Summary.Data.UnchangedCount[property] || 0),
				(Upload.Summary.Data.PossibleDuplicates.filter(m => m.Type == property)?.length || 0),
				(Upload.Summary.Data.ItemsToBeCreated[property]?.length || 0),
				(Upload.Summary.Data.AddedItemsToInnerListsForCopiesOfItems[property]?.length || 0),
				(Upload.Summary.Data.RemovedItemsFromInnerListsForCopiesOfItems[property]?.length || 0)
			].join("</td><td>") + "</td></tr>")
		});
	}
	//
	*/

	function renderRichResults(container, isConfirmation, Source, renderHeaderMessage) {
		//Clear out the container and graph
		container.html("");
		Upload.LookupGraph = [];

		//Render a custom header (optional)
		renderHeaderMessage?.();

		//Update the tab buttons and headers
		Upload.UI.TabBox.TabsMap.ItemsToBeCreated.Button.html(isConfirmation ? "Items Created" : "Items to be Created");
		Upload.UI.TabBox.TabsMap.AddedItemsToInnerListsForCopiesOfItems.Button.html(isConfirmation ? "References Added to Existing Items" : "References to be Added to Existing Items");
		Upload.UI.TabBox.TabsMap.RemovedItemsFromInnerListsForCopiesOfItems.Button.html(isConfirmation ? "References Removed from Existing Items" : "References to be Removed from Existing Items");
		Upload.UI.TabBox.TabsMap.ItemsToBeCreated.Header.html(isConfirmation ? "Items Created" : "Items to be Created");
		Upload.UI.TabBox.TabsMap.AddedItemsToInnerListsForCopiesOfItems.Header.html(isConfirmation ? "References Added to Existing Items" : "References to be Added to Existing Items");
		Upload.UI.TabBox.TabsMap.RemovedItemsFromInnerListsForCopiesOfItems.Header.html(isConfirmation ? "References Removed from Existing Items" : "References to be Removed from Existing Items");

		//Render the count table
		renderCountTable(container, isConfirmation, Source);

		//Refresh the lookup graph data
		collapseSummaryGraph(Upload.StaticData);
		collapseSummaryGraph(Source.Data.ItemsToBeCreated);
		collapseSummaryGraph(Source.Data.ItemsToBeDeleted);
		getLabels(Source.Data.AddedItemsToInnerListsForCopiesOfItems);
		getLabels(Source.Data.RemovedItemsFromInnerListsForCopiesOfItems);

		//Render simple messages
		renderTextSet("Errors", Source.Data.Messages.Error, container, false, "Please correct the errors and try again.");
		renderTextSet("Warnings", Source.Data.Messages.Warning, container, false, "Please review the warnings carefully" + (isConfirmation ? "." : " before confirming the update.") );
		renderTextSet("Notes", Source.Data.Messages.Note, container, false, "Miscellaneous notes.");

		//Render tabbed data
		renderRichSet("Possible Duplicates", { PossibleDuplicates: Source.Data.PossibleDuplicates }, Source.Data.Messages.Duplicate, Upload.UI.TabBox.TabsMap.PossibleDuplicates.ContentBox, false, false, "Found multiple instances of one or more items. This may be caused by inconsistent capitalization on different rows. Please carefully review the data" + (isConfirmation ? "." : " before confirming the update."))
		renderRichSet(isConfirmation ? "Items Created" : "Items to be Created", Source.Data.ItemsToBeCreated, Source.Data.Messages.Create, Upload.UI.TabBox.TabsMap.ItemsToBeCreated.ContentBox, true, true, "The following items " + (isConfirmation ? "were created." : "will be created if you confirm the changes.") );
		renderRichSet("Additional References for Existing Items", Source.Data.AddedItemsToInnerListsForCopiesOfItems, Source.Data.Messages.AddItem, Upload.UI.TabBox.TabsMap.AddedItemsToInnerListsForCopiesOfItems.ContentBox, true, false, "New references have been " + (isConfirmation ? "added to" : "detected for") + " the following existing items.");
		renderRichSet(isConfirmation ? "References Removed from Existing Items" : "References to be Removed from Existing Items", Source.Data.RemovedItemsFromInnerListsForCopiesOfItems, Source.Data.Messages.RemoveItem, Upload.UI.TabBox.TabsMap.RemovedItemsFromInnerListsForCopiesOfItems.ContentBox, true, false, "These references " + (isConfirmation ? "have been" : "will be") + " removed from the following existing items.");
	}
	//

	function renderCountTable(container, isConfirmation, Source) {
		var table = $("<table class=\"summaryTable\"><tbody></tbody></table>").appendTo(container);
		var tbody = table.find("tbody");
		tbody.append("<tr><th>" + [
			"Item Type",
			"Unchanged",
			"Possible Duplicates",
			(isConfirmation ? "Items Created" : "To Be Created"),
			(isConfirmation ? "Has Data that was Added" : "Has Data to be Added"),
			(isConfirmation ? "Has Data that was Removed" : "Has Data to be Removed")
		].join("</th><th>") + "</th></tr>");
		["BilletTitle|Billet Title", "Course|Course", "Organization|Curriculum Control Authority", "RatingTask|Rating Task", "ReferenceResource|Reference Resource", "TrainingTask|Training Task", "WorkRole|Functional Area"].forEach(item => {
			var property = item.split("|")[0];
			var label = item.split("|")[1];
			tbody.append("<tr><td>" + [
				label,
				(Source.Data.UnchangedCount[property] || 0),
				(Source.Data.PossibleDuplicates.filter(m => m.Type == property)?.length || 0),
				(Source.Data.ItemsToBeCreated[property]?.length || 0),
				(Source.Data.AddedItemsToInnerListsForCopiesOfItems[property]?.length || 0),
				(Source.Data.RemovedItemsFromInnerListsForCopiesOfItems[property]?.length || 0)
			].join("</td><td>") + "</td></tr>")
		});
	}
	//

	function renderTextSet(header, items, container, sortItems, explanation, cssClass) {
		if (items?.length > 0) {
			container.append("<h3>" + header + "</h3>");
			explanation && container.append("<p>" + explanation + "</p>");
			var list = $("<ul class=\"textItems " + (cssClass || "") + "\"></ul>").appendTo(container);
			sortItems && items.sort((a, b) => { return a > b ? 1 : -1 });
			items.forEach((item) => {
				list.append("<li>" + item + "</li>");
			});
		}
	}
	//

	function renderRichSet(header, items, messages, container, sortItems, asTabs, explanation, cssClass) {
		container.html("");
		var hasAnyItems = false;
		Object.keys(items).forEach(key => {
			if (Array.isArray(items[key]) && items[key].length > 0) {
				sortItems && items[key].sort((a, b) => { return (a.Name || a.CodedNotation || a.Description || "") > (b.Name || b.CodedNotation || b.Description || "") ? 1 : -1 });
				hasAnyItems = true;
			}
		});

		if (hasAnyItems || messages.length > 0) {
			//container.append("<h3>" + header + "</h3>");
			explanation && container.append("<p>" + explanation + "</p>");
			asTabs && container.addClass("tabBox");
			asTabs && $("<div class=\"tabButtons\"></div>").appendTo(container);
			if (hasAnyItems) {
				var itemList = $("<div class=\"richItemSet " + (cssClass || "") + (asTabs ? "tabList" : "") + "\"\"></div>").appendTo(container);
				renderRichItemList("Reference Resource", items.ReferenceResource, itemList, asTabs);
				renderRichItemList("Curriculum Control Authority", items.Organization, itemList, asTabs);
				renderRichItemList("Billet Title", items.BilletTitle, itemList, asTabs);
				renderRichItemList("Functional Area", items.WorkRole, itemList, asTabs);
				renderRichItemList("Rating Task", items.RatingTask, itemList, asTabs);
				renderRichItemList("Course", items.Course, itemList, asTabs);
				renderRichItemList("Training Task", items.TrainingTask, itemList, asTabs);
				renderRichItemList("", items.PossibleDuplicates, itemList, asTabs);
				asTabs && setupRichItemTabs(container);
			}
			if (messages.length > 0) {
				sortItems && messages.sort((a, b) => { return a > b ? 1 : -1 });
				hasAnyItems && container.append("<p class=\"midExplanation\">Additionally, the following messages were returned from the server:</p>");
				var messageList = $("<ul class=\"textItems " + (cssClass || "") + "\"></ul>").appendTo(container);
				messages.forEach((message) => {
					messageList.append("<li>" + message + "</li>");
				});
			}
		}
		else {
			container.append("<p>No items detected for this category.</p>");
		}
	}
	//

	function renderRichItemList(type, list, container, asTabs) {
		if (list?.length > 0) {
			var listBox = $("<div class=\"richItemList " + (asTabs ? "tab" : "") + "\"></div>").appendTo(container);
			listBox.append("<h4 class=\"richItemListHeader\">" + type + " (" + list.length + ")" + "</h4>");
			list.forEach(item => {
				item.Type = type || item.Type;
				var itemBox = $("<div class=\"richItem\"><i>Loading...</i></div>").appendTo(listBox);
				setTimeout(() => {
					itemBox.html("");
					appendProperty(itemBox, "Type", item, "Type");
					appendProperty(itemBox, "Related Rating", item, "HasRating", getLookupList);
					appendProperty(itemBox, "Name", item, "Name");
					appendProperty(itemBox, "Code", item, "CodedNotation");
					appendProperty(itemBox, "Description", item, "Description");
					appendProperty(itemBox, "Pay Grade", item, "PayGradeType", getLookupList);
					appendProperty(itemBox, "Applicability Type", item, "ApplicabilityType", getLookupList);
					appendProperty(itemBox, "TrainingGapType", item, "TrainingGapType", getLookupList);
					appendProperty(itemBox, "Functional Area", item, "HasWorkRole", getLookupList);
					appendProperty(itemBox, "Course Type", item, "CourseType", getLookupList);
					appendProperty(itemBox, "Assessment Method Type", item, "AssessmentMethodType", getLookupList);
					appendProperty(itemBox, "Work Element Type", item, "ReferenceType", getLookupList);
					appendProperty(itemBox, "Has Reference Resource", item, "HasReferenceResource", getLookupList);
					appendProperty(itemBox, "Curriculum Control Authority", item, "CurriculumControlAuthority", getLookupList);
					appendProperty(itemBox, "Rating Tasks", item, "HasRatingTask", getLookupList);
					appendProperty(itemBox, "Has " + ((item.HasTrainingTask && Array.isArray(item.HasTrainingTask)) ? (item.HasTrainingTask.length + " ") : "") + "Training Task(s)", item, "HasTrainingTask", getLookupList);
					appendProperty(itemBox, item.Items?.length + " Item(s)", item, "Items", (m) => { return getItemBulletedList(m, true); });
				}, 0)
			});
		}
	}
	//

	function appendProperty(container, label, data, property, displayValue, cssClass) {
		if (data[property] && (Array.isArray(data[property]) ? data[property].length > 0 : true)) {
			var propertyBox = $("<div class=\"property " + (cssClass || "") + "\" data-property=\"" + property + "\"></div>").appendTo(container);
			propertyBox.append("<div class=\"propertyLabel\">" + label + "</div>");
			var valueBox = $("<div class=\"propertyValue\"><i>Loading...</i></div>").appendTo(propertyBox);
			displayValue && setTimeout(() => { valueBox.html(displayValue(data[property])); }, 0);
			!displayValue && valueBox.html(data[property]);
		}
	}
	//

	function getLookupList(rowIDs) {
		rowIDs = rowIDs || [];
		rowIDs = Array.isArray(rowIDs) ? rowIDs : [rowIDs];
		var result = getItemBulletedList(rowIDs.map(rowID => {
			return Upload.Summary.Data.LookupGraph.filter(m => m?.RowId == rowID)[0] || { FallbackRowID: rowID };
		}));
		return result;
	}
	//

	/*
	function getItemList(Items, showRowIDs) {
		if (Items?.length > 0) {
			var list = $("<div class=\"innerItemList\"></div>");
			Items.forEach(Item => {
				var box = $("<div class=\"richItem innerItem\"></div>").appendTo(list);
				showRowIDs && appendProperty(box, "Row ID", Item, "RowId", null, "monospace");
				Item.Name ? appendProperty(box, "Name", Item, "Name") :
				Item.CodedNotation ? appendProperty(box, "Code", Item, "CodedNotation") :
				Item.Description ? appendProperty(box, "Description", Item, "Description") :
				Item.FallbackRowID ? appendProperty(box, "Item Row ID", Item, "FallbackRowID", null, "monospace") :
				null;
			});
			return list[0].outerHTML;
		}
		return "";
	}
	//
	*/

	function getItemBulletedList(Items, showRowIDs) {
		if (Items?.length > 0) {
			var list = $("<ul class=\"innerItemList\"></ul>");
			Items.forEach(Item => {
				var box = $("<li></li>").appendTo(list);
				showRowIDs && box.append("<span class=\"monospace\">" + Item.RowId + "</span>");
				box.append("<span class=\"" + (Item.FallbackRowID ? "monospace" : "") + "\">" + (Item.Name || Item.CodedNotation || Item.Description || Item.FallbackRowID) + "</span>");
			});
			return list[0].outerHTML;
		}
		return "";
	}
	//

	function confirmChanges() {
		if (!Upload.Summary.Data.RowId) {
			alert("Error: No summary data found. Please re-process the spreadsheet and try again.");
			return;
		}

		if (!confirm("Are you sure you want to commit all of the changes to the database?")) {
			return;
		}

		hideConfirmChangesSection();
		window.scrollTo(0, 0); //Ensure the user can see the status box
		setUploadStatus("Confirming changes, please wait...", true);

		postData("@Url.Content("~/upload/confirmchanges")", { changeSummaryRowID: Upload.Summary.Data.RowId }).then((response) => {
			if (response.ok) {
				setUploadStatus("Please review the below for details.");
				console.log("Received response", response);
				return response.text();
			}
			else {
				throw response;
			}
		}).then((text) => {
			Upload.Confirmation = JSON.parse(text);
			console.log("Parsed Confirmation", Upload.Confirmation);
			//renderRichConfirmation();
			renderRichResults(Upload.UI.UploadSummaryBox, true, Upload.Confirmation, () => {
				if (Upload.Confirmation.Valid) {
					Upload.UI.UploadSummaryBox.append("<h3>Finished.</h3>");
					Upload.UI.UploadSummaryBox.append("<p>Your changes have been saved to the database.</p>");
				}
			});
		}).catch((response) => {
			console.log("Error handling request", response);
			setUploadStatus("Error processing upload. " + response.statusText + " (Error code " + response.status + ")");
		});
	}
	//

	/*
	function renderRichConfirmation() {
		Upload.UI.UploadSummaryBox.html("");

		if (Upload.Confirmation.Valid) {
			Upload.UI.UploadSummaryBox.append("<h3>Finished.</h3>");
			Upload.UI.UploadSummaryBox.append("<p>Your changes have been saved to the database.</p>");
		}

		renderCountTable(Upload.UI.UploadSummaryBox, true, Upload.Confirmation);
		collapseSummaryGraph(Upload.StaticData);
		collapseSummaryGraph(Upload.Summary.Data.ItemsToBeCreated);
		collapseSummaryGraph(Upload.Summary.Data.ItemsToBeDeleted);
		getLabels(Upload.Summary.Data.AddedItemsToInnerListsForCopiesOfItems);
		getLabels(Upload.Summary.Data.RemovedItemsFromInnerListsForCopiesOfItems);
		renderTextSet("Errors", Upload.Summary.Data.Messages.Error, Upload.UI.UploadSummaryBox, false, "Please correct the errors and try again.");
		renderTextSet("Warnings", Upload.Summary.Data.Messages.Warning, Upload.UI.UploadSummaryBox, false, "Please review the warnings carefully.");
		renderTextSet("Notes", Upload.Summary.Data.Messages.Note, Upload.UI.UploadSummaryBox, false, "Miscellaneous notes.");
		renderRichSet("Possible Duplicates", { PossibleDuplicates: Upload.Summary.Data.PossibleDuplicates }, Upload.Summary.Data.Messages.Duplicate, Upload.UI.TabBox.TabsMap.PossibleDuplicates.ContentBox, false, false, "Found multiple instances of one or more items. This may be caused by inconsistent capitalization on different rows. Please carefully review the data.")
		renderRichSet("Items Created", Upload.Summary.Data.ItemsToBeCreated, Upload.Summary.Data.Messages.Create, Upload.UI.TabBox.TabsMap.ItemsToBeCreated.ContentBox, true, true, "The following items were created.");
		renderRichSet("Additional References for Existing Items", Upload.Summary.Data.AddedItemsToInnerListsForCopiesOfItems, Upload.Summary.Data.Messages.AddItem, Upload.UI.TabBox.TabsMap.AddedItemsToInnerListsForCopiesOfItems.ContentBox, true, false, "New references have been added to the following existing items.");
		renderRichSet("References to be Removed from Existing Items", Upload.Summary.Data.RemovedItemsFromInnerListsForCopiesOfItems, Upload.Summary.Data.Messages.RemoveItem, Upload.UI.TabBox.TabsMap.RemovedItemsFromInnerListsForCopiesOfItems.ContentBox, true, false, "These references have been removed from the following existing items.");
	}
	//
	*/


	function setUploadStatus(text, showSpinner) {
		Upload.UI.StatusBox.html(text);
		showSpinner ? Upload.UI.Spinner.show() : Upload.UI.Spinner.hide();
	}
	//

	function showConfirmChangesSection() {
		Upload.UI.ConfirmChangesSection.addClass("visible");
	}
	//

	function hideConfirmChangesSection() {
		Upload.UI.ConfirmChangesSection.removeClass("visible");
	}
	//

	async function postData(url, data) {

		var output = JSON.stringify(data);

		return fetch(url, {
			method: "POST",
			headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
			body: output
		});
	}
	//

	function collapseSummaryGraph(Source) {
		Object.keys(Source).forEach(key => {
			Upload.LookupGraph = Upload.LookupGraph.concat(Source[key]);
		});
	}
	//

	function getLabels(Source) {
		Object.keys(Source).forEach(key => {
			Source[key]?.forEach(Item => {
				var match = Upload.LookupGraph.filter(m => m.RowId == Item.RowId)[0];
				match?.Name && (Item.Name = match.Name);
				match?.CodedNotation && (Item.CodedNotation = match.CodedNotation);
				match?.Description && (Item.Description = match.Description);
			});
		});
	}
	//

	function setupRichItemTabs(container) {
		var innerTabs = [];
		container.find("> .tabList > .tab").each(function () {
			var Tab = {
				Box: $(this),
				Button: $("<button class=\"richItemTabButton\">" + $(this).find(".richItemListHeader").html() + "</button>").appendTo(container.find("> .tabButtons"))
			};
			Tab.Button.on("click", function () {
				innerTabs.forEach(OtherTab => {
					OtherTab.Box.removeClass("active");
					OtherTab.Button.removeClass("active");
				});
				Tab.Box.addClass("active");
				Tab.Button.addClass("active");
			});
			innerTabs.push(Tab);
		});
		innerTabs[0]?.Button.trigger("click");
	}
	//
</script>
<style type="text/css">
	html body .container { width: 98vw; }
	.spinner { display: inline-block; box-shadow: inset 4px 0 0 5px; border-radius: 50%; height: 20px; width: 20px; animation: spin 1s linear infinite; }
	@@keyframes spin { 100% { transform: rotate(360deg); } }
	#mainSiteFooter { display: none; }
	.monospace { font-family: Consolas, 'Courier New', monospace; }

	.tabBox { }
	.tabBox .tabButtons { }
	.tabBox .tabButtons button { border: 1px solid #777; padding: 5px 10px; min-height: 30px; }
	.tabBox .tabButtons button.active { background-color: #555; color: #FFF; }
	.tabBox .tabList .tab:not(.active) { display: none; }

	.uploadHeader { }
	.uploadHeader .uploadItem { display: block; max-width: none; }
	.uploadHeader .ratingSelector { display: block; width: 100%; height: 30px; margin-bottom: 5px; cursor: pointer; }
	.uploadHeader .uploadBox { display: flex; flex-wrap: wrap; align-items: center; margin-bottom: 5px; }
	.uploadHeader .uploadBox .mainFileUpload { flex: 33% 1 1; padding: 4px 5px; cursor: pointer; background-color: #EEE; }
	.uploadHeader .uploadBox .mainFileUpload:hover, .uploadHeader .uploadBox .mainFileUpload:focus { background-color: #DDD; }
	.uploadHeader .uploadBox .processButton { flex: 200px 0 0; height: 30px; }
	.uploadHeader .statusBox { display: flex; align-items: center; padding: 5px 10px; margin-bottom: 5px; }
	.uploadHeader .statusBox .status { margin-right: 10px; }

	.confirmChangesSection { margin-top: 30px; padding: 10px 0; border-top: 1px solid #CCC; }
	.confirmChangesSection:not(.visible) { display: none; }
	.confirmChangesSection .confirmationButton { padding: 5px 10px; }
	.confirmationButton {background-color: green; color: white;}

	.uploadSummary .midExplanation { margin-top: 20px; }
	.richItemSet { }
	.richItemSet .richItemList { margin-bottom: 50px; }
	.richItemSet .richItemList .richItem { display: flex; flex-wrap: wrap; padding: 5px 0; border-bottom: 1px solid #CCC; }
	.richItemSet .richItemList .richItem:last-child { border-bottom: none; }
	.richItemSet .richItemList .richItem .property { padding: 5px 20px; min-width: 400px; }
	.richItemSet .richItemList .richItem .property .propertyLabel { font-size: 10px; }
	.richItemSet .richItemList .richItem .property .propertyValue { font-size: 14px; }
	.richItemSet .richItemList .richItem .property[data-property='Description'] { flex: 1 0 800px; }

	.richItemSet .richItemList .richItem .property .propertyValue .innerItemList {  }
	.richItemSet .richItemList .richItem .property .propertyValue .innerItemList .innerItem { border-bottom: 1px dashed #CCC; }
	.richItemSet .richItemList .richItem .property .propertyValue .innerItemList .innerItem:last-child { border-bottom: none; }
	.richItemSet .richItemList .richItem .property ul { margin: 0; padding: 0 0 0 18px; }
	.richItemSet .richItemList .richItem .property ul li span { padding: 0 5px; }
	.richItemSet .richItemList .richItem .property ul li span:first-child { padding: 0 5px 0 0; }
	.richItemSet .richItemList .richItem .property ul li span:not(:last-child) { border-right: 1px solid #CCC; }

	.summaryTable {  }
	.summaryTable th, .summaryTable td { border: 1px solid #CCC; text-align: center; }
	.summaryTable th { background-color: #EEE; font-weight: bold; padding: 5px 10px; }
	.summaryTable td { padding: 2.5px 10px; }
</style>

<h2>Upload RMTL Data</h2>

<div class="uploadHeader">
	<p>Select a Rating and choose a CSV (comma-separated values) file to upload. Do not include "All Sailor Tasks", since those have already been added to the system.</p>
	<select class="uploadItem ratingSelector">
		<option value="" disabled="disabled" selected="selected">Select a Rating...</option>
		@foreach( var rating in allRatings )
		{
			<option value="@rating.RowId.ToString()">@rating.CodedNotation - @rating.Name</option>
		}
	</select>
	<div class="uploadBox">
		<input class="uploadItem mainFileUpload" type="file" />
		<button class="uploadItem processButton" data-action="process">Process</button>
	</div>
	<div class="statusBox">
		<div class="status"></div>
		<div class="spinner uploadSpinner"></div>
	</div>
</div>
<div class="tabBox uploadDisplay">
	<div class="tabButtons"></div>
	<div class="tabList">
		<div class="tab" data-tab="Summary">
			<h3>Summary</h3>
			<div class="tabContent uploadSummary"></div>
			<div class="confirmChangesSection">
				<h4>Confirm Changes</h4>
				<p>If you are satisfied with the changes listed above, click the Confirm All Changes button.</p>
				<button class="confirmationButton">Confirm All Changes</button>
			</div>
		</div>
	</div>
</div>
