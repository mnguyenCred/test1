
@{
	ViewBag.Title = "Upload V2";
	var allRatings = Factories.RatingManager.GetAll().OrderBy( m => m.CodedNotation.ToLower() == "all" ).ToList();
}

<script type="text/javascript">
	var UI = {};
	var Data = {};

	$(document).ready(function () {
		setupUI();
	});
	//

	function setupUI() {
		UI.RatingSelector = $(".ratingSelector");
		UI.FileInput = $(".mainFileUpload");
		UI.ProcessButton = $(".processButton");
		UI.StatusBox = $(".status");
		UI.UploadSummaryBox = $(".uploadSummary");
		UI.ConfirmationButton = $(".confirmationButton");
		UI.ConfirmationSummaryBox = $(".confirmationSummary");

		UI.ProcessButton.on("click", function () {
			processFile();
		});

		UI.ConfirmationButton.on("click", function () {
			confirmChanges();
		});
	}
	//

	function processFile() {
		var file = UI.FileInput[0].files[0];
		if (!file) {
			setStatus("Please select a file.");
			alert("Please seelct a file.");
		}
		else {
			setStatus("Reading File...");
			var reader = new FileReader();
			reader.onload = function () {
				setStatus("Processing File...");
				parseCSV(reader.result);

				setStatus("Mapping Data...");
				mapCSVJSON();

				setStatus("Sending Data...");
				submitData();
			};
			reader.onerror = function () {
				setStatus("Error reading file: " + reader.error);
			}
			reader.readAsText(file);
		}
	}
	//

	function parseCSV(rawText) {
		//Normalize the text
		Data.RawCSV = rawText.replace(/\r\n/g, "\n").replace(/""/g, "<INSERTQUOTE>");
		var rows = [];
		var currentRow = [];
		var currentCell = [];
		var isInQuotes = false;

		//Process each character
		Data.RawCSV.split("").forEach(function (character) {
			if (character == '"') {
				isInQuotes = !isInQuotes;
			}
			else if (isInQuotes) {
				currentCell.push(character);
			}
			else if (character == ",") {
				currentRow.push(currentCell.join("").replace(/<INSERTQUOTE>/g, '"').trim());
				currentCell = [];
			}
			else if (character == "\n") {
				currentRow.push(currentCell.join("").replace(/<INSERTQUOTE>/g, '"').trim());
				currentCell = [];
				rows.push(currentRow);
				currentRow = [];
			}
			else {
				currentCell.push(character);
			}
		});

		//Don't forget stragglers at the end
		currentRow.push(currentCell.join("").replace(/<INSERTQUOTE>/g, '"').trim());
		rows.push(currentRow);

		//Set data
		rows.shift(); //Discard first row, since it is not a true header row
		Data.CSVColumns = rows.shift();
		Data.CSVRows = rows;

		//Create flat JSON
		Data.CSVJSON = [];
		Data.CSVRows.forEach(function (row) {
			var temp = {};
			Data.CSVColumns.forEach(function (column, index) {
				temp[column] = row[index];
			});
			Data.CSVJSON.push(temp);
		});

		console.log("CSV Processed", Data);
	}
	//

	function mapCSVJSON() {
		Data.MappedTable = {
			Rows: Data.CSVJSON.map(row => {
				return {
					Rating_CodedNotation: row[ "Rating" ],
					PayGradeType_Notation: row[ "Rank" ],
					BilletTitle_Name: row[ "Billet Title" ],
					WorkRole_Name: row[ "Functional Area" ],
					ReferenceResource_Name: row[ "Source" ],
					ReferenceResource_PublicationDate: row[ "Date of Source" ],
					Shared_ReferenceType: row[ "Work Element Type" ],
					RatingTask_Description: row[ "Work Element (Task)" ],
					RatingTask_ApplicabilityType_Label: row[ "Task Applicability" ],
					RatingTask_TrainingGapType_Label: row[ "Formal Training Gap" ],
					Course_CodedNotation: row[ "CIN" ],
					Course_Name: row[ "Course Name" ],
					Course_CourseType_Label: row[ "Course Type (A/C/G/F/T)" ],
					Course_HasReferenceResource_Name: row["Life-Cycle Control Document"],
					Course_CurriculumControlAuthority_Name: row["Curriculum Control Authority (CCA)"],
					TrainingTask_Description: row[ "CTTL/PPP/TCCD Statement" ],
					Course_AssessmentMethodType_Label: row[ "Current Assessment Approach" ],
					Note: row[ "Notes" ]
				}
			})
		};
	}
	//

	function submitData() {
		hideConfirmationButton();
		var data = {
			rawData: Data.MappedTable,
			ratingRowID: UI.RatingSelector.val()
		};

		if (!data.ratingRowID) {
			setStatus("Please select a Rating.");
			alert("Please select a Rating.");
			return;
		}

		setStatus("Sending data, check console for details");
		console.log("Submitting data", data);
		
		postData("@Url.Content("~/upload/processupload")", data).then((response) => {
			setStatus("Received Response, check console for details");
			console.log("Received response", response);
			return response.text()
		}).then((text) => {
			Data.Summary = JSON.parse(text);
			console.log("Parsed Data", Data.Summary);
			renderResults();

			if (Data.Summary.Valid && Data.Summary.Data.Messages.Error?.length == 0) {
				showConfirmationButton();
			}
			else {
				hideConfirmationButton();
			}
		});
	}
	//

	function renderResults() {
		UI.UploadSummaryBox.html("");
		renderTextSet("Errors", Data.Summary.Data.Messages.Error, UI.UploadSummaryBox, false, "Please correct the errors and try again.");
		renderTextSet("Warnings", Data.Summary.Data.Messages.Warning, UI.UploadSummaryBox, false, "Please review the warnings carefully before confirming the update.");
		renderTextSet("Possible Duplicates", Data.Summary.Data.Messages.Duplicate, UI.UploadSummaryBox, false, "Found multiple instances of one or more items. This may be caused by inconsistent capitalization on different rows. Please carefully review the data before confirming the update.");
		renderTextSet("Items to be Deleted", Data.Summary.Data.Messages.Delete, UI.UploadSummaryBox, true, "Warning: The following items were not detected in the uploaded data, and will be deleted if you confirm the changes!");
		renderTextSet("Items to be Created", Data.Summary.Data.Messages.Create, UI.UploadSummaryBox, true, "The following items will be created if you confirm the changes.");
		renderTextSet("Additional References for Existing Items", Data.Summary.Data.Messages.AddItem, UI.UploadSummaryBox, true, "New references have been detected for the following existing items.");
		renderTextSet("References to be Removed from Existing Items", Data.Summary.Data.Messages.RemoveItem, UI.UploadSummaryBox, true, "These references will be remvoed from the following existing items.");
		renderTextSet("Notes", Data.Summary.Data.Messages.Note, UI.UploadSummaryBox, false, "Miscellaneous notes.");
	}
	//

	function renderTextSet(header, items, container, sortItems, explanation, cssClass) {
		if (items?.length > 0) {
			container.append("<h3>" + header + "</h3>");
			explanation && container.append("<p>" + explanation + "</p>");
			var list = $("<ul></ul>").appendTo(container);
			if (sortItems) {
				items.sort((a, b) => { return a > b ? 1 : -1 });
			}
			items.forEach((item) => {
				list.append("<li class=\"" + (cssClass || "") + "\">" + item + "</li>");
			});
		}
	}
	//

	function confirmChanges() {
		if (!Data.Summary.Data.RowId) {
			alert("Error: No summary data found. Please re-process the spreadsheet and try again.");
			return;
		}

		if (!confirm("Are you sure you want to commit all of the changes to the database?")) {
			return;
		}

		hideConfirmationButton();
		window.scrollTo(0, 0); //Ensure the user can see the status box
		setStatus("Confirming changes, please wait...");

		postData("@Url.Content("~/upload/confirmchanges")", { changeSummaryRowID: Data.Summary.Data.RowId }).then((response) => {
			setStatus("Received response, check console for details");
			console.log("Received response", response);
			return response.text();
		}).then((text) => {
			Data.Confirmation = JSON.parse(text);
			console.log("Parsed Confirmation", Data.Confirmation);
			renderConfirmation();
		});
	}
	//

	function renderConfirmation() {
		UI.UploadSummaryBox.html("");
		UI.ConfirmationSummaryBox.html("");

		if (Data.Confirmation.Valid) {
			UI.ConfirmationSummaryBox.append("<h3>Finished.</h3>");
			UI.ConfirmationSummaryBox.append("<p>Your changes have been saved to the database.</p>");
		}
		else {
			renderTextSet("Error", Data.Confirmation.Status || [], UI.ConfirmationSummaryBox, false, "One or more errors were encountered while trying to confirm the changes.");
		}
	}
	//

	function setStatus(text) {
		UI.StatusBox.html(text);
	}
	//

	function showConfirmationButton() {
		UI.ConfirmationButton.addClass("visible");
	}
	//

	function hideConfirmationButton() {
		UI.ConfirmationButton.removeClass("visible");
	}
	//

	async function postData(url, data) {
		return fetch(url, {
			method: "POST",
			headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
			body: JSON.stringify(data)
		});
	}
	//
</script>
<style type="text/css">
	.uploadHeader { }
	.uploadHeader .uploadItem { display: block; max-width: none; }
	.uploadHeader .ratingSelector { display: block; width: 100%; height: 30px; margin-bottom: 5px; cursor: pointer; }
	.uploadHeader .uploadBox { display: flex; flex-wrap: wrap; align-items: center; margin-bottom: 5px; }
	.uploadHeader .uploadBox .mainFileUpload { flex: 33% 1 1; padding: 4px 5px; cursor: pointer; background-color: #EEE; }
	.uploadHeader .uploadBox .mainFileUpload:hover, .uploadHeader .uploadBox .mainFileUpload:focus { background-color: #DDD; }
	.uploadHeader .uploadBox .processButton { flex: 200px 0 0; height: 30px; }
	.uploadHeader .status { padding: 4px 5px; }

	.buttons { text-align: right; }
	.buttons .confirmationButton { padding: 5px 10px; }
	.buttons .confirmationButton:not(.visible) { display: none; }
</style>

<h2>Upload RMTL Data</h2>

<div class="uploadHeader">
	<select class="uploadItem ratingSelector">
		<option value="" disabled="disabled" selected="selected">Select a Rating...</option>
		@foreach( var rating in allRatings )
		{
			<option value="@rating.RowId.ToString()">@rating.CodedNotation - @rating.Name</option>
		}
	</select>
	<div class="uploadBox">
		<input class="uploadItem mainFileUpload" type="file" />
		<button class="uploadItem processButton" data-action="process">Process</button>
	</div>
	<div class="uploadItem status"></div>
</div>
<div class="uploadSummary"></div>
<div class="confirmationSummary"></div>
<div class="buttons">
	<button class="confirmationButton">Confirm All Changes and Update the Source Data in the Database</button>
</div>