@using Services;
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Upload V3";
	var allRatings = RatingServices.GetAll().OrderByDescending( m => m.CodedNotation.ToLower() == "all" ).ToList();
}

<script type="text/javascript">
	//Core stuff
	var UI = {};
	var Static = {
		CharacterMap: [
			{ UTF8: '""', Match: ['“', '”', '\u201c', '\u201d', '\x93', '\x94'] },
			{ UTF8: "'", Match: ['ʻ', 'ʼ', 'ʽ', '`', '´', '‘', '’', '\u2018', '\u2019', '\u00b4', '\u0060', '\x91', '\x92'] },
			{ UTF8: "-", Match: ['–', '—', '·', '\u2013', '\u2014', '\x95', '\x96', '\x97'] }
		]
	};
	var Manager = {};

	$(document).ready(function () {
		setupUI();
		setupManager();
		setupTabs();
	});
	//

	function setupUI() {
		UI.InputBox = $(".inputBox");
		UI.RatingSelector = $("[data-property='rating']");
		UI.FileSelector = $("[data-property='file']");
		UI.ProcessDataButton = $("[data-action='processData']");
		UI.ProcessingBox = $(".processingBox");
		UI.StatusBox = $(".statusBox");
		UI.StatusText = $(".status");
		UI.StatusSpinner = $(".statusSpinner");
		UI.ProgressBarBox = $(".progressBarBox");
		UI.ProgressBar = $(".progressBar");
		UI.ProgressBarText = $(".progressBarText");
		UI.ResultsBox = $(".resultsBox");
		UI.SummaryBox = $(".summaryBox");
		UI.DuplicatesBox = $(".duplicatesBox");
		UI.NewItemsLists = $(".newItemsList");
		UI.AdditionsLists = $(".additionsList");
		UI.ConfirmChangesButton = $("[data-action='confirmChanges']");
		UI.FixErrorsMessage = $(".fixErrorsMessage");

		setStatus("Please select a Rating and a CSV File.");
		setProgress("", 0);
		UI.ProcessDataButton.on("click", function () {
			processFileData();
		});
		UI.ConfirmChangesButton.on("click", function () {
			confirmChanges();
		});
		UI.ConfirmChangesButton.hide();
		UI.FixErrorsMessage.hide();
	}
	//

	function setupManager() {
		Manager.RawCSV = "";
		Manager.Rows = [];
		Manager.Reader = new FileReader();

		Manager.getFileHandle = function () {
			return UI.FileSelector[0].files?.[0];
		}

		Manager.readFile = function (afterRead) {
			Manager.Reader.onload = function () {
				console.log("Read File Contents:", Manager.Reader.result);
				afterRead?.(Manager.Reader.result);
			}
			Manager.Reader.readAsBinaryString(Manager.getFileHandle());
		}
	}
	//

	function setStatus(text, showSpinner) {
		UI.StatusText.html(text);
		showSpinner ? UI.StatusSpinner.show() : UI.StatusSpinner.hide();
	}
	//

	function setProgress(text, percent) {
		UI.ProgressBarText.html(text);
		UI.ProgressBar.css("width", percent + "%");
	}
	//

	function setupTabs() {
		$(".tabBox").not(".tabBoxSetup").each(function () {
			var box = $(this);
			var buttonsBox = box.find("> .tabButtons");
			var tabs = box.find("> .tabList > .tab");
			box.addClass("tabBoxSetup");
			tabs.each(function () {
				var tab = $(this);
				var header = tab.find("> .tabHeader");
				var button = $("<button class=\"tabButton\">" + header.text() + "</button>").appendTo(buttonsBox);
				button.on("click", function () {
					tabs.removeClass("selected").filter(tab).addClass("selected");
					buttonsBox.find("button").removeClass("selected").filter(button).addClass("selected");
				});
			});
			buttonsBox.find("button").first().trigger("click");
		});
	}
	//

</script>
<script type="text/javascript">
	//File processing stuff
	function processFileData() {
		//Validate initial data
		if (!UI.RatingSelector.val()) {
			alert("Please select a rating.");
			return;
		}

		var fileHandle = Manager.getFileHandle();
		if (!fileHandle) {
			alert("Please select a file to continue.");
			return;
		}

		if (fileHandle.size >= 5242880) { //5MB
			if (!confirm("Warning: The file you have selected is very large (about " + Math.round(fileHandle.size / (1024 * 1024)) + "MB).\n\nPlease double-check the contents of the file to ensure no unintended data is included.\n\nIf this data is correct, click OK to continue.")) {
				return;
			}
		}

		//Disable buttons
		disableButtons();

		//Disable confirmation
		UI.ConfirmChangesButton.hide();
		UI.FixErrorsMessage.hide();

		//Read the contents
		Manager.readFile(function (rawData) {
			//Validate the contents
			Manager.RawCSV = rawData.trim();
			if (Manager.RawCSV.split("\n").length > 50000) {
				if (!confirm("Warning: The spreadsheet contains over 50,000 rows.\n\nThe system will attempt to skip any empty rows, but it is better to remove them before uploading.\n\nIf this data is correct, click OK to continue.")) {
					return;
				}
			}

			//Process the contents
			UI.SummaryBox.html("");
			convertRawCSVToCSVJSON();
			mapCSVJSONToUploadableRow();
			processMappedRows();
		});
	}
	//

	function convertRawCSVToCSVJSON() {
		//Replace non-UTF-8 special characters with their UTF-8 equivalents
		Manager.UTF8CSV = Manager.RawCSV;
		Static.CharacterMap.forEach(map => {
			map.Match.forEach(badCharacter => {
				Manager.UTF8CSV = Manager.UTF8CSV.replace(new RegExp(badCharacter, "g"), map.UTF8);
			});
		});
		console.log("UTF-8 Replacements:", Manager.UTF8CSV);

		//Convert the CSV into JSON rows
		Manager.CSVText = Manager.UTF8CSV.replace(/\r\n/g, "\n").replace(/""/g, "<INSERTQUOTE>");
		var rows = [];
		var currentRow = [];
		var currentCell = [];
		var isInQuotes = false;

		//Process each character
		Manager.CSVText.split("").forEach(function (character) {
			if (character == '"') {
				isInQuotes = !isInQuotes;
			}
			else if (isInQuotes) {
				currentCell.push(character);
			}
			else if (character == ",") {
				currentRow.push(joinCSVCellData(currentCell));
				currentCell = [];
			}
			else if (character == "\n") {
				currentRow.push(joinCSVCellData(currentCell));
				currentCell = [];
				rows.push(currentRow);
				currentRow = [];
			}
			else {
				currentCell.push(character);
			}
		});

		//Don't forget stragglers at the end
		currentRow.push(joinCSVCellData(currentCell));
		rows.push(currentRow);

		//Set Data
		if (rows[0].some(cell => cell.length == 0)) { //Discard the first row if not every column is filled out (e.g. "PART I", , , ..."PART 2", , ...)
			rows.shift(); 
		}
		Manager.CSVColumns = rows.shift(); //Set header row
		Manager.CSVRows = rows; //The remaining rows

		//Create flat JSON
		Manager.CSVJSON = [];
		Manager.CSVRows.forEach(row => {
			//Skip empty rows
			if (row.join("").trim().length > 0) {
				//Assemble row data
				var item = {};
				Manager.CSVColumns.forEach((column, index) => {
					item[column] = row[index];
				});
				Manager.CSVJSON.push(item);
			}
		});

		console.log("CSV Processed", Manager.CSVJSON);
	}
	//

	function joinCSVCellData(cell) {
		return cell.join("").replace(/<INSERTQUOTE>/g, '"').trim().replace(/^N\/A$/g, "");
	}
	//

	function mapCSVJSONToUploadableRow() {
		Manager.MappedRows = Manager.CSVJSON.map((row, index) => {
			return {
				Row_Index: index,
				Row_Identifier: row["Index #"], 
				Row_CodedNotation: [row["Unique Identifier"] || row["Unique ID"] || row["Index #"]].find(m => m && isNaN(m)) || "", //Find the Unique Identifier in one of these three columns, ignoring values that are purely numeric
				Rating_CodedNotation: row["Rating"],
				PayGradeType_CodedNotation: row["Rank"],
				Level_Name: row["Level (A/J/M)"], //Not used, seems to have changed to a single character and a column named "Level (A)" instead?
				BilletTitle_Name: row["Billet Title"],
				WorkRole_Name: row["Functional Area"],
				ReferenceResource_Name: row["Source"],
				ReferenceResource_PublicationDate: row["Date of Source"],
				Shared_ReferenceType: row["Work Element Type"],
				RatingTask_Description: row["Work Element (Task)"],
				RatingTask_ApplicabilityType_Name: row["Task Applicability"],
				RatingTask_TrainingGapType_Name: row["Formal Training Gap"],
				Course_CodedNotation: row["CIN"],
				Course_Name: row["Course Name"],
				Course_CourseType_Name: row["Course Type (A/C/G/F/T)"],
				Course_CurriculumControlAuthority_Name: row["Curriculum Control Authority (CCA)"],
				Course_LifeCycleControlDocumentType_CodedNotation: row["Life-Cycle Control Document"],
				TrainingTask_Description: row["CTTL/PPP/TCCD Statement"],
				Course_AssessmentMethodType_Name: row["Current Assessment Approach"],
				Note: row["Notes"], //TBD Part II Notes or leave as is

				Training_Solution_Type: row["Training Solution Type"],
				Cluster_Analysis_Title: row["Cluster Analysis Title"],
				Recommended_Modality: row["Recommended Modality"],
				Development_Specification: row["Development Specification"],
				Candidate_Platform: row["Candidate Platform"],
				CFM_Placement: row["CFM Placement"],
				Priority_Placement: row["Priority Placement"],
				Development_Ratio: row["Development Ratio"],
				Development_Time: row["Development Time (duration in hours)"],
				Cluster_Analysis_Notes: row["Part III Notes"],
			}
		});

		console.log("Mapped Rows", Manager.MappedRows);
	}
	//

	function processMappedRows() {
		//Setup the manager queue
		Manager.ActiveItem = null;
		Manager.FinishedQueue = [];
		Manager.LookupGraph = [];
		Manager.Requests = [];
		Manager.HasErrors = false;
		Manager.Confirmation = null;
		Manager.WaitingQueue = Manager.MappedRows.map(MappedRow => {
			return {
				Data: null,
				Error: null,
				MappedRow: MappedRow
			};
		});

		//Get total items and other metadata for the transactions
		Manager.TotalItems = Manager.WaitingQueue.length;
		Manager.TransactionGUID = crypto.randomUUID();
		Manager.RatingRowID = UI.RatingSelector.val();

		//Disable the Process Data button and process the rows
		UI.ProcessDataButton.prop("disabled", true);
		setStatus("Processing Rows...", true);
		processNextQueueItem();
	}
	//

	function processNextQueueItem() {
		//If there is an active item, store it in the finished queue
		Manager.ActiveItem && Manager.FinishedQueue.push(Manager.ActiveItem);

		//If there are more items to process, process the next item
		if (Manager.WaitingQueue.length > 0) {
			//Set the next item as the active item
			Manager.ActiveItem = Manager.WaitingQueue.shift();

			//Construct the request
			var requestData = {
				RatingRowID: Manager.RatingRowID,
				TransactionGUID: Manager.TransactionGUID,
				Row: Manager.ActiveItem.MappedRow
			};

			//Set progress and trigger the request
			setProgress("Processing " + (Manager.FinishedQueue.length + 1) + " of " + Manager.TotalItems, (((Manager.FinishedQueue.length + 1) / (Manager.TotalItems || 1)) * 100).toFixed(2));
			doPOSTRequest("@Url.Content("~/upload/processuploadeditem")", requestData, (response => {
				//Once the request is finished, store the response for later and process the next item
				if (response.Valid) {
					Manager.ActiveItem.Data = response.Data;
					updateManagerLookupGraph(response.Data, Manager.ActiveItem.MappedRow);
				}
				else {
					Manager.ActiveItem.Error = { Type: "ServerError", Status: response.Status, Response: response };
				}
				processNextQueueItem();
			}), (error => {
				//If there is an error, store the error for later and process the next item
				console.log("Server Error while processing row", JSON.parse(JSON.stringify(Manager.ActiveItem)));
				Manager.ActiveItem.Error = { Type: "HTTPError", Status: error.status, StatusText: error.statusText, RowIndex: Manager.ActiveItem.MappedRow.Row_Index, RowData: JSON.parse(JSON.stringify(Manager.ActiveItem.MappedRow)) };
				processNextQueueItem();
			}));
		}
		//If there are no more items to process, upload the raw CSV
		else {
			//Construct the request
			var requestData = {
				TransactionGUID: Manager.TransactionGUID,
				RatingRowID: Manager.RatingRowID,
				RawCSV: Manager.UTF8CSV
			};

			//Do the upload. Regardless of the result, handle the finished queue
			setProgress("Storing Raw CSV...", 100);
			doPOSTRequest("@Url.Content("~/upload/storerawcsv")", requestData, (response => {
				handleFinishedQueue();
			}), (error => {
				console.log("Error storing CSV", error);
				handleFinishedQueue();
			}));
		}
	}
	//

	function updateManagerLookupGraph(data, MappedRow) {
		data.ExistingItems.forEach(item => {
			item.Meta = {
				IsNew: false,
				Additions: [],
				TextChanges: []
			};
			appendLookupItem(item);
		});
		data.NewItems.forEach(item => {
			item.Meta = {
				IsNew: true,
				Additions: [],
				TextChanges: []
			};
			appendLookupItem(item);
		});
		data.Additions.forEach(addition => {
			lookupItem(addition.Subject, (item) => {
				if (item.Meta.IsNew) {
					item[addition.Predicate] = item[addition.Predicate] || [];
					item[addition.Predicate].push(addition.Object);
				}
				else {
					item.Meta.Additions.push(addition);
				}
			}, (error) => {
				console.log("Error looking up item for addition", { addition: addition, error: error });
			});
		});
		data.TextChanges.forEach(textChange => {
			lookupItem(textChange.Subject, (item) => {
				item.Meta.TextChanges = item.Meta.TextChanges || [];
				item.Meta.TextChanges.push(textChange);
				data.Warnings.push("Detected text change in " + item["@@type"] + " " + textChange.Predicate + " from \"" + item[textChange.Predicate] + "\" to \"" + textChange.ObjectText + "\".");
			}, (error) => {
				console.log("Error looking up item for text change", { textChange: textChange, error: error });
			})
		});
		data.RowItems.forEach(rowID => {
			lookupItem(rowID, (item) => {
				item.Meta = item.Meta || {};
				item.Meta.RowIndices = item.Meta.RowIndices || [];
				item.Meta.RowIndices.push(MappedRow.Row_Index);
			}, (error) => {
				console.log("Error looking up item for row match", { data: data, rowID: rowID, row: MappedRow, error: error });
			});
		});
	}
	//

	function handleFinishedQueue() {
		//Set status and progress, and reenable the process data button
		setStatus("Finished processing. Please review the summary below. If you are satisfied with the data, click the \"Confirm and Save Changes\" button to save the changes.");
		setProgress("Finished", 100);

		//Render the summary
		Manager.SummaryData = Manager.FinishedQueue;
		scanForUnintendedCharacters();
		scanForPotentialDuplicates();
		renderSummary();

		//Enable buttons
		enableButtons();

		//Enable change confirmation if there are no errors
		if (Manager.HasErrors) {
			UI.ConfirmChangesButton.hide();
			UI.FixErrorsMessage.show();
			return;
		}
		else {
			UI.ConfirmChangesButton.show();
			UI.FixErrorsMessage.hide();
		}
	}
	//

	function scanForUnintendedCharacters() {
		Manager.SummaryData.forEach(Row => {
			Row.Data?.NewItems?.forEach(Item => {
				["Name", "Description", "CodedNotation"].filter(property => Item[property]).forEach(property => {
					findUnintendedCharacter(Item, property, Row.Data.Warnings, "  ", "Detected double spaces");
					findUnintendedCharacter(Item, property, Row.Data.Warnings, "\t", "Detected tab character");
					findUnintendedCharacter(Item, property, Row.Data.Warnings, "\n", "Detected line break");
				})
			});
		});
	}
	//

	function findUnintendedCharacter(item, property, warnings, text, errorPrefix) {
		if (item[property]?.includes(text)) {
			warnings?.push(errorPrefix + " in " + item["@@type"] + " " + property + ": \"<span class=\"textError\">" + item[property].replace(new RegExp(text, "g"), "<span class=\"highlight\">" + text + "</span>") + "</span>\"");
		}
	}
	//

	function scanForPotentialDuplicates() {
		//Reset Potential Duplicates array and get all items
		Manager.PotentialDuplicates = [];
		var allItems = Manager.SummaryData.filter(row => row.Data).flatMap(m => m.Data.NewItems.concat(m.Data.ExistingItems));

		//Scan for duplicates for each type based on the given properties
		scanForDuplicateItems(allItems, "BilletTitle", [ "Name" ]);
		scanForDuplicateItems(allItems, "WorkRole", [ "Name" ]);
		scanForDuplicateItems(allItems, "ReferenceResource", [ "Name", "PublicationDate", "ReferenceType" ]);
		scanForDuplicateItems(allItems, "TrainingTask", [ "Description" ]);
		scanForDuplicateItems(allItems, "Course", [ "Name", "CodedNotation" ]);
		scanForDuplicateItems(allItems, "RatingTask", [ "Description" ]);
	}
	//

	function scanForDuplicateItems(allItems, type, properties) {
		//Get all items of the specified type and construct an object that tracks that item + the property/column pairs and other useful data
		var items = allItems.filter(m => m["@@type"] == type).map(item => {
			//Construct the object
			var Matchable = {
				Properties: properties,
				Data: item,
				Test: {}
			};

			//Construct a test object to make match checking faster/easier
			properties.forEach(property => {
				Matchable.Test[property] = getBasicString(item[property]);
			});

			//Cheat by comparing one big heavily normalized string instead of multiple properties
			Matchable.Match = JSON.stringify(Matchable.Test);

			//Return the matchable object
			return Matchable;
		});

		//For each item in the list of all items for this type...
		while (items.length > 0) {
			//Take the first item out of the list
			var current = items.shift();

			//Find other items that match it
			var matches = items.filter(item => item.Match == current.Match);

			//If there are any matches...
			if (matches.length > 0) {
				//Construct an object that tracks the duplicate set
				Manager.PotentialDuplicates.push({
					Type: type,
					Items: [current].concat(matches),
					RowIndices: (current.Data.Meta.RowIndices || []).concat(matches.flatMap(m => m.Data.Meta.RowIndices || []))
				});
			}

			//Remove those matches from the list of items so they don't appear twice
			items = items.filter(m => !matches.includes(m));
		}
	}
	//

	function getBasicString(value) {
		value = !value ? "" : Array.isArray(value) ? value.sort().join("|") : value;
		return value.toString().toLowerCase().replace(/[^a-z0-9 ]/g, " ").replace(/ +/g, " ").trim();
	}
	//

	function renderSummary() {
		console.log("Rendering Summary (Check Manager.SummaryData for details)", Manager.SummaryData.map(m => m.Data));

		var validRows = Manager.SummaryData.filter(row => row.Data);
		var serverErrorRows = Manager.SummaryData.filter(row => row.Error);
		var processingErrorRows = validRows.filter(row => row.Data.Errors.length > 0);
		var newItems = validRows.flatMap(row => row.Data.NewItems);
		var existingItems = validRows.flatMap(row => row.Data.ExistingItems);
		var allItems = newItems.concat(existingItems);
		var existingItemsWithAdditions = existingItems.filter(item => item.Meta.IsNew == false && item.Meta.Additions.length > 0);
		var duplicateItems = Manager.PotentialDuplicates.flatMap(m => m.Items).flatMap(m => m.Data);
		var textChangeItems = existingItems.filter(item => item.Meta.TextChanges?.length > 0);
		Manager.HasErrors = serverErrorRows.length > 0 || processingErrorRows.length > 0;

		//Summary Tab
		//Table
		UI.SummaryBox.html("");
		var summaryTable = $("<table class=\"summaryTable\"><thead></thead><tbody></tbody></table>").appendTo(UI.SummaryBox);
		summaryTable.find("thead").append(
			tableRow(["Total Rows", "Rows with Server Errors", "Rows with Processing Errors"], "<th>", "</th>")
		);
		summaryTable.find("tbody").append(
			tableRow([Manager.SummaryData.length, serverErrorRows.length, processingErrorRows.length])
		);

		var breakdownTable = $("<table class=\"summaryTable\"><thead></thead><tbody></tbody></table>").appendTo(UI.SummaryBox);
		breakdownTable.find("thead").append(
			tableRow(["Type", "Total Items", "Potential Duplicates", "New Items", "Existing Items", "Existing Items with Text Changes", "Existing Items with Additions"], "<th>", "</th>")
		);
		breakdownTable.find("tbody").append(
			tableRow(["All", allItems.length, duplicateItems.length, newItems.length, existingItems.length, textChangeItems.length, existingItemsWithAdditions.length]) +
			breakdownRow("Billet Title", "BilletTitle") +
			breakdownRow("Functional Area", "WorkRole") +
			breakdownRow("Rating Task", "RatingTask") +
			breakdownRow("Training Task", "TrainingTask") +
			breakdownRow("Course", "Course") +
			breakdownRow("Reference Resource", "ReferenceResource")
		);

		//Render Messages
		renderMessageSection(UI.SummaryBox, "Server Errors", "Errors that caused processing a row to stop unexpectedly", serverErrorRows.map(m => messageWithHeaderAndList("Error on Row " + getRowNumber(m.MappedRow.Row_Index) + ":", [m.Error?.status + " " + (m.Error?.statusText || "Error")])).join(""));
		renderMessageSection(UI.SummaryBox, "Processing Errors", "Errors encountered while processing the data", processingErrorRows.map(m => messageWithHeaderAndList("Error(s) on Row " + getRowNumber(m.MappedRow.Row_Index) + ":", m.Data.Errors)).join(""));
		renderMessageSection(UI.SummaryBox, "Warnings", "Issues detected while processing the data", validRows.filter(m => m.Data.Warnings.length > 0).map(m => messageWithHeaderAndList("Warning(s) on Row " + getRowNumber(m.MappedRow.Row_Index) + ":", m.Data.Warnings)).join(""));
		renderMessageSection(UI.SummaryBox, "Messages", "Miscellaneous messages", validRows.filter(m => m.Data.Message?.length > 0).map(m => messageWithHeaderAndList("Message on Row " + getRowNumber(m.MappedRow.Row_Index) + ":", [m.Data.Message])).join(""));

		//Render Potential Duplicates
		renderAllDuplicateSets();

		//Render New Items
		renderClassAndPropertySets(renderItemsList, UI.NewItemsLists, newItems);

		//Render Additions to Existing Items
		renderClassAndPropertySets(renderAdditionsList, UI.AdditionsLists, existingItemsWithAdditions);

		//Helper Functions
		function breakdownRow(label, type) {
			return tableRow([
				label,
				filterByType(type, allItems).length,
				filterByType(type, duplicateItems).length,
				filterByType(type, newItems).length,
				filterByType(type, existingItems).length,
				filterByType(type, textChangeItems).length,
				filterByType(type, existingItemsWithAdditions).length
			]);
		}

	}
	//

	function tableRow(items, openingTag, closingTag) {
		return "<tr>" + items.map(item => (openingTag || "<td>") + item + (closingTag || "</td>")).join("") + "</tr>";
	}
	//

	function renderMessageSection(container, title, description, content) {
		if (content.length > 0) {
			container.append("<div class=\"messageSection\"><h4 class=\"messageSectionHeader\">" + title + "</h4><p class=\"messageSectionDescription\">" + description + "</p><div class=\"messageSectionContent\">" + content + "</div></div>");
		}
	}
	//

	function messageWithHeaderAndList(header, list) {
		return list.length == 0 ? "" : "<div class=\"messageSet\"><div class=\"messageSetHeader\">" + header + "</div><div class=\"messageSetList\">" + list.map(m => "<div class=\"messageSetListItem\">" + m + "</div>").join("") + "</div></div>";
	}
	//

	function renderAllDuplicateSets() {
		UI.DuplicatesBox.html("<div class=\"itemCount\">" + (Manager.PotentialDuplicates.length + " Sets of Potential Duplicates") + "</div>");
		renderDuplicateSets(UI.DuplicatesBox, "BilletTitle", "Billet Titles", Manager.PotentialDuplicates, ["Name"], ["HasRatingTask|Related Rating Tasks"]);
		renderDuplicateSets(UI.DuplicatesBox, "WorkRole", "Functional Areas", Manager.PotentialDuplicates, ["CodedNotation|Code", "Name"], []);
		renderDuplicateSets(UI.DuplicatesBox, "RatingTask", "Rating Tasks", Manager.PotentialDuplicates, ["CodedNotation|Code", "Description"], ["HasTrainingTaskList|Related Training Tasks", "PayGradeType|Rank", "ApplicabilityType|Applicability Type", "TrainingGapType|Training Gap Type", "HasReferenceResource|Source", "HasRating|Related Ratings", "HasBilletTitle|Related Billet Titles", "HasWorkRole|Related Functional Areas"]);
		renderDuplicateSets(UI.DuplicatesBox, "TrainingTask", "Training Tasks", Manager.PotentialDuplicates, ["Description"], ["AssessmentMethodType|Assessment Method Type"]);
		renderDuplicateSets(UI.DuplicatesBox, "Course", "Courses", Manager.PotentialDuplicates, ["CodedNotation|Course Identification Number", "Name"], ["HasTrainingTask|Related Training Tasks", "CourseType|Course Type", "LifeCycleControlDocumentType|Life-Cycle Control Document Type", "CurriculumControlAuthority|Curriculum Control Authority"]);
		renderDuplicateSets(UI.DuplicatesBox, "ReferenceResource", "Sources", Manager.PotentialDuplicates, ["Name", "PublicationDate|Publication Date"], ["ReferenceType|Reference Type"]);
	}
	//

	function renderDuplicateSets(container, type, label, allItems, textProperties, referenceProperties) {
		var duplicateSets = allItems.filter(m => m.Type == type);
		duplicateSets.forEach(duplicateSet => {
			var setBox = $("<div class=\"duplicateSet\"></div>").appendTo(container);
			var setBoxHeader = $("<div class=\"duplicateSetHeader\">" + duplicateSet.Items.length + " Duplicate " + label + "</div>").appendTo(setBox);
			//var rowList = $("<div class=\"duplicateRowList\">Found on rows: " + duplicateSet.RowIndices.map(m => getRowNumber(m)).join(", ") + "</div>").appendTo(setBox);
			duplicateSet.Items.forEach(item => {
				var itemBox = $("<div class=\"duplicateSetItem\"></div>").appendTo(setBox);
				var itemRowList = $("<div class=\"duplicateRowList\">Found on rows: " + item.Data.Meta.RowIndices.map(m => getRowNumber(m)).join(", ") + "</div>").appendTo(itemBox);
				var itemDataBox = $("<div class=\"duplicateItemData listItem\" data-type=\"" + type + "\"></div>").appendTo(itemBox);
				renderPropertySet(itemDataBox, item.Data, textProperties, referenceProperties);
			});
		});

	}
	//

	function renderClassAndPropertySets(renderFunction, htmlBoxes, itemsData) {
		htmlBoxes.html("");
		renderFunction(htmlBoxes, "BilletTitle", itemsData, ["Name"], ["HasRatingTask|Related Rating Tasks"]);
		renderFunction(htmlBoxes, "WorkRole", itemsData, ["CodedNotation|Code", "Name"], []);
		renderFunction(htmlBoxes, "RatingTask", itemsData, ["CodedNotation|Code", "Description"], ["HasTrainingTaskList|Related Training Tasks", "PayGradeType|Rank", "ApplicabilityType|Applicability Type", "TrainingGapType|Training Gap Type", "HasReferenceResource|Source", "HasRating|Related Ratings", "HasBilletTitle|Related Billet Titles", "HasWorkRole|Related Functional Areas"]);
		renderFunction(htmlBoxes, "TrainingTask", itemsData, ["Description"], ["AssessmentMethodType|Assessment Method Type"]);
		renderFunction(htmlBoxes, "Course", itemsData, ["CodedNotation|Course Identification Number", "Name"], ["HasTrainingTask|Related Training Tasks", "CourseType|Course Type", "LifeCycleControlDocumentType|Life-Cycle Control Document Type", "CurriculumControlAuthority|Curriculum Control Authority"]);
		renderFunction(htmlBoxes, "ReferenceResource", itemsData, ["Name", "PublicationDate|Publication Date"], ["ReferenceType|Reference Type"]);
	}
	//

	function filterByType(type, items) {
		return items.filter(m => m["@@type"] == type);
	}
	//

	function renderItemsList(containerList, type, allItems, textProperties, referenceProperties) {
		renderListItems(containerList, type, allItems, (box, item) => {
			renderPropertySet(box, item, textProperties, referenceProperties);
		}, "newItem");
	}
	//

	function renderAdditionsList(containerList, type, allItems, textProperties, referenceProperties) {
		renderListItems(containerList, type, allItems, (box, item) => {
			//Build a new object so as not to disturb the existing one
			var temp = {};
			textProperties.forEach(property => {
				var propertyName = property.split("|")[0];
				item[propertyName] && (temp[propertyName] = item[propertyName]);
			});
			referenceProperties.forEach(property => {
				var propertyName = property.split("|")[0];
				var additions = item.Meta.Additions.filter(m => m.Predicate == propertyName).map(m => m.Object);
				additions.length > 0 && (temp[propertyName] = additions);
			})
			renderPropertySet(box, temp, textProperties, referenceProperties);
		}, "additionsItem");
	}
	//

	function renderListItems(containerList, type, allItems, innerRenderMethod, cssClass) {
		var container = containerList.filter("[data-type='" + type + "']");
		var items = filterByType(type, allItems);
		container.html("<div class=\"itemCount\">" + (items.length + " Total Items") + "</div>");
		items.forEach(item => {
			var box = $("<div class=\"listItem " + cssClass + "\" data-type=\"" + type + "\"><div class=\"spinner\"></div></div>").appendTo(container);
			setTimeout(function () {
				box.html("");
				innerRenderMethod(box, item);
			}, 0);
		});
	}
	//

	function renderPropertySet(box, item, textProperties, referenceProperties) {
		var wrapper = $("<div class=\"propertySet textProperties\"></div>").appendTo(box);
		textProperties.forEach(property => {
			renderProperty(wrapper, property, item, renderTextProperty);
		});
		var wrapper = $("<div class=\"propertySet referenceProperties\"></div>").appendTo(box);
		referenceProperties.forEach(property => {
			renderProperty(wrapper, property, item, renderReferenceProperty, true);
		});
	}
	//

	function renderProperty(box, property, item, renderMethod, showCount) {
		var propertyName = property.split("|")[0];
		var propertyLabel = property.split("|")[1] ?? propertyName;
		if (item[propertyName]) {
			var container = $("<div class=\"property\" data-property=\"" + propertyName + "\"></div>").appendTo(box);
			var label = $("<div class=\"propertyLabel\">" + propertyLabel + (showCount && Array.isArray(item[propertyName]) ? " (" + item[propertyName].length + " Items)" : "") + "</div>").appendTo(container);
			var content = $("<div class=\"propertyContent\"></div>").appendTo(container);
			renderMethod(content, item[propertyName]);
		}
	}
	//

	function renderTextProperty(box, value) {
		box.html(value);
	}
	//

	function renderReferenceProperty(box, value) {
		var valueList = Array.isArray(value) ? value : [value];
		valueList.forEach(valueItem => {
			var itemBox = $("<div class=\"reference\" data-reference=\"" + valueItem + "\">" + valueList.length + " Items... <div class=\"spinner\"></div></div>").appendTo(box);
			lookupItem(valueItem, (data) => {
				itemBox.html("<div class=\"referenceText\">" + (data.Name || data.Description || data.CodedNotation) + "</div>");
			}, (error) => {
				itemBox.html("Error: " + error);
			});
		})
	}
	//

	//Lookup an item in the Manager's cache, or in the summary on the server
	function lookupItem(rowID, success, error) {
		//Find the Lookup object if it exists
		var match = Manager.LookupGraph.filter(m => m.RowId == rowID)[0];
		if (match) {
			success(match);
		}
		//Otherwise, ask the server
		else {
			//If there's already a pending request for this data, append the success and error handlers to that request
			var existingRequest = Manager.Requests.filter(m => m.TargetRowID == rowID)[0];
			if (existingRequest != null) {
				existingRequest.SuccessListeners.push(success);
				existingRequest.ErrorListeners.push(error);
				existingRequest.handleListeners(); //Ensures no handlers get missed
			}
			//Otherwise, create a new request and process it
			else {
				//Create the request
				var Request = {
					TargetRowID: rowID,
					Data: null,
					Error: null,
					SuccessListeners: [success],
					ErrorListeners: [error]
				};
				Manager.Requests.push(Request);

				//Handlers for when the data/error is loaded
				Request.handleListeners = function () {
					if (Request.Data) {
						appendLookupItem(Request.Data);
						while (Request.SuccessListeners.length > 0) {
							Request.SuccessListeners.pop()(Request.Data);
						}
					}
					else if (Request.Error) {
						appendLookupItem({ RowId: rowID, Name: "Error", Description: "Error", Meta: { Error: Request.Error } });
						while (Request.ErrorListeners.length > 0) {
							Request.ErrorListeners.pop()(Request.Error);
						}
					}
					//No "else" because nothing should happen if neither Data nor Error are present yet
				};

				//Perform the lookup and process the handlers once a response is received
				doGETRequest("@Url.Content( "~/upload/lookupgraphitem" )?transactionGUID=" + Manager.TransactionGUID + "&itemRowID=" + rowID, (response) => {
					Request.Data = response.Valid ? response.Data : {
						RowId: rowID, Name: "Error/Not Found (Row ID " + rowID + ")", Description: "Data not found (Row ID " + rowID + ")", Meta: { Error: "Data not found (Row ID " + rowID + ")" } };
					Request.Error = response.Status;
					Request.handleListeners();
				}, (response) => {
					Request.Error = response;
					Request.handleListeners();
				});
			}
		}
	}
	//

	function appendLookupItem(data) {
		if (Manager.LookupGraph.filter(m => m.RowId == data.RowId).length == 0) {
			Manager.LookupGraph.push(data);
		}
		//
	}
	//

	function confirmChanges() {
		if (Manager.HasErrors) {
			alert("You must correct the errors listed on the Summary tab before you can save the changes.");
			return;
		}

		//Set status and disable buttons
		setStatus("Saving...", true);
		setProgress("", 100);
		disableButtons();

		doGETRequest("@Url.Content( "~/upload/confirmchangesv3?transactionGUID=" )" + Manager.TransactionGUID, (response) => {
			//Handle response
			if (response.Valid) {
				setStatus("Processing complete");
				setProgress("Finished", 100);
				Manager.Confirmation = response.Data;
				UI.ConfirmChangesButton.hide();
				UI.FixErrorsMessage.hide();
				renderConfirmation();
			}
			else {
				alert("There was an error processing the confirmation: " + response.Status.join("\n"));
			}

			//Enable buttons
			enableButtons();
		}, (error) => {
			//Handle error
			alert("There was an error processing the confirmation: " + error);
			setStatus("There was an error processing the confirmation: " + error);
			console.log("Unable to save changes", error);

			//Enable buttons
			enableButtons();
		});
	}
	//

	function renderConfirmation() {
		console.log("Rendering Confirmation", Manager.Confirmation);

		UI.SummaryBox.html("");
		renderMessageSection(UI.SummaryBox, "Errors", "Errors that occurred while saving changes", renderConfirmationMessageList(Manager.Confirmation.Messages.Error));
		renderMessageSection(UI.SummaryBox, "Warnings", "Warnings that were raised while saving changes", renderConfirmationMessageList(Manager.Confirmation.Messages.Warning));
		renderMessageSection(UI.SummaryBox, "Potential Duplicates", "Potential duplicates detected while saving changes", renderConfirmationMessageList(Manager.Confirmation.Messages.Duplicate));
		renderMessageSection(UI.SummaryBox, "Created Items", "Items created while saving changes", renderConfirmationMessageList(Manager.Confirmation.Messages.Create));
		renderMessageSection(UI.SummaryBox, "Deleted Items", "Items deleted while saving changes", renderConfirmationMessageList(Manager.Confirmation.Messages.Delete));
		renderMessageSection(UI.SummaryBox, "References Added", "References added to existing items while saving changes", renderConfirmationMessageList(Manager.Confirmation.Messages.AddItem));
		renderMessageSection(UI.SummaryBox, "References Removed", "References removed from existing items while saving changes", renderConfirmationMessageList(Manager.Confirmation.Messages.RemoveItem));
		renderMessageSection(UI.SummaryBox, "Notes", "General notes generated while saving changes", renderConfirmationMessageList(Manager.Confirmation.Messages.Note));

		//Let everything render (some of it is async), then alert the user
		setTimeout(function () {
			alert("Changes have been saved. Please review the summary for details.");
		}, 500);
	}
	//

	function renderConfirmationMessageList(list) {
		return list?.length == 0 ? "" : list.map(m => "<div class=\"confirmationMessage\">" + m + "</div>").join("");
	}
	//

	function disableButtons() {
		UI.FileSelector.prop("disabled", true);
		UI.ProcessDataButton.prop("disabled", true);
		UI.ConfirmChangesButton.prop("disabled", true);
	}
	//

	function enableButtons() {
		UI.FileSelector.prop("disabled", false);
		UI.ProcessDataButton.prop("disabled", false);
		UI.ConfirmChangesButton.prop("disabled", false);
	}

	function getRowNumber(rowIndex) {
		return rowIndex + 3; //Account for 0-based indexing and having two header rows
	}

	//Generic GET Request
	function doGETRequest(url, success, error) {
		handleAJAX(url, success, error);
	};
	//

	//Generic POST Request
	function doPOSTRequest(url, data, success, error) {
		handleAJAX(url, success, error, {
			method: "POST",
			headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
			body: JSON.stringify(data)
		});
	};
	//

	//Generic AJAX Request
	function handleAJAX(url, success, error, params) {
		fetch(url, params)
			.then(response => {
				if (response.ok) {
					return response.text();
				}
				else {
					throw response;
				}
			})
			.then(text => {
				var result = JSON.parse(text);
				success?.(result);
			})
			.catch(response => {
				console.log("Error", response);
				error?.(response);
			});
	};
	//
</script>
<style type="text/css">
	html body .container { width: 98vw; }
	select, input[type='file'], button { display: block; width: 100%; height: 30px; max-width: none; cursor: pointer; }
	.spinner { display: inline-block; box-shadow: inset 4px 0 0 5px; border-radius: 50%; height: 20px; width: 20px; animation: spin 1s linear infinite; }
	@@keyframes spin { 100% { transform: rotate(360deg); } }
	table { min-width: 900px; }

	.section { margin-bottom: 10px; }
	.inputBox .fileBox { display: flex; background-color: #EEE; margin-top: 5px; }
	.inputBox .fileBox input[type='file'] { flex: 1 1 auto; padding: 4px 5px; }
	.inputBox .fileBox input[type='file']:hover, .inputBox .fileBox input[type='file']:focus { cursor: pointer; background-color: rgba(0,0,0,0.1); }
	.inputBox .fileBox button { flex: 200px 0 0; }

	.processingBox .statusBox { display: flex; align-items: center; padding: 0 10px; margin-bottom: 5px; }
	.processingBox .statusBox .status { margin-right: 10px; }
	.processingBox .progressBarBox { position: relative; background-color: #EEE; padding: 1px; height: 30px; }
	.processingBox .progressBar { background-color: #8F9; height: 28px; width: 0%; }
	.processingBox .progressBarText { position: absolute; top: 0; left: 0; padding: 5px 10px; }

	.tabBox .tabButtons { display: flex; margin-bottom: 10px; }
	.tabBox .tabButtons button { flex: 0 0 200px; }
	.tabBox .tabButtons button.selected { background-color: #555; color: #FFF; }
	.tabBox .tabList .tab { }
	.tabBox .tabList .tab:not(.selected) { display: none; }
	.tabBox .tabList .tab .tabHeader {  }

	.summaryTable { border: 1px solid #555; margin-bottom: 10px; }
	.summaryTable th { border: 1px solid #CCC; padding: 5px 10px; background-color: #DDD; text-align: center; }
	.summaryTable td { border: 1px solid #CCC; padding: 5px 10px; text-align: center; }

	.messageSection { padding: 5px; margin-bottom: 10px; }
	.messageSection .messageSectionHeader { margin-bottom: 0; }
	.messageSection .messageSectionContent { padding: 0 10px; }
	.messageSection .messageSectionContent .messageSet { margin-bottom: 5px; }
	.messageSection .messageSectionContent .messageSet .messageSetHeader { font-weight: bold; }
	.messageSection .messageSectionContent .messageSet .messageSetList { padding: 0 10px; }
	.messageSection .textError { white-space: pre-wrap; }
	.messageSection .highlight { background-color: #FF0; }

	.duplicateSet { padding: 5px 10px; border-top: 1px solid #CCC; }
	.duplicateSet .duplicateSetHeader { font-weight: bold; }
	.duplicateSet .duplicateSetItem { border-left: 5px solid #CCC; padding: 0 5px; margin: 5px 0 0 20px; }

	.listItem { padding: 5px; border-top: 1px solid #CCC; }
	.listItem > .propertySet { display: grid; gap: 10px 20px; grid-template-columns: repeat(auto-fill, 500px); }
	.listItem[data-type='BilletTitle'] > .propertySet { grid-template-columns: auto; }
	.listItem .propertySet:empty { display: none; }
	.listItem .propertySet .property { padding: 5px; }
	.listItem .propertySet.textProperties .property[data-property='Description'] { grid-column: span 2; }
	.listItem .propertySet .property .propertyLabel { font-size: 10px; opacity: 0.8; font-weight: bold; border-bottom: 1px dashed #CCC; }
	.listItem .propertySet .property .propertyContent { padding: 0 5px; font-size: 12px; }
	.listItem .propertySet .property .propertyContent .reference { margin: 10px 0; border-left: 5px solid #CCC; }
	.listItem .propertySet .property .propertyContent .reference .referenceText { padding: 0 5px; }

	.itemCount { padding: 10px 5px; font-weight: bold; }
	.fixErrorsMessage { padding: 10px 20px; margin: 5px; background-color: #FCC; }
</style>

<h1>Upload RMTL Data</h1>

<div class="section inputBox">
	<p>Select a Rating and choose a CSV (comma-separated values) file to upload. Do not include "All Sailor Tasks", since those have already been added to the system.</p>
	<select data-property="rating">
		<option value="" disabled="disabled" selected="selected">Select a Rating...</option>
		@foreach( var rating in allRatings )
		{
			<option value="@rating.RowId.ToString()">@rating.CodedNotation - @rating.Name</option>
		}
	</select>
	<div class="fileBox">
		<input type="file" data-property="file" />
		<button data-action="processData">Process Data</button>
	</div>
</div>
<div class="section processingBox">
	<div class="statusBox">
		<div class="status"></div>
		<div class="spinner statusSpinner"></div>
	</div>
	<div class="progressBarBox">
		<div class="progressBar"></div>
		<div class="progressBarText"></div>
	</div>
</div>
<div class="section resultsBox">
	<div class="tabBox">
		<div class="tabButtons"></div>
		<div class="tabList">
			<div class="tab">
				<h3 class="tabHeader">Summary</h3>
				<div class="tabContent summaryBox"></div>
				<div class="fixErrorsMessage">You must correct the errors listed above before you can save these changes.</div>
				<button class="confirmChangesButton" data-action="confirmChanges">Confirm and Save Changes</button>
			</div>
			<div class="tab">
				<h3 class="tabHeader">Potential Duplicates</h3>
				<div class="tabContent duplicatesBox"></div>
			</div>
			<div class="tab">
				<h3 class="tabHeader">New Items</h3>
				<div class="tabContent newItemsBox">
					<div class="tabBox">
						<div class="tabButtons"></div>
						<div class="tabList">
							<div class="tab">
								<h4 class="tabHeader">Billet Title</h4>
								<div class="tabContent newItemsList" data-type="BilletTitle"></div>
							</div>
							<div class="tab">
								<h4 class="tabHeader">Functional Area</h4>
								<div class="tabContent newItemsList" data-type="WorkRole"></div>
							</div>
							<div class="tab">
								<h4 class="tabHeader">Rating Task</h4>
								<div class="tabContent newItemsList" data-type="RatingTask"></div>
							</div>
							<div class="tab">
								<h4 class="tabHeader">Training Task</h4>
								<div class="tabContent newItemsList" data-type="TrainingTask"></div>
							</div>
							<div class="tab">
								<h4 class="tabHeader">Course</h4>
								<div class="tabContent newItemsList" data-type="Course"></div>
							</div>
							<div class="tab">
								<h4 class="tabHeader">Reference Resource</h4>
								<div class="tabContent newItemsList" data-type="ReferenceResource"></div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="tab">
				<h3 class="tabHeader">Additions to Existing Items</h3>
				<div class="tabContent additionsBox">
					<div class="tabBox">
						<div class="tabButtons"></div>
						<div class="tabList">
							<div class="tab">
								<h4 class="tabHeader">Billet Title</h4>
								<div class="tabContent additionsList" data-type="BilletTitle"></div>
							</div>
							<div class="tab">
								<h4 class="tabHeader">Functional Area</h4>
								<div class="tabContent additionsList" data-type="WorkRole"></div>
							</div>
							<div class="tab">
								<h4 class="tabHeader">Rating Task</h4>
								<div class="tabContent additionsList" data-type="RatingTask"></div>
							</div>
							<div class="tab">
								<h4 class="tabHeader">Training Task</h4>
								<div class="tabContent additionsList" data-type="TrainingTask"></div>
							</div>
							<div class="tab">
								<h4 class="tabHeader">Course</h4>
								<div class="tabContent additionsList" data-type="Course"></div>
							</div>
							<div class="tab">
								<h4 class="tabHeader">Reference Resource</h4>
								<div class="tabContent additionsList" data-type="ReferenceResource"></div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>