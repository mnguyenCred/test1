@using Services;
@using Newtonsoft.Json;
@using Models.Schema;
@{
	ViewBag.Title = "Upload V4";
	var allRatings = RatingServices.GetAll().OrderByDescending( m => m.CodedNotation.ToLower() == "all" ).ToList();
	ConceptSchemeMap = Factories.ConceptSchemeManager.GetConceptSchemeMap( true );
	var allOrganizations = Factories.OrganizationManager.GetAll();
	var allValidOrganizationValues = allOrganizations.Select( org => org.Name ) //Look for name
		.Concat( allOrganizations.Select( org => org.ShortName ) ) //Look for abbreviation
		.Concat( allOrganizations.Select( org => org.Name + " (" + org.ShortName + ")" ) ) //Look for concatenated form: "Name (Abbreviation)"
		.ToList();
}
@functions {
	public ConceptSchemeMap ConceptSchemeMap { get; set; }

	public string GetConceptValues( ConceptScheme scheme, bool includeName, bool includeCodedNotation, bool includeWorkElementType )
	{
		var values = new List<string>();

		if( scheme != null && scheme.Concepts != null && scheme.Concepts.Count() > 0 )
		{
			values = values.Concat( includeName ? scheme.Concepts.Select( m => m.Name ).ToList() : new List<string>() )
				.Concat( includeCodedNotation ? scheme.Concepts.Select( m => m.CodedNotation ).ToList() : new List<string>() )
				.Concat( includeWorkElementType ? scheme.Concepts.Select( m => m.WorkElementType ).ToList() : new List<string>() )
				.Where( value => !string.IsNullOrWhiteSpace( value ) )
				.Distinct()
				.ToList();
		}

		return JsonConvert.SerializeObject( values, Formatting.None );
	}
}

@Html.Partial( "~/Views/Help/_UploadV3.cshtml" )
@Html.Partial( "~/Views/Shared/_AJAXTools.cshtml" )

<script type="text/javascript">
	var UI = {};
	var Manager = {};
	var Static = {
		CharacterMap: [
			{ UTF8: '""', Match: ['“', '”', '\u201c', '\u201d', '\x93', '\x94'] },
			{ UTF8: "'", Match: ['ʻ', 'ʼ', 'ʽ', '`', '´', '‘', '’', '\u2018', '\u2019', '\u00b4', '\u0060', '\x91', '\x92'] },
			{ UTF8: "-", Match: ['–', '—', '·', '\u2013', '\u2014', '\x95', '\x96', '\x97'] }
		],
		ResourceTypes: [
			{
				Type: "Overall",
				Label: "Overall",
				TBoxModel: {
					Total: "Total"
				}
			},
			{
				Type: "BilletTitle",
				Label: "Billet Title",
				TBoxModel: {
					Name: "Name"
				},
				display: function (data) {
					return data.Name;
				}
			},
			{
				Type: "WorkRole",
				Label: "Functional Area",
				TBoxModel: {
					Name: "Name"
				},
				display: function (data) {
					return data.Name;
				}
			},
			{
				Type: "RatingTask",
				Label: "Rating Task",
				TBoxModel: {
					Description: "Description"
				},
				display: function (data) {
					return data.Description;
				}
			},
			{
				Type: "TrainingTask",
				Label: "Training Task",
				TBoxModel: {
					Description: "Description"
				},
				display: function (data) {
					return data.Description;
				}
			},
			{
				Type: "Course",
				Label: "Course",
				TBoxModel: {
					CodedNotation: "CIN",
					Name: "Name",
					CourseType: "Course Type"
				},
				display: function (data) {
					return data.CodedNotation + " - " + data.Name;
				}
			},
			{
				Type: "ReferenceResource",
				Label: "Reference Resource",
				TBoxModel: {
					Name: "Name",
					PublicationDate: "Publication Date"
				},
				display: function (data) {
					return data.Name + " (" + data.PublicationDate + ")";
				}
			},
			{
				Type: "ClusterAnalysis",
				Label: "Cluster Analysis",
				TBoxModel: {
					ClusterAnalysisTitle: "Name"
				},
				display: function (data) {
					return data.Name;
				}
			}
		]
	};
	var ColumnData = {
		"Unique Identifier": {},
		"Rating": {},
		"Rank": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.PayGradeCategory, false, true, false ) ) //CodedNotation
		},
		"Level (A/J/M)": {},
		"Billet Title": {},
		"Functional Area": {},
		"Source": {},
		"Date of Source": {},
		"Work Element Type": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.ReferenceResourceCategory, false, false, true ) ) //WorkElementType
		},
		"Work Element (Task)": {},
		"Task Applicability": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.TaskApplicabilityCategory, true, false, false ) ) //Name
		},
		"Formal Training Gap": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.TrainingGapCategory, true, false, false ) ) //Name
		},
		"CIN": {},
		"Course Name": {},
		"Course Type (A/C/G/F/T)": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.CourseCategory, true, false, false ) ), //Name
			SplitOn: [ ",", ";", "|" ]
		},
		"Curriculum Control Authority (CCA)": {
			Values: @Html.Raw( JsonConvert.SerializeObject( allValidOrganizationValues, Formatting.None ) )
		},
		"Life-Cycle Control Document": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.LifeCycleControlDocumentCategory, true, true, false ) ) //Name or CodedNotation
		},
		"CTTL/PPP/TCCD Statement": {},
		"Current Assessment Approach": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.CurrentAssessmentApproachCategory, true, false, false ) ), //Name
			SplitOn: [ ",", ";", "|" ]
		},
		"Training Solution Type": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.TrainingSolutionCategory, true, false, false ) ) //Name
		},
		"Cluster Analysis Title": {},
		"Recommended Modality": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.RecommendedModalityCategory, true, false, false ) ) //Name
		},
		"Development Specification": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.DevelopmentSpecificationCategory, true, false, false ) ) //Name
			//SplitOn: [ "/" ]
		},
		"Candidate Platform": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.CandidatePlatformCategory, false, true, false ) ), //CodedNotation
			SplitOn: [ "," ]
		},
		"CFM Placement": {},
		"Priority Placement": {},
		"Development Ratio": {
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.DevelopmentRatioCategory, true, false, false ) ), //Name
		},
		"Estimated Instructional Time": {},
		"Development Time (duration in hours)": {},
		"Notes": {}
	}

	$(document).ready(function() {
		setupUI();
		setupManager();
		refreshForUpload();
	});
	//

	//Setup the UI elements
	function setupUI() {
		//Setup Tabs
		UI.TabSets = {};
		UI.TabSetsList = [];
		$(".tabBox").each(function() {
			createTabBox($(this));
		});

		//Setup Progress Bars
		UI.StatusBars = {};
		UI.StatusBarsList = [];
		$(".statusBar").each(function () {
			var box = $(this);
			var StatusBar = {
				Box: box,
				Name: box.attr("data-name"),
				BarWrapper: $("<div class=\"progressBarWrapper\"></div>").appendTo(box),
				StatusBox: $("<div class=\"statusBox\"></div>").appendTo(box),
				Active: true,
				Value: 0,
				Max: 1,
				UnitText: "",
				OverrideLabel: "",
				Percentage: 0
			};
			StatusBar.OuterBar = $("<div class=\"progressBarOuter\"></div>").appendTo(StatusBar.BarWrapper);
			StatusBar.InnerBar = $("<div class=\"progressBarInner\"></div>").appendTo(StatusBar.OuterBar);
			StatusBar.Label = $("<div class=\"progressBarLabel\"></div>").appendTo(StatusBar.InnerBar);
			StatusBar.CancelButton = $("<button class=\"cancelButton\">Cancel</button>").appendTo(StatusBar.BarWrapper);
			UI.StatusBars[StatusBar.Name] = StatusBar;
			UI.StatusBarsList.push(StatusBar);
			StatusBar.CancelButton.on("click", function () {
				Manager.ContinueProcessing = false;
			});
			StatusBar.setValue = function (value, max, unitText, overrideLabel) {
				StatusBar.Value = value;
				StatusBar.Max = max;
				StatusBar.UnitText = unitText;
				StatusBar.OverrideLabel = overrideLabel;
				if (StatusBar.Active) {
					StatusBar.Active = false;
					setTimeout(function () { //Ignore update calls that happen too many times in too short a window
						StatusBar.Active = true;
						StatusBar.Percentage = Math.ceil((StatusBar.Value / (StatusBar.Max || 1)) * 100);
						StatusBar.Label.html(StatusBar.OverrideLabel || (StatusBar.Value + " of " + StatusBar.Max + " " + (StatusBar.UnitText || "")));
						StatusBar.InnerBar.css("width", StatusBar.Percentage + "%");
					}, 10);
				}
			};
			StatusBar.setStatus = function (text) {
				StatusBar.StatusBox.html(text);
			};
			StatusBar.setValue(0, 100, "", "Ready");
			StatusBar.setStatus("Ready");
		});

		//Table Boxes
		UI.TableBoxes = {};
		UI.TableBoxesList = [];
		$(".tableBox").each(function () {
			var box = $(this);
			var model = getModelFromAttributes(box.attr("data-columnKeys"), box.attr("data-columnLabels"));
			createTableBox(null, box.attr("data-name"), model, box);
		});

		//Stage buttons
		UI.StageButtons = {};
		UI.StageButtonsList = [];
		$(".stageButton").each(function () {
			var button = $(this);
			button.Action = button.attr("data-action");
			UI.StageButtons[button.Action] = button;
			UI.StageButtonsList.push(button);
		});
		UI.StageButtons.ProcessData.on("click", processData);
		UI.StageButtons.UploadData.on("click", uploadData);
		UI.StageButtons.SaveData.on("click", saveData);

		//Upload Box
		UI.RatingSelector = $("[data-property='RatingRowID']");
		UI.FileSelector = $("[data-property='CSVFile']");
		UI.SkipPart2CheckBox = $("[data-property='SkipPart2Checks']");
		UI.SkipPart3CheckBox = $("[data-property='SkipPart3Checks']");

		//Resource Sets Boxes
		$(".resourceSetsBox").each(function () {
			var box = $(this);
			var name = box.attr("data-name");
			var label = box.attr("data-label");
			var buttonsBox = $("<div class=\"tabButtons\"></div>").appendTo(box);
			var listBox = $("<div class=\"tabList\"></div>").appendTo(box);

			Static.ResourceTypes.filter(ResourceType => ResourceType.Type != "Overall").forEach(ResourceType => {
				var tabPanelBox = $("<div class=\"tabPanel\" data-name=\"" + name + "\"></div>").appendTo(listBox);
				var tabLabel = $("<h4 class=\"tabLabel\">" + ResourceType.Label + "</h4>").appendTo(tabPanelBox);
				var tableDiv = $("<div class=\"tableBox\" data-label=\"" + label + " - " + ResourceType.Label + "\" data-enablesave=\"true\"></div>").appendTo(tabPanelBox);
				var extraColumns = getModelFromAttributes(box.attr("data-extraColumnKeys"), box.attr("data-extraColumnLabels"));
				var tableBox = createTableBox(tabPanelBox, "ResourceSet_" + name + "_" + ResourceType.Type, { RowNumber: "Row #", ...ResourceType.TBoxModel, ...extraColumns }, tableDiv);
			});

			createTabBox(box);
		});

		//Helper function
		function getModelFromAttributes(columnAttribute, labelAttribute) {
			var columnKeys = columnAttribute.split("|");
			var columnLabels = labelAttribute.split("|");
			var model = {};
			columnKeys.filter(key => key).forEach((key, index) => {
				model[key] = columnLabels[index];
			});
			return model;
		}
	}
	//

	//Create a Tab Box
	function createTabBox(container, name) {
		var TabSet = {
			Box: container,
			Name: name || container.attr("data-name"),
			ButtonsBox: container.find("> .tabButtons"),
			TabsBox: container.find("> .tabList"),
			Tabs: {},
			TabsList: []
		};
		UI.TabSets[TabSet.Name] = TabSet;
		UI.TabSetsList.push(TabSet);
		TabSet.TabsBox.find("> .tabPanel").each(function() {
			var panel = $(this);
			var Tab = {
				Box: panel,
				Name: panel.attr("data-name"),
				Label: panel.find("> .tabLabel"),
				Button: $("<button></button>").appendTo(TabSet.ButtonsBox)
			};
			TabSet.Tabs[Tab.Name] = Tab;
			TabSet.TabsList.push(Tab);
			Tab.Button.html(Tab.Label.text());
			Tab.Button.on("click", function() {
				TabSet.showTab(Tab);
			});
		});
		TabSet.showTab = function (TargetTab) {
			TabSet.TabsList.forEach(OtherTab => {
				OtherTab.Box.removeClass("current");
				OtherTab.Button.removeClass("current greenButton");
			});
			TargetTab.Box.addClass("current");
			TargetTab.Button.addClass("current greenButton");
		};
		TabSet.showTab(TabSet.TabsList[0]);
	}

	//Create a Table Box
	function createTableBox(container, name, model, overrideBox) {
		var box = overrideBox || $("<div class=\"tableBox\"></div>").appendTo(container);
		var TBox = {
			Box: box,
			Name: name,
			Label: box.attr("data-label"),
			Top: $("<div class=\"tableBoxTop\"></div>").appendTo(box),
			Table: $("<table></table>").appendTo(box),
			HeaderKeys: [],
			HeaderLabels: [],
			Model: model || {},
			Data: [],
			EnableSave: box.attr("data-enablesave") == "true",
			SpecialRows: {}
		};
		TBox.Counter = $("<div class=\"tableBoxCounter\"></div>").appendTo(TBox.Top);
		TBox.LabelBox = $("<div class=\"tableBoxLabel\">" + TBox.Label + "</div>").appendTo(TBox.Top);
		TBox.THead = $("<thead></thead>").appendTo(TBox.Table);
		TBox.TBody = $("<tbody></tbody>").appendTo(TBox.Table);
		TBox.setupHeaders = function () {
			TBox.HeaderKeys = Object.keys(TBox.Model);
			TBox.HeaderLabels = TBox.HeaderKeys.map(key => TBox.Model[key]);
			TBox.THead.html("<tr>" + TBox.HeaderLabels.map(label => "<th>" + label + "</th>").join("") + "</tr>");
		}
		TBox.renderData = function (rowDataArray) {
			TBox.Data = rowDataArray || [];
			TBox.Rows = [];
			TBox.TBody.html("");
			TBox.Data.forEach(rowData => {
				TBox.appendRow(rowData);
			});
			TBox.refreshSaveButton();
		}
		TBox.appendRow = function (rowData) {
			TBox.Data.push(rowData);
			var row = $("<tr></tr>").appendTo(TBox.TBody);
			TBox.refreshRow(rowData, row);
			return { Data: rowData, Row: row };
		}
		TBox.updateRow = function (newData, specialRow) {
			TBox.Data[TBox.Data.indexOf(specialRow.Data)] = newData;
			specialRow.Data = newData;
			TBox.refreshRow(specialRow.Data, specialRow.Row);
		}
		TBox.refreshRow = function (rowData, row) {
			setTimeout(function () {
				row.html(TBox.HeaderKeys.map(key => "<td>" + rowData[key] + "</td>"));
				TBox.refreshSaveButton();
			}, 0);
		}
		TBox.setupSaveButton = function () {
			if (TBox.EnableSave) {
				TBox.SaveButton = $("<button class=\"blueButton tableBoxSaveButton\"></div>").appendTo(TBox.Top);
				TBox.SaveButton.on("click", function () {
					var csvRows = [TBox.HeaderLabels.join(",")];
					TBox.Data.forEach(rowData => {
						var row = [];
						TBox.HeaderKeys.forEach(key => {
							var value = (rowData[key] || "").toString().replace(/"/g, '""');
							row.push((value.includes("\n") || value.includes(",") || value.includes('"')) ? '"' + value + '"' : value);
						});
						csvRows.push(row.join(","));
					});
					var csv = csvRows.join("\n");
					var tempLink = $("<a></a>").appendTo(document.body);
					tempLink.attr("download", (Manager?.Config?.Rating?.CodedNotation || "Unknown Rating") + " " + TBox.Label + ".csv");
					tempLink.attr("href", URL.createObjectURL(new Blob([csv], { type: "text/csv" })));
					tempLink[0].click();
					tempLink.remove();
				});
				TBox.refreshSaveButton();
			}
		}
		TBox.refreshSaveButton = function () {
			TBox.SaveButton?.html("Save " + TBox.Data.length + " Items");
		}
		TBox.setupHeaders();
		TBox.setupSaveButton();
		UI.TableBoxes[TBox.Name] = TBox;
		UI.TableBoxesList.push(TBox);
		return TBox;
	}
	//

	//Setup Manager
	function setupManager() {
		Manager.FileReader = new FileReader();

		Manager.getFileHandle = function () {
			return UI.FileSelector[0].files?.[0];
		}

		Manager.readFile = function (afterRead) {
			Manager.FileReader.onload = function () {
				afterRead?.(Manager.FileReader.result);
			}
			Manager.FileReader.readAsBinaryString(Manager.getFileHandle());
		}

	}
	//

	//Refresh Upload Manager and UI
	function refreshForUpload() {
		UI.StatusBarsList.forEach(StatusBar => {
			StatusBar.setValue(0, 1, "", "Ready");
			StatusBar.setStatus("Ready");
		});
		UI.TableBoxesList.forEach(TableBox => {
			TableBox.renderData([]);
		});
		Manager.RawCSV = "";
		Manager.UTF8CSV = "";
		Manager.CSVText = "";
		Manager.ContinueProcessing = true;
		Manager.LookupGraph = [];
		Manager.NewItemsByType = {};
		Manager.ExistingItemsByType = {};
		Static.ResourceTypes.forEach(ResourceType => {
			Manager.NewItemsByType[ResourceType.Type] = [];
			Manager.ExistingItemsByType[ResourceType.Type] = [];
		});
	}
	//

</script>
<script type="text/javascript">
	//Process Data initially
	function processData() {
		//Clear old data
		refreshForUpload();

		//Validate configuration
		if (!UI.RatingSelector.val()) {
			alert("Please select a Rating.");
			return;
		}

		var fileHandle = Manager.getFileHandle();
		if (!fileHandle) {
			alert("Please select a file to continue.");
			return;
		}

		if (fileHandle.size > 5242880) { //5MB
			if (!confirm("Warning: The file you have selected is very large (about " + Math.round(fileHandle.size / (1024 * 1024)) + "MB).\n\nPlease double-check the contents of the file to ensure no unintended data is included.\n\nIf this data is correct, click OK to continue.")) {
				return;
			}
		}

		//Read UI
		Manager.Config = {
			Rating: {
				CodedNotation: UI.RatingSelector.find("option:selected").attr("data-codednotation"),
				RowID: UI.RatingSelector.val()
			},
			SkipPart2Checks: UI.SkipPart2CheckBox.prop("checked"),
			SkipPart3Checks: UI.SkipPart3CheckBox.prop("checked")
		};

		//Read the contents
		Manager.readFile(function (rawData) {
			//Setup the summary table
			UI.TableBoxes.PreProcessing_Summary.renderData([]);
			UI.TableBoxes.PreProcessing_Summary.SpecialRows.SummaryRow = UI.TableBoxes.PreProcessing_Summary.appendRow({ Total: 0, Errors: 0, Warnings: 0, AutoCorrections: 0 });

			//Validate the contents
			Manager.RawCSV = rawData.trim();
			if (Manager.RawCSV.split("\n").length > 50000) {
				if (!confirm("Warning: The spreadsheet contains over 50,000 rows.\n\nThe system will attempt to skip any empty rows, but it is better to remove them before uploading.\n\nIf this data is correct, click OK to continue.")) {
					return;
				}
			}

			//Replace bad characters
			Manager.UTF8CSV = Manager.RawCSV;
			Static.CharacterMap.forEach(map => {
				map.Match.forEach(badCharacter => {
					Manager.UTF8CSV = Manager.UTF8CSV.replace(new RegExp(badCharacter, "g"), map.UTF8);
				});
			});

			//Process the contents
			Manager.CSVText = Manager.UTF8CSV.replace(/\r\n/g, "\n").replace(/""/g, "<INSERTQUOTE>");
			var rows = [];
			var currentRow = [];
			var currentCell = [];
			var isInQuotes = false;

			//Process each character
			UI.TabSets.StageTabs.showTab(UI.TabSets.StageTabs.Tabs.PreProcessing);
			UI.StatusBars.PreProcessingProgress.setStatus("Reading CSV File...");
			UI.StatusBars.PreProcessingProgress.setValue(1, Manager.CSVText.length, "characters");
			Manager.CSVText.split("").forEach(function (character, index) {
				if (character == '"') {
					isInQuotes = !isInQuotes;
				}
				else if (isInQuotes) {
					currentCell.push(character);
				}
				else if (character == ",") {
					currentRow.push(joinCSVCellData(currentCell));
					currentCell = [];
				}
				else if (character == "\n") {
					currentRow.push(joinCSVCellData(currentCell));
					currentCell = [];
					rows.push(currentRow);
					currentRow = [];
				}
				else {
					currentCell.push(character);
				}

				//Track progress
				UI.StatusBars.PreProcessingProgress.setValue(index + 1, Manager.CSVText.length, "characters");
			});

			//Don't forget stragglers at the end
			currentRow.push(joinCSVCellData(currentCell));
			rows.push(currentRow);

			//Set Data
			if (rows[0].some(cell => cell.length == 0)) { //Discard the first row if not every column is filled out (e.g. "PART I", , , ..."PART 2", , ...)
				rows.shift();
			}
			Manager.CSVColumns = rows.shift(); //Set header row
			Manager.CSVRows = rows; //The remaining rows
			Manager.CSVJSON = []; //Clear out any existing CSVJSON

			//Scan to ensure all of the expected columns are present
			var missingColumns = Object.keys(ColumnData).filter(column => !Manager.CSVColumns.includes(column));
			if (missingColumns.length > 0) {
				alert("The following column(s) were not found in the spreadsheet. Column names must match exactly. Please double-check the data and try again:\n\n" + missingColumns.join("\n"));
				UI.StatusBars.PreProcessingProgress.setStatus("Found one or more errors.");
				missingColumns.forEach(column => {
					UI.TableBoxes.PreProcessing_Errors.appendRow({ RowNumber: "Header", Type: "Missing Column", Column: column, Message: "The following column was not found in the spreadsheet. Column names must match exactly. Please double-check the data and try again.", Value: column });
					updatePreProcessingSummaryTable();
				});
				return;
			}

			//Create flat JSON
			Manager.CSVRows = Manager.CSVRows.filter(row => row.join("").trim().length > 0); //Filter out empty rows and make this array useful for index-based comparisons later
			Manager.CSVRows.forEach((row, index) => {
				//Assemble row data
				var item = {
					RawIndex: index,
					RawRowText: row.join("").trim(),
					CompareText: row.join("").toLowerCase().replace(/[^a-z0-9 ]/g, " ").replace(/ +/g, " ").trim()
				};
				Manager.CSVColumns.forEach((column, index) => {
					item[column] = row[index];
				});
				Manager.CSVJSON.push(item);
			});

			//Pre-calculate the fuzzy match values for the various columns
			Object.keys(ColumnData).forEach(key => {
				if (ColumnData[key].Values) {
					ColumnData[key].FuzzyValues = ColumnData[key].Values.map(item => getStreamlinedValue(item));
				}
			});

			//Scan for pre-processing
			UI.StatusBars.PreProcessingProgress.setStatus("Pre-Processing...");
			UI.StatusBars.PreProcessingProgress.setValue(0, Manager.CSVJSON.length, "rows");
			scanRow(0, function () {
				//If there are any errors
				if (UI.TableBoxes.PreProcessing_Errors.Data.length > 0) {
					//TODO: Show/hide buttons
					UI.StatusBars.PreProcessingProgress.setStatus("Finished with " + UI.TableBoxes.PreProcessing_Errors.Data.length + " Errors.");

				}
				//Otherwise
				else {
					//TODO: Show/hide buttons. Consider whether or not the high level tabs are necessary
					UI.StatusBars.PreProcessingProgress.setStatus("Ready to Upload.");
				}
			}, function () { //On cancel...
				UI.StatusBars.PreProcessingProgress.setStatus("Canceled with " + UI.TableBoxes.PreProcessing_Errors.Data.length + " Errors, " + UI.TableBoxes.PreProcessing_Warnings.Data.length + " Warnings.");
				//TODO: Show/hide buttons
			});
		});

		//Helper function
		function joinCSVCellData(cell) {
			return cell.join("").replace(/<INSERTQUOTE>/g, '"').trim().replace(/^N\/A$/g, "");
		}

		//Helper function
		function updatePreProcessingSummaryTable() {
			UI.TableBoxes.PreProcessing_Summary.updateRow({
				Total: UI.StatusBars.PreProcessingProgress.Value,
				Errors: UI.TableBoxes.PreProcessing_Errors.Data.length,
				Warnings: UI.TableBoxes.PreProcessing_Warnings.Data.length,
				AutoCorrections: UI.TableBoxes.PreProcessing_AutoCorrections.Data.length
			}, UI.TableBoxes.PreProcessing_Summary.SpecialRows.SummaryRow);
		}

		//Helper function
		function getStreamlinedValue(value) {
			return value.toString().toLowerCase().replace(/[^a-z0-9]/g, "").trim();
		}

		//Helper function
		function scanRow(index, afterComplete, onCancel) {
			if (Manager.ContinueProcessing) {
				//Get the row, or finish
				if (Manager.CSVJSON.length > index) {
					//Reference the correct row, and account for the header rows
					var row = Manager.CSVJSON[index];
					var rowNumber = index + 3; //Account for heading rows and 0 based index

					//Validate rating matches selected rating
					if (row.Rating != Manager.Config.Rating.CodedNotation) {
						UI.TableBoxes.PreProcessing_Errors.appendRow({ RowNumber: rowNumber, Type: "Rating Mismatch", Column: "Rating", Message: "Rating code for this row (" + row.Rating + ") does not match selected Rating code (" + Manager.Config.Rating.CodedNotation + ")", Value: row.Rating });
					}

					//Validate that the rating task text isn't empty
					if (!row["Work Element (Task)"]?.trim()) {
						UI.TableBoxes.PreProcessing_Errors.appendRow({ RowNumber: rowNumber, Type: "Missing Rating Task", Column: "Work Element (Task)", Message: "Rating task for this row is empty or missing.", Value: "" });
					}

					//Scan for unintended whitespace and other characters
					Object.keys(ColumnData).forEach(column => {
						//Scan for whitespace
						checkWhitespace(column, "\t", "Tab");
						checkWhitespace(column, "\r\n", "Carriage Return/New Line");
						checkWhitespace(column, "\n", "New Line");
						checkWhitespace(column, "  ", "Double Space");

						//Scan for characters outside of the normal range
						row[column].split("").forEach((character, index) => {
							//10 = new line, <= 31 and >= 126 are outside the usual range of characters
							var code = row[column].charCodeAt(index);
							if (code != 10 && (code <= 31 || code >= 126)) {
								UI.TableBoxes.PreProcessing_Warnings.appendRow({ RowNumber: rowNumber, Type: "Unusual Character", Column: column, Message: "This column contains an unusual character (" + character + ") at approximately position " + (index + 1) });
							}
						})
					});
					function checkWhitespace(column, text, label) {
						[...row[column].matchAll(text)].forEach(match => {
							UI.TableBoxes.PreProcessing_Warnings.appendRow({ RowNumber: rowNumber, Type: "Extra Whitespace", Column: column, Message: "This column contains extraneous whitespace (" + label + ") at approximately position " + (match.index + 1) });
						});
					}

					//Scan for invalid concept references
					Object.keys(ColumnData).forEach(key => {
						//If the column has a value for this row, and the value is not N/A...
						if (ColumnData[key].Values && row[key] && row[key] != "N/A") {
							//If it's a multi-value column, split it out into its values; otherwise just create a single-item array with the value
							var columnValues = ColumnData[key].SplitOn ? row[key].split(new RegExp("[" + ColumnData[key].SplitOn.join("") + "]")).map(m => m.trim()) : [row[key]];
							var valueRequiresUpdate = false;
							//Loop through the array to check that each value shows up in the valid values list
							columnValues.forEach((value, valueIndex) => {
								if (!ColumnData[key].Values.includes(value)) {
									//Check to see if the value matches if special characters are removed
									//If so, flag it as a warning and update the value in the actual data
									var fuzzyMatchIndex = ColumnData[key].FuzzyValues.indexOf(getStreamlinedValue(value));
									if (fuzzyMatchIndex > -1) {
										UI.TableBoxes.PreProcessing_AutoCorrections.appendRow({ RowNumber: rowNumber, Type: "Typo in Value", Column: key, Message: "This column contains a value that was not found in the database.", FoundValue: value, CorrectValue: ColumnData[key].Values[fuzzyMatchIndex] });
										columnValues[valueIndex] = ColumnData[key].Values[fuzzyMatchIndex];
										valueRequiresUpdate = true;
									}
									else {
										UI.TableBoxes.PreProcessing_Errors.appendRow({ RowNumber: rowNumber, Type: "Invalid Value", Column: key, Message: "This column contains a value that was not found in the database.", Value: value });
									}
								}
							});
							//If any corrections were made, update the value(s) in the source data
							if (valueRequiresUpdate) {
								row[key] = ColumnData[key].SplitOn ? columnValues.join(ColumnData[key].SplitOn[0]) : columnValues[0];
							}
						}
					});

					//Scan for potential duplicates
					var matches = Manager.CSVJSON.filter(otherJSON => otherJSON != row && otherJSON.CompareText == row.CompareText);
					if (matches.length > 0) {
						UI.TableBoxes.PreProcessing_Warnings.appendRow({ RowNumber: rowNumber, Type: "Duplicate Row", Column: "Entire Row", Message: "Row(s) " + matches.map(match => match.RawIndex + 3).join(", ") + " appear to be identical to this row." });
					}

					//Update the progress bar
					UI.StatusBars.PreProcessingProgress.setValue(index + 1, Manager.CSVJSON.length, "rows");

					//Update the summary table
					updatePreProcessingSummaryTable();

					//Wait a moment for the UI to refresh, then run for the next row
					setTimeout(() => {
						scanRow(index + 1, afterComplete, onCancel);
					}, 1);
				}
				else {
					afterComplete?.();
				}
			}
			else {
				onCancel?.();
			}
		}
	}
	//

	//Upload Data for server-side processing
	function uploadData() {
		//Show the tab
		UI.TabSets.StageTabs.showTab(UI.TabSets.StageTabs.Tabs.UploadReport);

		//Update the progress bar
		UI.StatusBars.UploadProgress.setValue(0, Manager.CSVJSON.length, "rows");
		UI.StatusBars.UploadProgress.setStatus("Uploading...");

		//TODO: disable/hide buttons etc

		//Set a Transaction GUID
		Manager.Config.TransactionGUID = crypto.randomUUID();

		//Initialize tables
		UI.TableBoxes.UploadSummaryTable.renderData([]);
		UI.TableBoxes.UploadSummaryTable.SpecialRows.SummaryRow = UI.TableBoxes.UploadSummaryTable.appendRow({ Total: 0, ServerErrors: 0, ProcessingErrors: 0, Warnings: 0, Messages: 0 });
		initializeResourceSummaryTables();

		//Process rows
		uploadRow(0, function () {
			//Upload the raw CSV file
			var uploadCSVData = {
				RatingRowID: Manager.Config.Rating.RowID,
				TransactionGUID: Manager.Config.TransactionGUID,
				RawCSV: Manager.UTF8CSV
			};
			UI.StatusBars.UploadProgress.setStatus("Storing CSV File...");
			AJAX.doPOSTRequest("@Url.Content("~/upload/storerawcsv")", uploadCSVData, function (response) {
				UI.StatusBars.UploadProgress.setStatus("Uploading Finished. See below for details.");

				//TODO: Show/hide buttons
			}, function (error) {
				UI.StatusBars.UploadProgress.setStatus("Error storing CSV: " + error.statusText + " (" + error.status + ")");

				//TODO: show/hide buttons
			});
		}, function () {
			UI.StatusBars.UploadProgress.setStatus("Uploading Canceled.");
			
			//TODO: show/hide buttons
		});

		//Helper function
		function uploadRow(index, afterComplete, onCancel) {
			if (Manager.ContinueProcessing) {
				if (Manager.CSVJSON.length > index) {
					//Reference the correct row, and account for the header rows
					var row = Manager.CSVJSON[index];
					var rowNumber = index + 3; //Account for heading rows and 0 based index

					//Construct the request
					var requestData = {
						RatingRowID: Manager.Config.Rating.RowID,
						TransactionGUID: Manager.Config.TransactionGUID,
						Row: mapRow(row, index) //Does not account for header rows. Should it?
					};
					Manager.Config.SkipPart2Checks && (requestData.SkipPart2Checks = true);
					Manager.Config.SkipPart3Checks && (requestData.SkipPart3Checks = true);

					//Upload the row
					AJAX.doPOSTRequest("@Url.Content("~/upload/processuploadeditem")", requestData, function (response) {
						//Handle the response
						if (response.Valid) { //Handle successful row processing
							response.Data.Errors?.forEach(error => {
								UI.TableBoxes.UploadReport_ProcessingErrors.appendRow({ RowNumber: rowNumber, Type: "Processing", Message: error });
							});
							response.Data.Warnings?.forEach(warning => {
								UI.TableBoxes.UploadReport_Warnings.appendRow({ RowNumber: rowNumber, Type: "Warning", Message: warning });
							});
							response.Data.Message && UI.TableBoxes.UploadReport_Messages.appendRow({ RowNumber: rowNumber, Type: "Message", Message: response.Data.Message });

							//Update the local data cache
							appendUpdates(response.Data, rowNumber);
						}
						else { //Handle an error at the processing level
							UI.TableBoxes.UploadReport_ProcessingErrors.appendRow({ RowNumber: rowNumber, Type: "Processing", Message: response.Status });
						}

						//Continue processing
						UI.StatusBars.UploadProgress.setValue(index + 1, Manager.CSVJSON.length, "rows");
						updateUploadReportTable();
						uploadRow(index + 1, afterComplete, onCancel);
					}, function (error) { //Handle an error at the server level
						//Log error
						UI.TableBoxes.UploadReport_ServerErrors.appendRow({ RowNumber: rowNumber, Type: error.Type, Message: error.Message });

						debugger;

						//Continue processing
						UI.StatusBars.UploadProgress.setValue(index + 1, Manager.CSVJSON.length, "rows");
						updateUploadReportTable();
						uploadRow(index + 1, afterComplete, onCancel);
					});
				}
				else {
					afterComplete?.();
				}
			}
			else {
				onCancel?.();
			}
		}

		//Helper function
		function mapRow(row, index) {
			return {
				Row_Index: index,
				Row_Identifier: row["Index #"],
				Row_CodedNotation: [row["Unique Identifier"] || row["Unique ID"] || row["Index #"]].find(m => m && isNaN(m)) || "", //Find the Unique Identifier in one of these three columns, ignoring values that are purely numeric
				Rating_CodedNotation: row["Rating"],
				PayGradeType_CodedNotation: row["Rank"],
				Level_Name: row["Level (A/J/M)"], //Not used, seems to have changed to a single character and a column named "Level (A)" instead?
				BilletTitle_Name: row["Billet Title"],
				WorkRole_Name: row["Functional Area"],
				ReferenceResource_Name: row["Source"],
				ReferenceResource_PublicationDate: row["Date of Source"],
				Shared_ReferenceType: row["Work Element Type"],
				RatingTask_Description: row["Work Element (Task)"],
				RatingTask_ApplicabilityType_Name: row["Task Applicability"],
				RatingTask_TrainingGapType_Name: row["Formal Training Gap"],
				Course_CodedNotation: row["CIN"],
				Course_Name: row["Course Name"],
				Course_CourseType_Name: row["Course Type (A/C/G/F/T)"],
				Course_CurriculumControlAuthority_Name: row["Curriculum Control Authority (CCA)"],
				Course_LifeCycleControlDocumentType_CodedNotation: row["Life-Cycle Control Document"],
				TrainingTask_Description: row["CTTL/PPP/TCCD Statement"],
				Course_AssessmentMethodType_Name: row["Current Assessment Approach"],
				Note: row["Notes"], //TBD Part II Notes or leave as is
				Training_Solution_Type: row["Training Solution Type"],
				Cluster_Analysis_Title: row["Cluster Analysis Title"],
				Recommended_Modality: row["Recommended Modality"],
				Development_Specification: row["Development Specification"],
				Candidate_Platform: row["Candidate Platform"],
				CFM_Placement: row["CFM Placement"],
				Priority_Placement: row["Priority Placement"],
				Development_Ratio: row["Development Ratio"],
				Estimated_Instructional_Time: row["Estimated Instructional Time"],
				Development_Time: row["Development Time (duration in hours)"],
			}
		}

		//Helper function
		function initializeResourceSummaryTables() {
			Static.ResourceTypes.forEach(ResourceType => {
				var rowData = {
					Type: ResourceType.Type,
					TypeLabel: ResourceType.Label,
					Total: 0,
					NewItems: 0,
					ValueChanges: 0,
					ReferenceChanges: 0,
					ReferenceAdditions: 0
				};
				UI.TableBoxes.ResourceSummaryTable.SpecialRows[rowData.Type] = UI.TableBoxes.ResourceSummaryTable.appendRow(rowData);
			});
		}

		//Helper function
		function appendUpdates(ItemResult, rowNumber) {
			//Store and metadataify the items
			storeMetadataifiedItems(ItemResult.ExistingItems, false);
			storeMetadataifiedItems(ItemResult.NewItems, true);

			//Append value changes
			ItemResult.ValueChanges.forEach(valueChange => {
				var item = lookupItem(valueChange.Subject);
				var updatedValue = valueChange.ObjectText || valueChange.Object || "N/A";
				item.Meta.ValueChanges.push(valueChange);
				if (item.Meta.IsNew) {
					//Warn about value changes for new items
					if (item[valueChange.Predicate]) {
						UI.TableBoxes.UploadReport_Warnings.appendRow({ RowNumber: rowNumber, Type: "Value changed for new " + item.Meta.TypeLabel, Message: "Newly-added " + item.Meta.TypeLabel + " appears to have a different value for its " + valueChange.Predicate + " property on this row: \"" + updatedValue + "\" instead of the previously-detected value of \"" + (item[valueChange.Predicate]?.toString() || "N/A") + "\". Please ensure the value for this item is consistent throughout the spreadsheet." });
					}
				}
				else {
					//Warn about value changes for existing items
					UI.TableBoxes.UploadReport_Warnings.appendRow({ RowNumber: rowNumber, Type: "Value changed for existing " + item.Meta.TypeLabel, Message: "Detected text or value change in " + item.Meta.TypeLabel + " " + valueChange.Predicate + " from \"" + (item[valueChange.Predicate]?.toString() || "N/A") + "\" to \"" + updatedValue + "\" on this row." });

					//Log the change
					UI.TableBoxes["ResourceSet_ValueChanges_" + item["@@type"]].appendRow({ RowNumber: rowNumber, ...item, Predicate: valueChange.Predicate, OldValue: item[valueChange.Predicate]?.toString() || "N/A", NewValue: updatedValue });
				}
				//Update the value in the local object
				item[valueChange.Predicate] = updatedValue;
			});

			//Append reference changes
			ItemResult.ReferenceChanges.forEach(referenceChange => {
				var item = lookupItem(referenceChange.Subject);
				item.Meta.ReferenceChanges.push(referenceChange);
				//Do the lookups and then append the messages
				//Do the lookups first so that the data in the rendered HTML table matches the data in the table's data array
				var oldReference = {
					value: item[referenceChange.Predicate] || "",
					label: "N/A",
					type: "N/A",
					finished: item[referenceChange.Predicate] ? false : true
				};
				var newReference = {
					value: referenceChange.Object || "",
					label: "N/A",
					type: "N/A",
					finished: referenceChange.Object ? false : true
				};

				doLookup(oldReference);
				doLookup(newReference);

				function doLookup(reference) {
					if (reference.value && !reference.finished) {
						AJAX.getResource(getURLForRowIDLookup(reference.value), success => {
							reference.label = getDisplay(success.Data);
							reference.finished = true;
							reference.type = success.Data["@@type"];
							renderReferenceMessages();
						}, error => {
							reference.label = "(Error looking up resource with RowID " + oldReference + ")";
							reference.finished = true;
							reference.type = "Error/Unknown";
							addResourceLookupError(item.Meta.TypeLabel, referenceChange.Predicate, reference.value, rowNumber);
							renderReferenceMessages();
						});
					}
				}

				function renderReferenceMessages() {
					if (oldReference.finished && newReference.finished) {
						if (item.Meta.IsNew) {
							//Warn about reference changes for new items
							if (item[referenceChange.Predicate] != referenceChange.Object) {
								UI.TableBoxes.UploadReport_Warnings.appendRow({ RowNumber: rowNumber, Type: "Reference change for new " + item.Meta.TypeLabel, Message: "Newly-added " + item.Meta.TypeLabel + " appears to reference a different value for its " + referenceChange.Predicate + " on this row. The reference changed from \"" + oldReference.label + "\" to \"" + newReference.label + "\"." });
							}
						}
						else {
							//Warn about reference changes for existing items
							UI.TableBoxes.UploadReport_Warnings.appendRow({ RowNumber: rowNumber, Type: "Reference change for existing " + item.Meta.TypeLabel, Message: "Existing " + item.Meta.TypeLabel + " appears to have a different value for its " + referenceChange.Predicate + " on this row. The reference changed from \"" + oldReference.label + "\" to \"" + newReference.label + "\"." });

							//Log the change
							UI.TableBoxes["ResourceSet_ReferenceChanges_" + item["@@type"]].appendRow({ RowNumber: rowNumber, ...item, Predicate: referenceChange.Predicate, OldReferenceType: oldReference.type, NewReferenceType: newReference.type, OldReference: oldReference.label, NewReference: newReference.label });
						}
						//Update the reference in the local object
						if (Array.isArray(item[referenceChange.Predicate])) {
							if (item[referenceChange.Predicate].includes(oldReference.value)) {
								item[referenceChange.Predicate][item[referenceChange.Predicate].indexOf(oldReference.value)] = newReference.value;
							}
							else {
								item[referenceChange.Predicate].push(newReference.value);
							}
						}
						else {
							item[referenceChange.Predicate] = newReference.value;
						}
					}
				}
			});

			//Append additions to new/existing items
			ItemResult.Additions.forEach(addition => {
				var item = lookupItem(addition.Subject);
				item.Meta.Additions.push(addition);
				item[addition.Predicate] = item[addition.Predicate] || [];
				if (!item[addition.Predicate].includes(addition.Object)) {
					item[addition.Predicate].push(addition.Object);
					if (item.Meta.IsNew) {
						//No need to note this
					}
					else {
						AJAX.getResource(getURLForRowIDLookup(addition.Object), success => {
							//Log the addition
							UI.TableBoxes["ResourceSet_ReferenceAdditions_" + item["@@type"]].appendRow({ RowNumber: rowNumber, ...item, Predicate: addition.Predicate, AddedReferenceType: success.Data["@@type"], AddedReferenceData: getDisplay(success.Data) });
						}, error => {
							addResourceLookupError(item.Meta.TypeLabel, addition.Predicate, addition.Object, rowNumber);
						});
					}
					//Append the reference in the local object
					item[addition.Predicate].push(addition.Object);
				}
			});

			//Handle new items
			//Do this last because the above methods will handle the value changes for things like descriptions
			ItemResult.NewItems.forEach(newItem => {
				UI.TableBoxes["ResourceSet_NewItems_" + newItem["@@type"]].appendRow({ RowNumber: rowNumber, ...newItem });
			});

			//Add the row number to the list of rows on which each of the listed items shows up
			ItemResult.RowItems.forEach(rowID => {
				lookupItem(rowID).Meta.RowNumbers.push(rowNumber);
			});

			//Helper function
			function storeMetadataifiedItems(itemList, isNew) {
				itemList.forEach(item => {
					var match = lookupItem(item.RowId);
					if (!match) {
						item.Meta = {
							IsNew: isNew,
							Additions: [],
							ValueChanges: [],
							ReferenceChanges: [],
							RowNumbers: [],
							TypeLabel: Static.ResourceTypes.find(ResourceType => ResourceType.Type == item["@@type"])?.Label || item["@@type"]
						};
						Manager.LookupGraph.push(item);
						if (!Manager.NewItemsByType[item["@@type"]]) {
							debugger;
						}
						isNew ? Manager.NewItemsByType[item["@@type"]].push(item) : Manager.ExistingItemsByType[item["@@type"]].push(item);
					}
					AJAX.appendToCache(getURLForRowIDLookup(item.RowId), { Data: item });
				});
			}

			//Helper function
			function getURLForRowIDLookup(rowID) {
				return "@Url.Content( "~/upload/lookupgraphitem" )?transactionGUID=" + Manager.Config.TransactionGUID + "&itemRowID=" + rowID;
			}

			//Helper function
			function getDisplay(data) {
				var ResourceType = Static.ResourceTypes.find(ResourceType => { return ResourceType.Type == data["@@type"] });
				return ResourceType?.display(data) || data.Name;
			}

			//Helper function
			function addResourceLookupError(sourceTypeLabel, sourceProperty, destinationRowID, rowNumber) {
				UI.TableBoxes.UploadReport_ProcessingErrors.appendRow({ RowNumber: rowNumber, Type: "Resource Lookup Failure", Message: "Failed to find the resource (" + destinationRowID + ") that the " + sourceTypeLabel + " on this row references via its " + sourceProperty + " property." });
			}
		}

		//Helper function
		function updateUploadReportTable() {
			//Update the main summary
			try {
				UI.TableBoxes.UploadSummaryTable.updateRow({
					Total: UI.StatusBars.UploadProgress.Value,
					ServerErrors: UI.TableBoxes.UploadReport_ServerErrors.Data.length,
					ProcessingErrors: UI.TableBoxes.UploadReport_ProcessingErrors.Data.length,
					Warnings: UI.TableBoxes.UploadReport_Warnings.Data.length,
					Messages: UI.TableBoxes.UploadReport_Messages.Data.length
				}, UI.TableBoxes.UploadSummaryTable.SpecialRows.SummaryRow);
			}
			catch (e) {
				debugger;
			}

			try {
				//Update the per-resource type summary
				Static.ResourceTypes.filter(ResourceType => ResourceType.Type != "Overall").forEach(ResourceType => {
					UI.TableBoxes.ResourceSummaryTable.updateRow({
						Type: ResourceType.Type,
						TypeLabel: ResourceType.Label,
						Total: Manager.NewItemsByType[ResourceType.Type].length + Manager.ExistingItemsByType[ResourceType.Type].length,
						NewItems: Manager.NewItemsByType[ResourceType.Type].length,
						ExistingItems: Manager.ExistingItemsByType[ResourceType.Type].length,
						ValueChanges: UI.TableBoxes["ResourceSet_ValueChanges_" + ResourceType.Type].Data.length,
						ReferenceChanges: UI.TableBoxes["ResourceSet_ReferenceChanges_" + ResourceType.Type].Data.length,
						ReferenceAdditions: UI.TableBoxes["ResourceSet_ReferenceAdditions_" + ResourceType.Type].Data.length,
					}, UI.TableBoxes.ResourceSummaryTable.SpecialRows[ResourceType.Type]);
				});
				var summaryDataRows = UI.TableBoxes.ResourceSummaryTable.Data.filter(item => item.Type != "Overall");
				UI.TableBoxes.ResourceSummaryTable.updateRow({
					Type: "Overall",
					TypeLabel: "Overall",
					Total: sum(summaryDataRows, "Total"),
					NewItems: sum(summaryDataRows, "NewItems"),
					ExistingItems: sum(summaryDataRows, "ExistingItems"),
					ValueChanges: sum(summaryDataRows, "ValueChanges"),
					ReferenceChanges: sum(summaryDataRows, "ReferenceChanges"),
					ReferenceAdditions: sum(summaryDataRows, "ReferenceAdditions")
				}, UI.TableBoxes.ResourceSummaryTable.SpecialRows.Overall);
			}
			catch (e) {
				debugger;
			}
			function sum(array, property) {
				return array.map(item => item[property]).reduce((a, b) => a + b);
			}
		}
	}
	//

	//Save Data
	function saveData() {
		UI.TabSets.StageTabs.showTab(UI.TabSets.StageTabs.Tabs.SaveData);

	}
	//

	//Find an item in the Manager's LookupGraph
	function lookupItem(rowID) {
		return Manager.LookupGraph.find(item => item.RowId == rowID);
	}


	//TODO:
	// Update the resource summary tables (base them on the .lengths of the other tables)
	// Ensure the counts for total rows processed/successful/error/warning/etc are correct
	// Create separate tables for warnings vs errors in the pre-processing step


</script>
<style type="text/css">
	html body .container { width: 98vw; }
	input, select, textarea { max-width: none; }
	.mainUI { padding: 10px 0; }
	.stageButton { padding: 4px 10px; min-width: 200px; }

	.tabBox { }
	.tabBox .tabButtons { display: flex; gap: 1px; }
	.tabBox .tabButtons button { border-radius: 0; border: 1px solid #AAA; padding: 5px; }
	.tabBox .tabButtons button:first-child { border-radius: 5px 0 0 5px; }
	.tabBox .tabButtons button:last-child { border-radius: 0 5px 5px 0; }
	.tabBox .tabButtons button.current {  }
	.tabBox .tabList {  }
	.tabBox .tabList .tabPanel {  }
	.tabBox .tabList .tabPanel:not(.current) { display: none; }

	.inputForm { display: flex; flex-direction: column; gap: 5px; background-color: #F5F5F5; padding: 5px; }
	.inputForm .inputFormRow { display: flex; gap: 5px; align-items: baseline; }
	.inputForm .inputFormRow > * { height: 30px; }
	.inputForm .inputFormRow select { flex: 1 1 auto; border-radius: 3px; }
	.inputForm .inputFormRow select:is(:focus, :hover) { cursor: pointer; }
	.inputForm .inputFormRow input[type='file'] { flex: 1 1 auto; border-radius: 3px; padding: 4px 5px; }
	.inputForm .inputFormRow input[type='file']:is(:focus, :hover) { cursor: pointer; background-color: rgba(0,0,0,0.1); }
	.inputForm .inputFormRow label { display: flex; gap: 5px; align-items: baseline; font-weight: normal; padding: 3px 10px; border-radius: 3px; margin: 0; }
	.inputForm .inputFormRow label:is(:focus, :hover) { cursor: pointer; background-color: rgba(0,0,0,0.1); }
	.inputForm .inputFormRow button { width: 200px; }

	.statusBar { margin-bottom: 10px; }
	.statusBar .progressBarWrapper { display: flex; gap: 5px; }
	.statusBar .progressBarWrapper .progressBarOuter { flex: 1 1 auto; background-color: #CCC; padding: 1px; height: 30px; }
	.statusBar .progressBarWrapper .cancelButton { min-width: 200px; }
	.statusBar .progressBarWrapper .progressBarOuter .progressBarInner { background-color: #CFC; height: 28px; min-width: 75px; transition: width 0.5s; text-align: center; }
	.statusBar .progressBarWrapper .progressBarOuter .progressBarInner .progressBarLabel { text-align: center; color: #031; padding: 4px 5px; white-space: nowrap; }
	.statusBar .statusBox { padding: 5px 10px; }

	.tableBox { margin-bottom: 20px; min-width: 500px; }
	.tableBox .tableBoxTop { display: flex; gap: 10px; align-items: baseline; padding: 5px; background-color: #DDD; }
	.tableBox .tableBoxTop .tableBoxLabel { font-weight: bold; }
	.tableBox .tableBoxTop .tableBoxSaveButton { min-width:200px; margin-left: auto; }
	.tableBox table { border: 1px solid #555; margin-bottom: 10px; width: 100%; }
	.tableBox table th { border: 1px solid #CCC; padding: 5px 10px; background-color: #DDD; text-align: center; white-space: nowrap; }
	.tableBox table td { border: 1px solid #CCC; padding: 5px 10px; text-align: left; }

</style>

<div class="tabBox mainUI" data-name="StageTabs">
	<div class="tabButtons"></div>
	<div class="tabList">
		<div class="tabPanel" data-name="SelectFile">
			<h2 class="tabLabel">Stage I: Select File and Configure Upload</h2>
			<div class="inputForm">
				<div class="inputFormRow">
					<select data-property="RatingRowID">
						<option disabled="disabled" selected="selected">Select Rating...</option>
						@foreach( var rating in allRatings )
						{
							<option value="@rating.RowId.ToString()" data-codednotation="@rating.CodedNotation">@rating.CodedNotation - @rating.Name</option>
						}
					</select>
				</div>
				<div class="inputFormRow">
					<input type="file" data-property="CSVFile" />
					<label class="checkBoxWrapper">
						<input type="checkbox" data-property="SkipPart2Checks" />
						<span>Skip Part 2 Checks</span>
					</label>
					<label class="checkBoxWrapper">
						<input type="checkbox" data-property="SkipPart3Checks" />
						<span>Skip Part 3 Checks</span>
					</label>
					<button class="blueButton stageButton" data-action="ProcessData">Process Data</button>
				</div>
			</div>
		</div>
		<div class="tabPanel" data-name="PreProcessing">
			<h2 class="tabLabel">Stage II: Pre-Processing</h2>
			<div class="statusBar" data-name="PreProcessingProgress"></div>
			<div class="tabBox" data-name="PreProcessingTabs">
				<div class="tabButtons"></div>
				<div class="tabList">
					<div class="tabPanel" data-name="Summary">
						<h3 class="tabLabel">Pre-Processing Summary</h3>
						<p>Summary of items encountered while pre-processing the spreadsheet.</p>
						<div class="tableBox" data-name="PreProcessing_Summary" data-label="Pre-Processing - Summary" data-columnKeys="Total|Errors|Warnings|AutoCorrections" data-columnLabels="Total Rows|Errors|Warnings|Automatic Corrections"></div>
					</div>
					<div class="tabPanel" data-name="Errors">
						<h3 class="tabLabel">Pre-Processing Errors</h3>
						<p>Errors encountered while pre-processing the spreadsheet.</p>
						<div class="tableBox" data-name="PreProcessing_Errors" data-label="Pre-Processing - Errors" data-enablesave="true" data-columnKeys="RowNumber|Type|Column|Message|Value" data-columnLabels="Row #|Issue Type|Column|Message|Value"></div>
					</div>
					<div class="tabPanel" data-name="Warnings">
						<h3 class="tabLabel">Pre-Processing Warnings</h3>
						<p>Warnings encountered while pre-processing the spreadsheet.</p>
						<div class="tableBox" data-name="PreProcessing_Warnings" data-label="Pre-Processing Results - Warnings" data-enablesave="true" data-columnKeys="RowNumber|Type|Column|Message" data-columnLabels="Row #|Issue Type|Column|Message"></div>
					</div>
					<div class="tabPanel" data-name="AutoCorrections">
						<h3 class="tabLabel">Pre-Processing Auto-Corrections</h3>
						<p>Cases where a value in a cell in the spreadsheet was a close (but not exact) match to a value from a controlled vocabulary. The system will use the corresponding known value shown for each cell below instead of the actual value provided for each cell below if you proceed with the upload. If this is not the desired behavior, you will need to ensure that the system contains the exact value you want to provide, and that the spreadsheet provides an exact match to that value.</p>
						<div class="tableBox" data-name="PreProcessing_AutoCorrections" data-label="Pre-Processing Results - Automatic Corrections" data-enablesave="true" data-columnKeys="RowNumber|Type|Column|Message|FoundValue|CorrectValue" data-columnLabels="Row #|Issue Type|Column|Message|Value Found In Spreadsheet|Value That Will Be Used If You Continue"></div>
					</div>
				</div>
			</div>
			<button class="blueButton stageButton" data-action="UploadData">Upload Data</button>
		</div>
		<div class="tabPanel" data-name="UploadReport">
			<h2 class="tabLabel">Stage III: Upload and Process Data</h2>
			<div class="statusBar" data-name="UploadProgress"></div>
			<div class="tabBox" data-name="UploadTabs">
				<div class="tabButtons"></div>
				<div class="tabList">
					<div class="tabPanel" data-name="Summary">
						<h3 class="tabLabel">Summary</h3>
						<div class="tableBox" data-name="UploadSummaryTable" data-label="Upload Summary" data-columnKeys="Total|ServerErrors|ProcessingErrors|Warnings|Messages" data-columnLabels="Total Rows|Server Errors|Processing Errors|Warnings|Messages"></div>
						<div class="tableBox" data-name="ResourceSummaryTable" data-label="Resource Summary" data-columnKeys="TypeLabel|Total|ExistingItems|NewItems|ValueChanges|ReferenceChanges|ReferenceAdditions" data-columnLabels="Type|Total Items|Existing Items|New Items|Existing Items With Value Changes|Existing Items With Reference Changes|Existing Items With Reference Additions"></div>
					</div>
					<div class="tabPanel" data-name="ServerErrors">
						<h3 class="tabLabel">Server Errors</h3>
						<p>Server errors occur when there is an unexpected issue that prevents the server from being able to process a row. These errors will prevent data from being saved, because it would result in erroneous data being entered into the system.</p>
						<div class="tableBox" data-name="UploadReport_ServerErrors" data-label="Upload Report - Server Errors" data-enablesave="true" data-columnKeys="RowNumber|Type|Message" data-columnLabels="Row #|Type|Message"></div>
					</div>
					<div class="tabPanel" data-name="ProcessingErrors">
						<h3 class="tabLabel">Processing Errors</h3>
						<p>Processing errors occur when the server detects an error in the data, but is (usually) able to continue processing the row. These errors will prevent data from being saved, because it would result in erroneous data being entered into the system.</p>
						<div class="tableBox" data-name="UploadReport_ProcessingErrors" data-label="Upload Report - Processing Errors" data-enablesave="true" data-columnKeys="RowNumber|Type|Message" data-columnLabels="Row #|Type|Message"></div>
					</div>
					<div class="tabPanel" data-name="Warnings">
						<h3 class="tabLabel">Warnings</h3>
						<p>Warnings occur when the server detects data that may be erroneous. Review these carefully. If the data is correct, you may continue.</p>
						<div class="tableBox" data-name="UploadReport_Warnings" data-label="Upload Report - Warnings" data-enablesave="true" data-columnKeys="RowNumber|Type|Message" data-columnLabels="Row #|Type|Message"></div>
					</div>
					<div class="tabPanel" data-name="Messages">
						<h3 class="tabLabel">Messages</h3>
						<p>Messages are miscellaneous information the server may provide about the data for a row. Review this information carefully before continuing.</p>
						<div class="tableBox" data-name="UploadReport_Messages" data-label="Upload Report - Messages" data-enablesave="true" data-columnKeys="RowNumber|Type|Message" data-columnLabels="Row #|Type|Message"></div>
					</div>
					<div class="tabPanel" data-name="NewItems">
						<h3 class="tabLabel">New Items</h3>
						<p>Items that were detected in the spreadsheet, but not found in the database, will appear below.</p>
						<div class="resourceSetsBox" data-name="NewItems" data-label="New Items" data-extraColumnKeys="" data-extraColumnLabels=""></div>
					</div>
					<div class="tabPanel" data-name="ValueChanges">
						<h3 class="tabLabel">Value Changes</h3>
						<p>Modifications detected to values for properties of existing items in the database will appear below.</p>
						<div class="resourceSetsBox" data-name="ValueChanges" data-label="Value Changes" data-extraColumnKeys="Predicate|OldValue|NewValue" data-extraColumnLabels="Property|Old Value|New Value"></div>
					</div>
					<div class="tabPanel" data-name="ReferenceChanges">
						<h3 class="tabLabel">Reference Changes</h3>
						<p>Modifications detected to references from an existing item in the database to another item (that may be new or existing) will appear below.</p>
						<div class="resourceSetsBox" data-name="ReferenceChanges" data-label="Reference Changes" data-extraColumnKeys="Predicate|OldReferenceType|OldReference|NewReferenceType|NewReference" data-extraColumnLabels="Property|Old Reference to Type|Old Reference to Data|New Reference to Type|New Reference to Data"></div>
					</div>
					<div class="tabPanel" data-name="ReferenceAdditions">
						<h3 class="tabLabel">Reference Additions</h3>
						<p>Additions detected to references from an existing item in the database to another item (that may be new or existing) will appear below.</p>
						<div class="resourceSetsBox" data-name="ReferenceAdditions" data-label="Reference Additions" data-extraColumnKeys="Predicate|AddedReferenceType|AddedReferenceData" data-extraColumnLabels="Property|Reference to Type|Reference to Data"></div>
					</div>
				</div>
			</div>
			<button class="blueButton stageButton" data-action="SaveData">Save Data</button>
		</div>
		<div class="tabPanel" data-name="SaveData">
			<h2 class="tabLabel">Stage IV: Save Data</h2>
			<div class="statusBar" data-name="SaveProgress"></div>
			<div class="tableBox" data-name="SaveReportTable" data-label="Upload and Save Report - Messages" data-enablesave="true" data-columnKeys="RowNumber|Type|Message" data-columnLabels="Row #|Type|Message"></div>
		</div>
	</div>
</div>
