@using Services;
@using Newtonsoft.Json;
@using Models.Schema;
@using Models.Curation;
@using Models.DTO;
@{
	ViewBag.Title = "Upload V4";
	var allRatings = RatingServices.GetAll().OrderByDescending( m => m.CodedNotation.ToLower() == "all" ).ToList();
	ConceptSchemeMap = Factories.ConceptSchemeManager.GetConceptSchemeMap( true );
	var allOrganizations = Factories.OrganizationManager.GetAll();
	var allValidOrganizationValues = allOrganizations.Select( org => org.Name ) //Look for name
		.Concat( allOrganizations.Select( org => org.AlternateName ) ) //Look for abbreviation
		.Concat( allOrganizations.Select( org => org.Name + " (" + org.AlternateName + ")" ) ) //Look for concatenated form: "Name (Abbreviation)"
		.Where( m => !string.IsNullOrWhiteSpace( m ) )
		.ToList();
}
@functions {
	public ConceptSchemeMap ConceptSchemeMap { get; set; }

	public string GetConceptValues( ConceptScheme scheme, bool includeName, bool includeCodedNotation, bool includeWorkElementType )
	{
		var values = new List<string>();

		if( scheme != null && scheme.Concepts != null && scheme.Concepts.Count() > 0 )
		{
			values = values.Concat( includeName ? scheme.Concepts.Select( m => m.Name ).ToList() : new List<string>() )
				.Concat( includeCodedNotation ? scheme.Concepts.Select( m => m.CodedNotation ).ToList() : new List<string>() )
				.Concat( includeWorkElementType ? scheme.Concepts.Select( m => m.WorkElementType ).ToList() : new List<string>() )
				.Where( value => !string.IsNullOrWhiteSpace( value ) )
				.Distinct()
				.ToList();
		}

		return JsonConvert.SerializeObject( values, Formatting.None );
	}

	public string GetBroadMatchSets( ConceptScheme itemScheme, ConceptScheme broadMatchScheme, Func<Concept, List<string>> GetItemValues, Func<Concept, List<string>> GetBroadMatchValues )
	{
		var results = new List<BroadMatchItem>();
		foreach( var concept in itemScheme.Concepts )
		{
			var broadMatch = broadMatchScheme.Concepts.FirstOrDefault( m => m.RowId == concept.BroadMatch );
			if( broadMatch != null )
			{
				results.Add( new BroadMatchItem()
				{
					ItemValues = GetItemValues( concept ),
					BroadMatchValues = GetBroadMatchValues( broadMatch )
				} );
			}
		}

		return JsonConvert.SerializeObject( results, Formatting.None );
	}

	public class BroadMatchItem
	{
		public List<string> ItemValues { get; set; }
		public List<string> BroadMatchValues { get; set; }
	}
}

@*@Html.Partial( "~/Views/Help/_UploadV3.cshtml" )*@
@Html.Partial( "~/Views/Shared/_AJAXTools.cshtml" )

<script type="text/javascript">
	var UI = {};
	var Manager = {};
	var Static = {
		CharacterMap: [
			{ UTF8: '""', Match: ['“', '”', '\u201c', '\u201d', '\x93', '\x94'] },
			{ UTF8: "'", Match: ['ʻ', 'ʼ', 'ʽ', '`', '´', '‘', '’', '\u2018', '\u2019', '\u00b4', '\u0060', '\x91', '\x92'] },
			{ UTF8: "-", Match: ['–', '—', '·', '\u2013', '\u2014', '\x95', '\x96', '\x97'] }
		],
		ResourceTypes: [
			{
				Type: "Overall",
				Label: "Overall",
				TBoxModel: {
					Total: { Label: "Total" }
				}
			},
			{
				Type: "BilletTitle",
				Label: "Billet Title",
				TBoxModel: {
					Name: { Label: "Name" }
				},
				display: function (data) {
					return data.Name;
				}
			},
			{
				Type: "WorkRole",
				Label: "Functional Area",
				TBoxModel: {
					Name: { Label: "Name" }
				},
				display: function (data) {
					return data.Name;
				}
			},
			{
				Type: "RatingTask",
				Label: "Rating Task",
				TBoxModel: {
					Description: { Label: "Description" },
					HasReferenceResource_Name: { Label: "Source", LookupProperty: "HasReferenceResource", LookupRender: "Name" },
					HasReferenceResource_PublicationDate: { Label: "Source Date", LookupProperty: "HasReferenceResource", LookupRender: "PublicationDate" }
				},
				display: function (data) {
					return data.Description;
				}
			},
			{
				Type: "TrainingTask",
				Label: "Training Task",
				TBoxModel: {
					Description: { Label: "Description" }
				},
				display: function (data) {
					return data.Description;
				}
			},
			{
				Type: "Course",
				Label: "Course",
				TBoxModel: {
					CodedNotation: { Label: "CIN" },
					Name: { Label: "Name" },
					CourseType_Name: { Label: "Course Type", LookupProperty: "CourseType", LookupRender: "Name" }
				},
				display: function (data) {
					return data.CodedNotation + " - " + data.Name;
				}
			},
			{
				Type: "ReferenceResource",
				Label: "Reference Resource",
				TBoxModel: {
					Name: { Label: "Name" },
					PublicationDate: { Label: "Publication Date" }
				},
				display: function (data) {
					return data.Name + " (" + data.PublicationDate + ")";
				}
			},
			{
				Type: "ClusterAnalysis",
				Label: "Cluster Analysis",
				TBoxModel: {
					HasClusterAnalysisTitle_Name: { Label: "Cluster Analysis Title", LookupProperty: "HasClusterAnalysisTitle", LookupRender: "Name" },
					HasRatingTask_Description: { Label: "Analysis for Rating Task", LookupProperty: "HasRatingTask", LookupRender: "Description" },
					PriorityPlacement: { Label: "Priority Placement" },
					EstimatedInstructionalTime: { Label: "Estimated Instructional Time" },
					DevelopmentTime: { Label: "Development Time (duration in hours)" },
					TrainingSolutionType_Name: { Label: "Training Solution Type", LookupProperty: "TrainingSolutionType", LookupRender: "Name" },
					RecommendedModalityType_Name: { Label: "Recommended Modality Type", LookupProperty: "RecommendedModalityType", LookupRender: "Name" },
					DevelopmentSpecificationType_Name: { Label: "Training Solution Type", LookupProperty: "DevelopmentSpecificationType", LookupRender: "Name" },
					CandidatePlatformType_CodedNotation: { Label: "Training Solution Type", LookupProperty: "CandidatePlatformType", LookupRender: "CodedNotation" },
					DevelopmentRatioType_Name: { Label: "Training Solution Type", LookupProperty: "DevelopmentRatioType", LookupRender: "Name" },
					CFMPlacementType_CodedNotation: { Label: "Training Solution Type", LookupProperty: "CFMPlacementType", LookupRender: "CodedNotation" },
				},
				display: function (data) {
					return "Part 3 Data";
				}
			},
			{
				Type: "ClusterAnalysisTitle",
				Label: "Cluster Analysis Title",
				TBoxModel: {
					Name: { Label: "Name" }
				},
				display: function (data) {
					return data.Name;
				}
			},
			{
				Type: "RatingContext",
				Label: "Rating Context",
				TBoxModel: {
					HasRatingTask_Description: { Label: "Rating Task", LookupProperty: "HasRatingTask", LookupRender: "Description" },
					Note: { Label: "Note" }
				},
				display: function (data) {
					return "Part 1 Data";
				}
			},
			{
				Type: "CourseContext",
				Label: "Course Context",
				TBoxModel: {
					HasCourse_Name: { Label: "Course Name", LookupProperty: "HasCourse", LookupRender: "Name" },
					HasCourse_Name: { Label: "CIN", LookupProperty: "HasCourse", LookupRender: "CodedNotation" },
					HasTrainingTask_Description: { Label: "Training Task", LookupProperty: "HasTrainingTask", LookupRender: "Description" }
				},
				display: function (data) {
					return "Part 2 Data";
				}
			}
		]
	};
	var ColumnData = {
		//"Unique Identifier": {
		//	Part: 1
		//},
		"Rating": {
			Part: 1,
			UploadableRowProperty: "@nameof(UploadableRow.Rating_CodedNotation)"
		},
		"Rank": {
			Part: 1,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.PayGradeCategory, false, true, false ) ), //CodedNotation
			BroadMatchChecks: @Html.Raw( GetBroadMatchSets( ConceptSchemeMap.PayGradeCategory, ConceptSchemeMap.PayGradeLevelCategory, m => new List<string>() { m.CodedNotation }, m => new List<string>() { m.CodedNotation } ) ),
			UploadableRowProperty: "@nameof(UploadableRow.PayGradeType_CodedNotation)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.PayGradeCategory  ) ) )
		},
		"Level (A/J/M)": {
			Part: 1,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.PayGradeLevelCategory, false, true, false ) ), //CodedNotation
			UploadableRowProperty: "@nameof(UploadableRow.Level_Name)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.PayGradeLevelCategory  ) ) )
		},
		"Billet Title/Job": {
			Part: 1,
			UploadableRowProperty: "@nameof(UploadableRow.BilletTitle_Name)"
		},
		"Functional Area": {
			Part: 1,
			UploadableRowProperty: "@nameof(UploadableRow.WorkRole_Name)"
		},
		"Source": {
			Part: 1,
			UploadableRowProperty: "@nameof(UploadableRow.ReferenceResource_Name)"
		},
		"Date of Source": {
			Part: 1,
			UploadableRowProperty: "@nameof(UploadableRow.ReferenceResource_PublicationDate)"
		},
		"Work Element Type": {
			Part: 1,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.ReferenceResourceCategory, false, false, true ) ), //WorkElementType
			UploadableRowProperty: "@nameof(UploadableRow.Shared_ReferenceType)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.ReferenceResourceCategory  ) ) )
		},
		"Work Element (Task)": {
			Part: 1,
			UploadableRowProperty: "@nameof(UploadableRow.RatingTask_Description)"
		},
		"Task Applicability": {
			Part: 1,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.TaskApplicabilityCategory, true, false, false ) ), //Name
			UploadableRowProperty: "@nameof(UploadableRow.RatingTask_ApplicabilityType_Name)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.TaskApplicabilityCategory  ) ) )
		},
		"Formal Training Gap": {
			Part: 1,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.TrainingGapCategory, true, false, false ) ), //Name
			UploadableRowProperty: "@nameof(UploadableRow.RatingTask_TrainingGapType_Name)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.TrainingGapCategory  ) ) )
		},
		"CIN": {
			Part: 2,
			UploadableRowProperty: "@nameof(UploadableRow.Course_CodedNotation)"
		},
		"Course Name": {
			Part: 2,
			UploadableRowProperty: "@nameof(UploadableRow.Course_Name)"
		},
		"Course Type": {
			Part: 2,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.CourseCategory, true, false, false ) ), //Name
			SplitOn: [ ",", ";", "|" ],
			UploadableRowProperty: "@nameof(UploadableRow.Course_CourseType_Name)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.CourseCategory  ) ) )
		},
		"Curriculum Control Authority (CCA)": {
			Part: 2,
			Values: @Html.Raw( JsonConvert.SerializeObject( allValidOrganizationValues, Formatting.None ) ),
			UploadableRowProperty: "@nameof(UploadableRow.Course_CurriculumControlAuthority_Name)",
			ValueType: "Organization"
		},
		"Life-Cycle Control Document": {
			Part: 2,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.LifeCycleControlDocumentCategory, true, true, false ) ), //Name or CodedNotation
			UploadableRowProperty: "@nameof(UploadableRow.Course_LifeCycleControlDocumentType_CodedNotation)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.LifeCycleControlDocumentCategory  ) ) )
		},
		"TCCD/CTTL/PPP Statement": {
			Part: 2,
			UploadableRowProperty: "@nameof(UploadableRow.TrainingTask_Description)"
		},
		"Current Assessment Approach": {
			Part: 2,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.AssessmentMethodCategory, true, false, false ) ), //Name
			SplitOn: [ ",", ";", "|" ],
			UploadableRowProperty: "@nameof(UploadableRow.Course_AssessmentMethodType_Name)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.AssessmentMethodCategory  ) ) )
		},
		"Training Solution Type": {
			Part: 3,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.TrainingSolutionCategory, true, false, false ) ), //Name
			UploadableRowProperty: "@nameof(UploadableRow.Training_Solution_Type)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.TrainingSolutionCategory  ) ) )
		},
		"Cluster Analysis Title": {
			Part: 3,
			UploadableRowProperty: "@nameof(UploadableRow.Cluster_Analysis_Title)"
		},
		"Recommended Modality": {
			Part: 3,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.RecommendedModalityCategory, true, true, false ) ), //Name or CodedNotation
			UploadableRowProperty: "@nameof(UploadableRow.Recommended_Modality)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.RecommendedModalityCategory  ) ) )
		},
		"Development Specification": {
			Part: 3,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.DevelopmentSpecificationCategory, true, false, false ) ), //Name
			UploadableRowProperty: "@nameof(UploadableRow.Development_Specification)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.DevelopmentSpecificationCategory  ) ) )
		},
		"Candidate Platform": {
			Part: 3,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.CandidatePlatformCategory, false, true, false ) ), //CodedNotation
			SplitOn: [ ",", "/" ],
			UploadableRowProperty: "@nameof(UploadableRow.Candidate_Platform)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.CandidatePlatformCategory  ) ) )
		},
		"CFM Placement": {
			Part: 3,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.CFMPlacementCategory, true, true, false ) ), //Name or CodedNotation
			UploadableRowProperty: "@nameof(UploadableRow.CFM_Placement)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.CFMPlacementCategory  ) ) )
		},
		"Priority Placement": {
			Part: 3,
			UploadableRowProperty: "@nameof(UploadableRow.Priority_Placement)"
		},
		"Development Ratio": {
			Part: 3,
			Values: @Html.Raw( GetConceptValues( ConceptSchemeMap.DevelopmentRatioCategory, true, false, false ) ), //Name
			UploadableRowProperty: "@nameof(UploadableRow.Development_Ratio)",
			ConceptScheme: @Html.Raw( JsonConvert.SerializeObject( SimpleItemHelper.GetSimpleItem( ConceptSchemeMap.DevelopmentRatioCategory  ) ) )
		},
		"Estimated Instructional Time": {
			Part: 3,
			UploadableRowProperty: "@nameof(UploadableRow.Estimated_Instructional_Time)"
		},
		"Development Time (duration in hours)": {
			Part: 3,
			UploadableRowProperty: "@nameof(UploadableRow.Development_Time)"
		},
		"Notes": {
			Part: 1,
			UploadableRowProperty: "@nameof(UploadableRow.Note)"
		}
	}

	$(document).ready(function () {
		setupUI();
		setupManager();
		refreshForUpload();
	});
	//

	//Setup the UI elements
	function setupUI() {
		//List columns
		Object.keys(ColumnData).forEach(key => {
			$(".columnList.part" + ColumnData[key].Part + "Columns").each(function () {
				$("<li>" + key + "</li>").appendTo($(this));
			});
		});

		//Setup Tabs
		UI.TabSets = {};
		UI.TabSetsList = [];
		$(".tabBox").each(function() {
			createTabBox($(this));
		});

		//Setup Progress Bars
		UI.StatusBars = {};
		UI.StatusBarsList = [];
		$(".statusBar").each(function () {
			var box = $(this);
			var StatusBar = {
				Box: box,
				Name: box.attr("data-name"),
				BarWrapper: $("<div class=\"progressBarWrapper\"></div>").appendTo(box),
				StatusBox: $("<div class=\"statusBox\"></div>").appendTo(box),
				Active: true,
				Value: 0,
				Max: 1,
				UnitText: "",
				OverrideLabel: "",
				Percentage: 0
			};
			StatusBar.OuterBar = $("<div class=\"progressBarOuter\"></div>").appendTo(StatusBar.BarWrapper);
			StatusBar.InnerBar = $("<div class=\"progressBarInner\"></div>").appendTo(StatusBar.OuterBar);
			StatusBar.Label = $("<div class=\"progressBarLabel\"></div>").appendTo(StatusBar.InnerBar);
			StatusBar.CancelButton = $("<button class=\"cancelButton\">Cancel</button>").appendTo(StatusBar.BarWrapper);
			UI.StatusBars[StatusBar.Name] = StatusBar;
			UI.StatusBarsList.push(StatusBar);
			StatusBar.CancelButton.on("click", function () {
				Manager.ContinueProcessing = false;
			});
			StatusBar.setValue = function (value, max, unitText, overrideLabel) {
				StatusBar.Value = value;
				StatusBar.Max = max;
				StatusBar.UnitText = unitText;
				StatusBar.OverrideLabel = overrideLabel;
				if (StatusBar.Active) {
					StatusBar.Active = false;
					setTimeout(function () { //Ignore update calls that happen too many times in too short a window
						StatusBar.Active = true;
						StatusBar.Percentage = Math.ceil((StatusBar.Value / (StatusBar.Max || 1)) * 100);
						StatusBar.Label.html(StatusBar.OverrideLabel || (StatusBar.Value + " of " + StatusBar.Max + " " + (StatusBar.UnitText || "")));
						StatusBar.InnerBar.css("width", StatusBar.Percentage + "%");
					}, 10);
				}
			};
			StatusBar.setStatus = function (text) {
				StatusBar.StatusBox.html(text);
			};
			StatusBar.setValue(0, 100, "", "Ready");
			StatusBar.setStatus("Ready");
		});

		//Table Boxes
		UI.TableBoxes = {};
		UI.TableBoxesList = [];
		$(".tableBox").each(function () {
			var box = $(this);
			var model = getModelFromAttributes(box.attr("data-columnKeys"), box.attr("data-columnLabels"));
			createTableBox(null, box.attr("data-name"), model, box);
		});

		//Stage buttons
		UI.StageButtons = {};
		UI.StageButtonsList = [];
		$(".stageButton").each(function () {
			var button = $(this);
			button.Action = button.attr("data-action");
			UI.StageButtons[button.Action] = button;
			UI.StageButtonsList.push(button);
			button.OriginalContent = button.html();
		});
		UI.StageButtons.ProcessData.on("click", processData);
		UI.StageButtons.UploadData.on("click", uploadData);
		UI.StageButtons.SaveData.on("click", saveData);
		UI.StageButtons.FinishAll.on("click", finishAll);

		//Upload Box
		UI.UploadBox = {
			RatingSelector: $("[data-property='RatingRowID']"),
			FileSelector: $("[data-property='CSVFile']"),
			SkipPart2CheckBox: $("[data-property='SkipPart2Checks']"),
			SkipPart3CheckBox: $("[data-property='SkipPart3Checks']"),
			ForceSelectedRatingCheckBox: $("[data-property='ForceSelectedRating']"),
			ForceAllRanksMeansE1CheckBox: $("[data-property='ForceAllRanksMeansE1']"),
			ForcePayGradeLevelTypeCheckBox: $("[data-property='ForcePayGradeLevelType']"),
			RemoveUnusualCharactersCheckBox: $("[data-property='RemoveUnusualCharacters']"),
			RemoveExtraWhiteSpaceCheckBox: $("[data-property='RemoveExtraWhiteSpace']"),
			CloseMatchConceptsCheckBox: $("[data-property='CloseMatchConcepts']"),
			FixExcelRatioCheckBox: $("[data-property='FixExcelRatio']")
		};

		//Resource Sets Boxes
		$(".resourceSetsBox").each(function () {
			var box = $(this);
			var name = box.attr("data-name");
			var label = box.attr("data-label");
			var buttonsBox = $("<div class=\"tabButtons\"></div>").appendTo(box);
			var listBox = $("<div class=\"tabList\"></div>").appendTo(box);

			Static.ResourceTypes.filter(ResourceType => ResourceType.Type != "Overall").forEach(ResourceType => {
				var tabPanelBox = $("<div class=\"tabPanel\" data-name=\"" + name + "\"></div>").appendTo(listBox);
				var tabLabel = $("<h4 class=\"tabLabel\">" + ResourceType.Label + "</h4>").appendTo(tabPanelBox);
				var tableDiv = $("<div class=\"tableBox\" data-label=\"" + label + " - " + ResourceType.Label + "\" data-enablesave=\"true\"></div>").appendTo(tabPanelBox);
				var extraColumns = getModelFromAttributes(box.attr("data-extraColumnKeys"), box.attr("data-extraColumnLabels"));
				var tableBox = createTableBox(tabPanelBox, "ResourceSet_" + name + "_" + ResourceType.Type, { RowNumber: "Row #", ...ResourceType.TBoxModel, ...extraColumns }, tableDiv);
			});

			createTabBox(box);
		});

		//Helper function
		function getModelFromAttributes(columnAttribute, labelAttribute) {
			var columnKeys = columnAttribute.split("|");
			var columnLabels = labelAttribute.split("|");
			var model = {};
			columnKeys.filter(key => key).forEach((key, index) => {
				model[key] = columnLabels[index];
			});
			return model;
		}
	}
	//

	//Create a Tab Box
	function createTabBox(container, name) {
		var TabSet = {
			Box: container,
			Name: name || container.attr("data-name"),
			ButtonsBox: container.find("> .tabButtons"),
			TabsBox: container.find("> .tabList"),
			Tabs: {},
			TabsList: []
		};
		UI.TabSets[TabSet.Name] = TabSet;
		UI.TabSetsList.push(TabSet);
		TabSet.TabsBox.find("> .tabPanel").each(function() {
			var panel = $(this);
			var Tab = {
				Box: panel,
				Name: panel.attr("data-name"),
				Label: panel.find("> .tabLabel"),
				Button: $("<button></button>").appendTo(TabSet.ButtonsBox)
			};
			TabSet.Tabs[Tab.Name] = Tab;
			TabSet.TabsList.push(Tab);
			Tab.Button.html(Tab.Label.text());
			Tab.Button.on("click", function() {
				TabSet.showTab(Tab);
			});
		});
		TabSet.showTab = function (TargetTab) {
			TabSet.TabsList.forEach(OtherTab => {
				OtherTab.Box.removeClass("current");
				OtherTab.Button.removeClass("current greenButton");
			});
			TargetTab.Box.addClass("current");
			TargetTab.Button.addClass("current greenButton");
		};
		TabSet.showTab(TabSet.TabsList[0]);
	}

	//Create a Table Box
	function createTableBox(container, name, model, overrideBox) {
		var box = overrideBox || $("<div class=\"tableBox\"></div>").appendTo(container);
		var TBox = {
			Box: box,
			Name: name,
			Label: box.attr("data-label"),
			Top: $("<div class=\"tableBoxTop\"></div>").appendTo(box),
			Table: $("<table></table>").appendTo(box),
			HeaderKeys: [],
			HeaderLabels: [],
			Model: model || {},
			Data: [],
			EnableSave: box.attr("data-enablesave") == "true",
			SpecialRows: {}
		};
		TBox.Counter = $("<div class=\"tableBoxCounter\"></div>").appendTo(TBox.Top);
		TBox.LabelBox = $("<div class=\"tableBoxLabel\">" + TBox.Label + "</div>").appendTo(TBox.Top);
		TBox.THead = $("<thead></thead>").appendTo(TBox.Table);
		TBox.TBody = $("<tbody></tbody>").appendTo(TBox.Table);
		TBox.setupHeaders = function () {
			TBox.HeaderKeys = Object.keys(TBox.Model);
			TBox.HeaderLabels = TBox.HeaderKeys.map(key => TBox.Model[key].Label || TBox.Model[key]);
			TBox.THead.html("<tr>" + TBox.HeaderLabels.map(label => "<th>" + label + "</th>").join("") + "</tr>");
		}
		TBox.renderData = function (rowDataArray) {
			TBox.Data = [];
			TBox.Rows = [];
			TBox.TBody.html("");
			(rowDataArray || []).forEach(rowData => {
				TBox.appendRow(rowData);
			});
			TBox.refreshSaveButton();
		}
		TBox.appendRow = function (rowData) {
			TBox.Data.push(rowData);
			var row = $("<tr></tr>").appendTo(TBox.TBody);
			TBox.refreshRow(rowData, row);
			return { Data: rowData, Row: row };
		}
		TBox.updateRow = function (newData, specialRow) {
			TBox.Data[TBox.Data.indexOf(specialRow.Data)] = newData;
			specialRow.Data = newData;
			TBox.refreshRow(specialRow.Data, specialRow.Row);
		}
		TBox.refreshRow = function(rowData, row) {
			TBox.HeaderKeys.filter(key => TBox.Model[key].LookupProperty).map(key => {
				rowData[key] = rowData[TBox.Model[key].LookupProperty];
				(Array.isArray(rowData[key]) ? rowData[key] : [rowData[key]]).filter(item => item).forEach(value => {
					AJAX.getResource(getURLForRowIDLookup(value), success => {
						var newValue = success[TBox.Model[key].LookupRender];
						Array.isArray(rowData[key]) ?
							(rowData[key][rowData[key].indexOf(value)] = newValue) :
							(rowData[key] = newValue);
						TBox.renderRow(rowData, row);
					}, error => {
						Array.isArray(rowData[key]) ?
							(rowData[key][rowData[key].indexOf(value)] = "Error looking up value for " + value) :
							rowData[key] = "Error looking up value for " + value;
						TBox.renderRow(rowData, row);
					});

				});
			});
			TBox.renderRow(rowData, row);
		}
		TBox.renderRow = function (rowData, row) {
			setTimeout(function () {
				row.html(TBox.HeaderKeys.map(key => {
					return "<td>" + (rowData[key] === 0 ? 0 : rowData[key]?.join?.(" | ") || rowData[key] || "") + "</td>";
				}));
				TBox.refreshSaveButton();
			}, 0);
		}
		TBox.setupSaveButton = function () {
			if (TBox.EnableSave) {
				TBox.SaveButton = $("<button class=\"blueButton tableBoxSaveButton\"></div>").appendTo(TBox.Top);
				TBox.SaveButton.on("click", function () {
					var csvRows = [TBox.HeaderLabels.join(",")];
					TBox.Data.forEach(rowData => {
						var row = [];
						TBox.HeaderKeys.forEach(key => {
							var value = (rowData[key] || "").toString().replace(/"/g, '""');
							row.push((value.includes("\n") || value.includes(",") || value.includes('"')) ? '"' + value + '"' : value);
						});
						csvRows.push(row.join(","));
					});
					var csv = csvRows.join("\n");
					var tempLink = $("<a></a>").appendTo(document.body);
					tempLink.attr("download", (Manager?.Config?.Rating?.CodedNotation || "Unknown Rating") + " " + TBox.Label + ".csv");
					tempLink.attr("href", URL.createObjectURL(new Blob([csv], { type: "text/csv" })));
					tempLink[0].click();
					tempLink.remove();
				});
				TBox.refreshSaveButton();
			}
		}
		TBox.refreshSaveButton = function () {
			TBox.SaveButton?.html("Download " + TBox.Data.length + " Items");
		}
		TBox.setupHeaders();
		TBox.setupSaveButton();
		UI.TableBoxes[TBox.Name] = TBox;
		UI.TableBoxesList.push(TBox);
		return TBox;
	}
	//

	//Setup Manager
	function setupManager() {
		Manager.FileReader = new FileReader();

		Manager.getFileHandle = function () {
			return UI.UploadBox.FileSelector[0].files?.[0];
		}

		Manager.readFile = function (afterRead) {
			Manager.FileReader.onload = function () {
				afterRead?.(Manager.FileReader.result);
			}
			Manager.FileReader.readAsBinaryString(Manager.getFileHandle());
		}

	}
	//

	//Refresh Upload Manager and UI
	function refreshForUpload() {
		UI.StatusBarsList.forEach(StatusBar => {
			StatusBar.setValue(0, 1, "", "Ready");
			StatusBar.setStatus("Ready");
		});
		UI.TableBoxesList.forEach(TableBox => {
			TableBox.renderData([]);
		});
		Manager.RawCSV = "";
		Manager.UTF8CSV = "";
		Manager.CSVText = "";
		Manager.ContinueProcessing = true;
		Manager.LookupGraph = [];
		Manager.NewItemsByType = {};
		Manager.ExistingItemsByType = {};
		Static.ResourceTypes.forEach(ResourceType => {
			Manager.NewItemsByType[ResourceType.Type] = [];
			Manager.ExistingItemsByType[ResourceType.Type] = [];
		});
		updateStageButtons(true, false, false, false);
	}
	//

</script>
<script type="text/javascript">
	//Process Data initially
	function processData() {
		//Clear old data
		refreshForUpload();

		//Validate configuration
		if (!UI.UploadBox.RatingSelector.val()) {
			alert("Please select a Rating.");
			return;
		}

		var fileHandle = Manager.getFileHandle();
		if (!fileHandle) {
			alert("Please select a file to continue.");
			return;
		}

		if (fileHandle.size > 5242880) { //5MB
			if (!confirm("Warning: The file you have selected is very large (about " + Math.round(fileHandle.size / (1024 * 1024)) + "MB).\n\nPlease double-check the contents of the file to ensure no unintended data is included.\n\nIf this data is correct, click OK to continue.")) {
				return;
			}
		}

		//Read UI
		Manager.Config = {
			Rating: {
				CodedNotation: UI.UploadBox.RatingSelector.find("option:selected").attr("data-codednotation"),
				RowID: UI.UploadBox.RatingSelector.val()
			},
			SkipPart2Checks: UI.UploadBox.SkipPart2CheckBox.prop("checked"),
			SkipPart3Checks: UI.UploadBox.SkipPart3CheckBox.prop("checked"),
			ForceSelectedRating: UI.UploadBox.ForceSelectedRatingCheckBox.prop("checked"),
			ForceAllRanksMeansE1: UI.UploadBox.ForceAllRanksMeansE1CheckBox.prop("checked"),
			ForcePayGradeLevelType: UI.UploadBox.ForcePayGradeLevelTypeCheckBox.prop("checked"),
			RemoveUnusualCharacters: UI.UploadBox.RemoveUnusualCharactersCheckBox.prop("checked"),
			RemoveExtraWhiteSpace: UI.UploadBox.RemoveExtraWhiteSpaceCheckBox.prop("checked"),
			CloseMatchConcepts: UI.UploadBox.CloseMatchConceptsCheckBox.prop("checked"),
			FixExcelRatio: UI.UploadBox.FixExcelRatioCheckBox.prop("checked")
		};

		//Read the contents
		Manager.readFile(function (rawData) {
			//Setup the summary table
			UI.TableBoxes.PreProcessing_Summary.renderData([]);
			UI.TableBoxes.PreProcessing_Summary.SpecialRows.SummaryRow = UI.TableBoxes.PreProcessing_Summary.appendRow({ Total: 0, Errors: 0, Warnings: 0, AutoCorrections: 0 });

			//Validate the contents
			Manager.RawCSV = rawData.trim();
			if (Manager.RawCSV.split("\n").length > 50000) {
				if (!confirm("Warning: The spreadsheet contains over 50,000 rows.\n\nThe system will attempt to skip any empty rows, but it is better to remove them before uploading.\n\nIf this data is correct, click OK to continue.")) {
					return;
				}
			}

			//Replace bad characters
			Manager.UTF8CSV = Manager.RawCSV;
			Static.CharacterMap.forEach(map => {
				map.Match.forEach(badCharacter => {
					Manager.UTF8CSV = Manager.UTF8CSV.replace(new RegExp(badCharacter, "g"), map.UTF8);
				});
			});

			//Process the contents
			Manager.CSVText = Manager.UTF8CSV.replace(/\r\n/g, "\n").replace(/""/g, "<INSERTQUOTE>");
			var rows = [];
			var currentRow = [];
			var currentCell = [];
			var isInQuotes = false;

			//Process each character
			UI.TabSets.StageTabs.showTab(UI.TabSets.StageTabs.Tabs.PreProcessing);
			UI.StatusBars.PreProcessingProgress.setStatus("Reading CSV File...");
			UI.StatusBars.PreProcessingProgress.setValue(1, Manager.CSVText.length, "characters");
			Manager.CSVText.split("").forEach(function (character, index) {
				if (character == '"') {
					isInQuotes = !isInQuotes;
				}
				else if (isInQuotes) {
					currentCell.push(character);
				}
				else if (character == ",") {
					currentRow.push(joinCSVCellData(currentCell));
					currentCell = [];
				}
				else if (character == "\n") {
					currentRow.push(joinCSVCellData(currentCell));
					currentCell = [];
					rows.push(currentRow);
					currentRow = [];
				}
				else {
					currentCell.push(character);
				}

				//Track progress
				UI.StatusBars.PreProcessingProgress.setValue(index + 1, Manager.CSVText.length, "characters");
			});

			//Don't forget stragglers at the end
			currentRow.push(joinCSVCellData(currentCell));
			rows.push(currentRow);

			//Set Data
			if (rows[0].some(cell => cell.length == 0)) { //Discard the first row if not every column is filled out (e.g. "PART I", , , ..."PART 2", , ...)
				rows.shift();
			}
			Manager.CSVColumns = rows.shift(); //Set header row
			Manager.CSVRows = rows; //The remaining rows
			Manager.CSVJSON = []; //Clear out any existing CSVJSON

			//Scan to ensure all of the expected columns are present
			var missingColumns = Object.keys(ColumnData).filter(column => !Manager.CSVColumns.includes(column));
			if (missingColumns.length > 0) {
				alert("The following column(s) were not found in the spreadsheet. Column names must match exactly. Please double-check the data and try again:\n\n" + missingColumns.join("\n"));
				UI.StatusBars.PreProcessingProgress.setStatus("Found one or more errors.");
				missingColumns.forEach(column => {
					UI.TableBoxes.PreProcessing_Errors.appendRow({ RowNumber: "Header", Type: "Missing Column", Column: column, Message: "The following column was not found in the spreadsheet. Column names must match exactly. Please double-check the data and try again.", Value: column });
					updatePreProcessingSummaryTable();
				});
				return;
			}

			//Create flat JSON
			Manager.CSVRows = Manager.CSVRows.filter(row => row.join("").trim().length > 0); //Filter out empty rows and make this array useful for index-based comparisons later
			Manager.CSVRows.forEach((row, index) => {
				//Assemble row data
				var item = {
					RawIndex: index,
					RawRowText: row.join("").trim(),
					CompareText: row.join("").toLowerCase().replace(/[^a-z0-9 ]/g, " ").replace(/ +/g, " ").trim()
				};
				Manager.CSVColumns.forEach((column, index) => {
					item[column] = row[index];
				});
				Manager.CSVJSON.push(item);
			});

			//Pre-calculate the fuzzy match values for the various columns
			Object.keys(ColumnData).forEach(key => {
				if (ColumnData[key].Values) {
					ColumnData[key].FuzzyValues = ColumnData[key].Values.map(item => getStreamlinedValue(item));
				}
			});

			//Scan for pre-processing
			UI.StatusBars.PreProcessingProgress.setStatus("Pre-Processing...");
			UI.StatusBars.PreProcessingProgress.setValue(0, Manager.CSVJSON.length, "rows");
			scanRow(0, function () {
				//If there are any errors
				if (UI.TableBoxes.PreProcessing_Errors.Data.length > 0) {
					updateStageButtons(false, trueIfAdmin(), false, false);
					UI.StatusBars.PreProcessingProgress.setStatus("Finished with " + UI.TableBoxes.PreProcessing_Errors.Data.length + " Errors.");
				}
				//Otherwise
				else {
					updateStageButtons(false, true, false, false);
					UI.StatusBars.PreProcessingProgress.setStatus("Ready to Upload.");
				}
			}, function () { //On cancel...
				updateStageButtons(true, false, false, false);
				UI.StatusBars.PreProcessingProgress.setStatus("Canceled with " + UI.TableBoxes.PreProcessing_Errors.Data.length + " Errors, " + UI.TableBoxes.PreProcessing_Warnings.Data.length + " Warnings.");
			});
		});

		//Helper function
		function joinCSVCellData(cell) {
			return cell.join("").replace(/<INSERTQUOTE>/g, '"').trim().replace(/^N\/A$/g, "");
		}

		//Helper function
		function updatePreProcessingSummaryTable() {
			UI.TableBoxes.PreProcessing_Summary.updateRow({
				Total: UI.StatusBars.PreProcessingProgress.Value,
				Errors: UI.TableBoxes.PreProcessing_Errors.Data.length,
				Warnings: UI.TableBoxes.PreProcessing_Warnings.Data.length,
				AutoCorrections: UI.TableBoxes.PreProcessing_AutoCorrections.Data.length
			}, UI.TableBoxes.PreProcessing_Summary.SpecialRows.SummaryRow);
		}

		//Helper function
		function getStreamlinedValue(value) {
			return value.toString().toLowerCase().replace(/[^a-z0-9]/g, "").trim();
		}

		//Helper function
		function scanRow(index, afterComplete, onCancel) {
			if (Manager.ContinueProcessing) {
				//Get the row, or finish
				if (Manager.CSVJSON.length > index) {
					//Reference the correct row, and account for the header rows
					var row = Manager.CSVJSON[index];
					var rowNumber = index + 3; //Account for heading rows and 0 based index

					//Skip Part 2 Data, if selected
					if (Manager.Config.SkipPart2Checks) {
						Object.keys(ColumnData).filter(key => ColumnData[key].Part == 2).forEach(key => {
							row[key] = "N/A";
						});
					}

					//Skip Part 3 Data, if selected
					if (Manager.Config.SkipPart3Checks) {
						Object.keys(ColumnData).filter(key => ColumnData[key].Part == 3).forEach(key => {
							row[key] = "N/A";
						});
					}

					//Validate rating matches selected Rating
					if (row.Rating != Manager.Config.Rating.CodedNotation) {
						if (Manager.Config.ForceSelectedRating) {
							UI.TableBoxes.PreProcessing_AutoCorrections.appendRow({ RowNumber: rowNumber, Type: "Rating Mismatch", Column: "Rating", Message: "The selected Rating will be used instead of the Rating listed on this row.", FoundValue: row.Rating, CorrectValue: Manager.Config.Rating.CodedNotation });
							row.Rating = Manager.Config.Rating.CodedNotation;
						}
						else {
							UI.TableBoxes.PreProcessing_Errors.appendRow({ RowNumber: rowNumber, Type: "Rating Mismatch", Column: "Rating", Message: "Rating code for this row (" + row.Rating + ") does not match selected Rating code (" + Manager.Config.Rating.CodedNotation + ")", Value: row.Rating });
						}
					}

					//Use E1 instead of All if selected
					if (Manager.Config.ForceAllRanksMeansE1) {
						if (row.Rank?.toLowerCase().trim() == "all") {
							UI.TableBoxes.PreProcessing_AutoCorrections.appendRow({ RowNumber: rowNumber, Type: "Rank Flagged as All", Column: "Rank", Message: "A rank of \"E1\" will be used instead of the rank of \"All\" found on this row.", FoundValue: row.Rank, CorrectValue: "E1" });
							row.Rank = "E1";
						}
					}

					//Validate that the Pay Grade matches the Pay Grade Level
					var payGradeBroadMatchItem = ColumnData.Rank.BroadMatchChecks.find(m => m.ItemValues.includes(row.Rank));
					if (payGradeBroadMatchItem == null) {
						UI.TableBoxes.PreProcessing_Errors.appendRow({ RowNumber: rowNumber, Type: "Invalid Rank", Column: "Rank", Message: "Rank for this row (" + row.Rank + ") was not found in the database.", Value: row.Rank });
					}
					else if(!payGradeBroadMatchItem.BroadMatchValues.includes(row["Level (A/J/M)"])) {
						if (Manager.Config.ForcePayGradeLevelType) {
							UI.TableBoxes.PreProcessing_AutoCorrections.appendRow({ RowNumber: rowNumber, Type: "Invalid Rank/Level Association", Column: "Rank", Message: "The indicated Level (A/J/M) will be used instead of the Level (A/J/M) listed on this row.", FoundValue: row["Level (A/J/M)"], CorrectValue: payGradeBroadMatchItem.BroadMatchValues[0] });
							row["Level (A/J/M)"] = payGradeBroadMatchItem.BroadMatchValues[0];
						}
						else {
							UI.TableBoxes.PreProcessing_Errors.appendRow({ RowNumber: rowNumber, Type: "Invalid Rank/Level Association", Column: "Rank", Message: "Rank for this row (" + row.Rank + ") does not correspond to the Level for this row (" + row["Level (A/J/M)"] + ").", Value: row.Rank });
						}
					}

					//Validate that the rating task text isn't empty
					if (!row["Work Element (Task)"]?.trim()) {
						UI.TableBoxes.PreProcessing_Errors.appendRow({ RowNumber: rowNumber, Type: "Missing Rating Task", Column: "Work Element (Task)", Message: "Rating task for this row is empty or missing.", Value: "" });
					}

					//Handle Excel's broken formatting of CSV files for the ratio field
					if (Manager.Config.FixExcelRatio && row["Development Ratio"]?.trim() && row["Development Ratio"]?.trim() != "N/A") {
						var ratio = row["Development Ratio"]?.trim();
						if (ratio && ratio.match("(:01:00$)|(:01$)")) {
							row["Development Ratio"] = ratio.replace(/(:01:00$)|(:01$)/, ":1");
							UI.TableBoxes.PreProcessing_AutoCorrections.appendRow({ RowNumber: rowNumber, Type: "Unintended Formatting", Column: "Development Ratio", Message: "The incorrectly formatted ratio will be corrected.", FoundValue: ratio, CorrectValue: row["Development Ratio"] });
						}
					}

					//Scan for unintended whitespace and other characters
					Object.keys(ColumnData).forEach(column => {
						//Scan for whitespace
						checkWhitespace(column, "\t", "Tab", " ");
						checkWhitespace(column, "\r\n", "Carriage Return/New Line", " ");
						checkWhitespace(column, "\n", "New Line", " ");
						checkWhitespace(column, " {2,}", "Extra Space(s)", " ");

						//Scan for characters outside of the normal range
						var fixedCell = [];
						var valueRequiresUpdate = false;
						row[column].split("").forEach((character, index) => {
							//10 = new line, <= 31 and >= 126 are outside the usual range of characters
							var code = row[column].charCodeAt(index);
							if (code != 10 && (code <= 31 || code >= 126)) {
								if (Manager.Config.RemoveUnusualCharacters) {
									UI.TableBoxes.PreProcessing_AutoCorrections.appendRow({ RowNumber: rowNumber, Type: "Unusual Character", Column: column, Message: "The unusual character at approximately position " + (index + 1) + " will be removed.", FoundValue: character, CorrectValue: "" });
									valueRequiresUpdate = true;
								}
								else {
									UI.TableBoxes.PreProcessing_Warnings.appendRow({ RowNumber: rowNumber, Type: "Unusual Character", Column: column, Message: "This column contains an unusual character (" + character + ") at approximately position " + (index + 1) });
								}
							}
							else {
								fixedCell.push(character);
							}
						});
						if (valueRequiresUpdate && Manager.Config.RemoveUnusualCharacters) {
							row[column] = fixedCell.join("").trim();
						}
					});
					function checkWhitespace(column, text, label, replaceWith) {
						var valueRequiresUpdate = false;
						[...row[column].matchAll(text)].forEach(match => {
							if (Manager.Config.RemoveExtraWhiteSpace) {
								UI.TableBoxes.PreProcessing_AutoCorrections.appendRow({ RowNumber: rowNumber, Type: "Extra Whitespace", Column: column, Message: "The extraneous whitespace at approximately position " + (match.index + 1) + " will be removed.", FoundValue: label, CorrectValue: "" });
								valueRequiresUpdate = true;
							}
							else {
								UI.TableBoxes.PreProcessing_Warnings.appendRow({ RowNumber: rowNumber, Type: "Extra Whitespace", Column: column, Message: "This column contains extraneous whitespace (" + label + ") at approximately position " + (match.index + 1) });
							}
						});
						if (valueRequiresUpdate && Manager.Config.RemoveExtraWhiteSpace) {
							row[column] = row[column].replace(new RegExp(text, "g"), replaceWith);
						}
					}

					//Scan for invalid concept references
					Object.keys(ColumnData).forEach(key => {
						//If the column has a value for this row, and the value is not N/A...
						if (ColumnData[key].Values && row[key] && row[key] != "N/A") {
							//If it's a multi-value column, split it out into its values; otherwise just create a single-item array with the value
							var columnValues = ColumnData[key].SplitOn ? row[key].split(new RegExp("[" + ColumnData[key].SplitOn.join("") + "]")).map(m => m.trim()) : [row[key]];
							var valueRequiresUpdate = false;
							//Loop through the array to check that each value shows up in the valid values list
							columnValues.forEach((value, valueIndex) => {
								if (!ColumnData[key].Values.includes(value)) {
									//Check to see if the value matches if special characters are removed
									//If so, flag it as a warning and update the value in the actual data
									var fuzzyMatchIndex = ColumnData[key].FuzzyValues.indexOf(getStreamlinedValue(value));
									if (fuzzyMatchIndex > -1 && Manager.Config.CloseMatchConcepts) {
										UI.TableBoxes.PreProcessing_AutoCorrections.appendRow({ RowNumber: rowNumber, Type: "Typo in Value", Column: key, Message: "The corrected value will be used instead of the value provided in the spreadsheet.", FoundValue: value, CorrectValue: ColumnData[key].Values[fuzzyMatchIndex] });
										columnValues[valueIndex] = ColumnData[key].Values[fuzzyMatchIndex];
										valueRequiresUpdate = true;
									}
									//Otherwise, flag it as an error and update the controlled value summary table
									else {
										UI.TableBoxes.PreProcessing_Errors.appendRow({ RowNumber: rowNumber, Type: "Invalid Value", Column: key, Message: "This column contains a value that was not found in the database.", Value: value });
										var summaryRow = UI.TableBoxes.PreProcessing_MissingControlledValues_Summary.Data.find(item => item.Column == key && item.Value == value);
										if (summaryRow) {
											summaryRow.Total++;
											UI.TableBoxes.PreProcessing_MissingControlledValues_Summary.renderRow(summaryRow, summaryRow.HTML);
										}
										else {
											var addedRow = UI.TableBoxes.PreProcessing_MissingControlledValues_Summary.appendRow({ Total: 1, Column: key, Type: ColumnData[key].ConceptScheme ? "Concept" : (ColumnData[key].ValueType || "Unknown"), ConceptScheme: ColumnData[key].ConceptScheme?.Name || "", Value: value });
											addedRow.Data.HTML = addedRow.Row;
										}
									}
								}
							});
							//If any corrections were made, update the value(s) in the source data
							if (valueRequiresUpdate) {
								row[key] = ColumnData[key].SplitOn ? columnValues.join(ColumnData[key].SplitOn[0]) : columnValues[0];
							}
						}
					});

					//Scan for potential duplicates
					var matches = Manager.CSVJSON.filter(otherJSON => otherJSON != row && otherJSON.CompareText == row.CompareText);
					if (matches.length > 0) {
						UI.TableBoxes.PreProcessing_Warnings.appendRow({ RowNumber: rowNumber, Type: "Duplicate Row", Column: "Entire Row", Message: "Row(s) " + matches.map(match => match.RawIndex + 3).join(", ") + " appear to be identical to this row." });
					}

					//Update the progress bar
					UI.StatusBars.PreProcessingProgress.setValue(index + 1, Manager.CSVJSON.length, "rows");

					//Update the summary table
					updatePreProcessingSummaryTable();

					//Wait a moment for the UI to refresh, then run for the next row
					setTimeout(() => {
						scanRow(index + 1, afterComplete, onCancel);
					}, 1);
				}
				else {
					afterComplete?.();
				}
			}
			else {
				onCancel?.();
			}
		}
	}
	//

	//Upload Data for server-side processing
	function uploadData() {
		//Show the tab
		UI.TabSets.StageTabs.showTab(UI.TabSets.StageTabs.Tabs.UploadReport);

		//Update the progress bar
		UI.StatusBars.UploadProgress.setValue(0, Manager.CSVJSON.length, "rows");
		UI.StatusBars.UploadProgress.setStatus("Uploading...");

		//Update buttons
		updateStageButtons(false, false, false, false);

		//Set a Transaction GUID
		Manager.Config.TransactionGUID = crypto.randomUUID();

		//Initialize tables
		UI.TableBoxes.UploadSummaryTable.renderData([]);
		UI.TableBoxes.UploadSummaryTable.SpecialRows.SummaryRow = UI.TableBoxes.UploadSummaryTable.appendRow({ Total: 0, ServerErrors: 0, ProcessingErrors: 0, Warnings: 0, Messages: 0 });
		initializeResourceSummaryTables();

		//Process rows
		uploadRow(0, function () {
			//Upload the raw CSV file
			var uploadCSVData = {
				RatingRowID: Manager.Config.Rating.RowID,
				TransactionGUID: Manager.Config.TransactionGUID,
				RawCSV: Manager.UTF8CSV
			};
			UI.StatusBars.UploadProgress.setStatus("Storing CSV File...");
			AJAX.doPOSTRequest("@Url.Content("~/upload/storerawcsv")", uploadCSVData, function (response) {
				//If there are any errors...
				if (UI.TableBoxes.UploadSummaryTable.SpecialRows.SummaryRow.Data.ServerErrors + UI.TableBoxes.UploadSummaryTable.SpecialRows.SummaryRow.Data.ProcessingErrors > 0) {
					updateStageButtons(false, false, trueIfAdmin(), false);
					UI.StatusBars.UploadProgress.setStatus("One or more errors were found. See below for details.");
				}
				//Otherwise...
				else {
					updateStageButtons(false, false, true, false);
					UI.StatusBars.UploadProgress.setStatus("Uploading Finished. See below for details.");
				}
			}, function (error) {
				updateStageButtons(true, false, false, false);
				UI.StatusBars.UploadProgress.setStatus("Error storing CSV: " + error.statusText + " (" + error.status + ")");
			});
		}, function () {
			updateStageButtons(true, false, false, false);
			UI.StatusBars.UploadProgress.setStatus("Uploading Canceled.");
		});

		//Helper function
		function uploadRow(index, afterComplete, onCancel) {
			if (Manager.ContinueProcessing) {
				if (Manager.CSVJSON.length > index) {
					//Reference the correct row, and account for the header rows
					var row = Manager.CSVJSON[index];
					var rowNumber = index + 3; //Account for heading rows and 0 based index

					//Construct the request
					var requestData = {
						RatingRowID: Manager.Config.Rating.RowID,
						TransactionGUID: Manager.Config.TransactionGUID,
						Row: mapRow(row, index) //Does not account for header rows. Should it?
					};
					Manager.Config.SkipPart2Checks && (requestData.SkipPart2Checks = true);
					Manager.Config.SkipPart3Checks && (requestData.SkipPart3Checks = true);

					//Upload the row
					AJAX.doPOSTRequest("@Url.Content("~/upload/processuploadeditem")", requestData, function (response) {
						//Handle the response
						if (response.Valid) { //Handle successful row processing
							response.Data.Errors?.forEach(error => {
								UI.TableBoxes.UploadReport_ProcessingErrors.appendRow({ RowNumber: rowNumber, Type: "Processing", Message: error });
							});
							response.Data.Warnings?.forEach(warning => {
								UI.TableBoxes.UploadReport_Warnings.appendRow({ RowNumber: rowNumber, Type: "Warning", Message: warning });
							});
							response.Data.Message && UI.TableBoxes.UploadReport_Messages.appendRow({ RowNumber: rowNumber, Type: "Message", Message: response.Data.Message });

							//Update the local data cache
							appendUpdates(response.Data, rowNumber);
						}
						else { //Handle an error at the processing level
							UI.TableBoxes.UploadReport_ProcessingErrors.appendRow({ RowNumber: rowNumber, Type: "Processing", Message: response.Status });
						}

						//Continue processing
						UI.StatusBars.UploadProgress.setValue(index + 1, Manager.CSVJSON.length, "rows");
						updateUploadReportTable();
						uploadRow(index + 1, afterComplete, onCancel);
					}, function (error) { //Handle an error at the server level
						//Log error
						UI.TableBoxes.UploadReport_ServerErrors.appendRow({ RowNumber: rowNumber, Type: error.Type, Message: error.Message });

						//Continue processing
						UI.StatusBars.UploadProgress.setValue(index + 1, Manager.CSVJSON.length, "rows");
						updateUploadReportTable();
						uploadRow(index + 1, afterComplete, onCancel);
					});
				}
				else {
					afterComplete?.();
				}
			}
			else {
				onCancel?.();
			}
		}

		//Helper function
		function mapRow(row, index) {
			var rowData = {
				Row_Index: index
			};
			Object.keys(ColumnData).forEach(key => {
				rowData[ColumnData[key].UploadableRowProperty] = row[key];
			});

			return rowData;
		}
		//

		//Helper function
		function initializeResourceSummaryTables() {
			Static.ResourceTypes.forEach(ResourceType => {
				var rowData = {
					Type: ResourceType.Type,
					TypeLabel: ResourceType.Label,
					Total: 0,
					NewItems: 0,
					ValueChanges: 0,
					ReferenceChanges: 0,
					ReferenceAdditions: 0
				};
				UI.TableBoxes.ResourceSummaryTable.SpecialRows[rowData.Type] = UI.TableBoxes.ResourceSummaryTable.appendRow(rowData);
			});
		}

		//Helper function
		function appendUpdates(ItemResult, rowNumber) {
			//Store and metadataify the items
			storeMetadataifiedItems(ItemResult.ExistingItems, false);
			storeMetadataifiedItems(ItemResult.NewItems, true);

			//Append value changes
			ItemResult.ValueChanges.forEach(valueChange => {
				var item = lookupItem(valueChange.Subject);
				var updatedValue = valueChange.ObjectText || valueChange.Object || "N/A";
				item.Meta.ValueChanges.push(valueChange);
				if (item.Meta.IsNew) {
					//Warn about value changes for new items
					if (item[valueChange.Predicate]) {
						UI.TableBoxes.UploadReport_Warnings.appendRow({ RowNumber: rowNumber, Type: "Value changed for new " + item.Meta.TypeLabel, Message: "Newly-added " + item.Meta.TypeLabel + " appears to have a different value for its " + valueChange.Predicate + " property on this row: \"" + updatedValue + "\" instead of the previously-detected value of \"" + (item[valueChange.Predicate]?.toString() || "N/A") + "\". Please ensure the value for this item is consistent throughout the spreadsheet." });
					}
				}
				else {
					//Warn about value changes for existing items
					UI.TableBoxes.UploadReport_Warnings.appendRow({ RowNumber: rowNumber, Type: "Value changed for existing " + item.Meta.TypeLabel, Message: "Detected text or value change in " + item.Meta.TypeLabel + " " + valueChange.Predicate + " from \"" + (item[valueChange.Predicate]?.toString() || "N/A") + "\" to \"" + updatedValue + "\" on this row." });

					//Log the change
					UI.TableBoxes["ResourceSet_ValueChanges_" + item["@@type"]].appendRow({ RowNumber: rowNumber, ...item, Predicate: valueChange.Predicate, OldValue: item[valueChange.Predicate]?.toString() || "N/A", NewValue: updatedValue });
				}
				//Update the value in the local object
				item[valueChange.Predicate] = updatedValue;
			});

			//Append reference changes
			ItemResult.ReferenceChanges.forEach(referenceChange => {
				var item = lookupItem(referenceChange.Subject);
				item.Meta.ReferenceChanges.push(referenceChange);
				//Do the lookups and then append the messages
				//Do the lookups first so that the data in the rendered HTML table matches the data in the table's data array
				var oldReference = {
					value: item[referenceChange.Predicate] || "",
					label: "N/A",
					type: "N/A",
					finished: item[referenceChange.Predicate] ? false : true
				};
				var newReference = {
					value: referenceChange.Object || "",
					label: "N/A",
					type: "N/A",
					finished: referenceChange.Object ? false : true
				};

				doLookup(oldReference);
				doLookup(newReference);

				//Update the reference in the local object
				if (Array.isArray(item[referenceChange.Predicate])) {
					if (item[referenceChange.Predicate].includes(oldReference.value)) {
						item[referenceChange.Predicate][item[referenceChange.Predicate].indexOf(oldReference.value)] = newReference.value;
					}
					else {
						item[referenceChange.Predicate].push(newReference.value);
					}
				}
				else {
					item[referenceChange.Predicate] = newReference.value;
				}

				//Helper function
				function doLookup(reference) {
					if (reference.value && !reference.finished) {
						AJAX.getResource(getURLForRowIDLookup(reference.value), success => {
							reference.label = getDisplay(success);
							reference.finished = true;
							reference.type = success["@@type"];
							renderReferenceMessages();
						}, error => {
							reference.label = "(Error looking up resource with RowID " + oldReference + ")";
							reference.finished = true;
							reference.type = "Error/Unknown";
							addResourceLookupError(item.Meta.TypeLabel, referenceChange.Predicate, reference.value, rowNumber);
							renderReferenceMessages();
						});
					}
				}

				//Helper function
				function renderReferenceMessages() {
					if (oldReference.finished && newReference.finished) {
						if (item.Meta.IsNew) {
							//Warn about reference changes for new items, but not if the change is from blank or N/A to a value
							if (item[referenceChange.Predicate] != referenceChange.Object && oldReference.label != "N/A") {
								UI.TableBoxes.UploadReport_Warnings.appendRow({ RowNumber: rowNumber, Type: "Reference change for new " + item.Meta.TypeLabel, Message: "Newly-added " + item.Meta.TypeLabel + " appears to reference a different value for its " + referenceChange.Predicate + " on this row. The reference changed from \"" + oldReference.label + "\" to \"" + newReference.label + "\"." });
							}
						}
						else {
							//Warn about reference changes for existing items
							UI.TableBoxes.UploadReport_Warnings.appendRow({ RowNumber: rowNumber, Type: "Reference change for existing " + item.Meta.TypeLabel, Message: "Existing " + item.Meta.TypeLabel + " appears to have a different value for its " + referenceChange.Predicate + " on this row. The reference changed from \"" + oldReference.label + "\" to \"" + newReference.label + "\"." });

							//Log the change
							UI.TableBoxes["ResourceSet_ReferenceChanges_" + item["@@type"]].appendRow({ RowNumber: rowNumber, ...item, Predicate: referenceChange.Predicate, OldReferenceType: oldReference.type, NewReferenceType: newReference.type, OldReference: oldReference.label, NewReference: newReference.label });
						}
					}
				}
			});

			//Append additions to new/existing items
			ItemResult.Additions.forEach(addition => {
				var item = lookupItem(addition.Subject);
				item.Meta.Additions.push(addition);
				item[addition.Predicate] = item[addition.Predicate] || [];
				if (!item[addition.Predicate].includes(addition.Object)) {
					if (item.Meta.IsNew) {
						//No need to note this
					}
					else {
						AJAX.getResource(getURLForRowIDLookup(addition.Object), success => {
							//Log the addition
							UI.TableBoxes["ResourceSet_ReferenceAdditions_" + item["@@type"]].appendRow({ RowNumber: rowNumber, ...item, Predicate: addition.Predicate, AddedReferenceType: success["@@type"], AddedReferenceData: getDisplay(success) });
						}, error => {
							addResourceLookupError(item.Meta.TypeLabel, addition.Predicate, addition.Object, rowNumber);
						});
					}
					//Append the reference in the local object
					item[addition.Predicate].push(addition.Object);
				}
			});

			//Handle new items
			//Do this last because the above methods will handle the value changes for things like descriptions
			ItemResult.NewItems.forEach(newItem => {
				UI.TableBoxes["ResourceSet_NewItems_" + newItem["@@type"]].appendRow({ RowNumber: rowNumber, ...newItem });
			});

			//Add the row number to the list of rows on which each of the listed items shows up
			ItemResult.RowItems.forEach(rowID => {
				lookupItem(rowID).Meta.RowNumbers.push(rowNumber);
			});

			//Helper function
			function storeMetadataifiedItems(itemList, isNew) {
				itemList.forEach(item => {
					var match = lookupItem(item.RowId);
					if (!match) {
						item.Meta = {
							IsNew: isNew,
							Additions: [],
							ValueChanges: [],
							ReferenceChanges: [],
							RowNumbers: [],
							TypeLabel: Static.ResourceTypes.find(ResourceType => ResourceType.Type == item["@@type"])?.Label || item["@@type"]
						};
						Manager.LookupGraph.push(item);
						if (!Manager.NewItemsByType[item["@@type"]]) {
							console.log("Unexpected error: Item type not found in Manager");
						}
						isNew ? Manager.NewItemsByType[item["@@type"]].push(item) : Manager.ExistingItemsByType[item["@@type"]].push(item);
					}
					AJAX.appendToCache(getURLForRowIDLookup(item.RowId), { Data: item });
				});
			}

			//Helper function
			function getDisplay(data) {
				var ResourceType = Static.ResourceTypes.find(ResourceType => { return ResourceType.Type == data["@@type"] });
				return ResourceType?.display(data) || data.Name;
			}

			//Helper function
			function addResourceLookupError(sourceTypeLabel, sourceProperty, destinationRowID, rowNumber) {
				UI.TableBoxes.UploadReport_ProcessingErrors.appendRow({ RowNumber: rowNumber, Type: "Resource Lookup Failure", Message: "Failed to find the resource (" + destinationRowID + ") that the " + sourceTypeLabel + " on this row references via its " + sourceProperty + " property." });
			}
		}

		//Helper function
		function updateUploadReportTable() {
			//Update the main summary
			UI.TableBoxes.UploadSummaryTable.updateRow({
					Total: UI.StatusBars.UploadProgress.Value,
					ServerErrors: UI.TableBoxes.UploadReport_ServerErrors.Data.length,
					ProcessingErrors: UI.TableBoxes.UploadReport_ProcessingErrors.Data.length,
					Warnings: UI.TableBoxes.UploadReport_Warnings.Data.length,
					Messages: UI.TableBoxes.UploadReport_Messages.Data.length
				}, UI.TableBoxes.UploadSummaryTable.SpecialRows.SummaryRow);

			//Update the per-resource type summary
			Static.ResourceTypes.filter(ResourceType => ResourceType.Type != "Overall").forEach(ResourceType => {
				UI.TableBoxes.ResourceSummaryTable.updateRow({
					Type: ResourceType.Type,
					TypeLabel: ResourceType.Label,
					Total: Manager.NewItemsByType[ResourceType.Type].length + Manager.ExistingItemsByType[ResourceType.Type].length,
					NewItems: Manager.NewItemsByType[ResourceType.Type].length,
					ExistingItems: Manager.ExistingItemsByType[ResourceType.Type].length,
					ValueChanges: UI.TableBoxes["ResourceSet_ValueChanges_" + ResourceType.Type].Data.length,
					ReferenceChanges: UI.TableBoxes["ResourceSet_ReferenceChanges_" + ResourceType.Type].Data.length,
					ReferenceAdditions: UI.TableBoxes["ResourceSet_ReferenceAdditions_" + ResourceType.Type].Data.length,
				}, UI.TableBoxes.ResourceSummaryTable.SpecialRows[ResourceType.Type]);
			});
			var summaryDataRows = UI.TableBoxes.ResourceSummaryTable.Data.filter(item => item.Type != "Overall");
			UI.TableBoxes.ResourceSummaryTable.updateRow({
				Type: "Overall",
				TypeLabel: "Overall",
				Total: sum(summaryDataRows, "Total"),
				NewItems: sum(summaryDataRows, "NewItems"),
				ExistingItems: sum(summaryDataRows, "ExistingItems"),
				ValueChanges: sum(summaryDataRows, "ValueChanges"),
				ReferenceChanges: sum(summaryDataRows, "ReferenceChanges"),
				ReferenceAdditions: sum(summaryDataRows, "ReferenceAdditions")
			}, UI.TableBoxes.ResourceSummaryTable.SpecialRows.Overall);

			//Helper function
			function sum(array, property) {
				return array.map(item => item[property]).reduce((a, b) => a + b);
			}
		}
	}
	//

	//Save Data
	function saveData() {
		//Show the tab
		UI.TabSets.StageTabs.showTab(UI.TabSets.StageTabs.Tabs.SaveData);

		//Update the progress bar
		var newItems = Object.keys(Manager.NewItemsByType).flatMap(key => Manager.NewItemsByType[key]);
		var existingItems = Object.keys(Manager.NewItemsByType).flatMap(key => Manager.ExistingItemsByType[key]);
		var totalItems = newItems.length + existingItems.length;
		UI.StatusBars.SaveProgress.setValue(0, totalItems, "items");

		//Update buttons
		updateStageButtons(false, false, false, false);

		//Initialize tables
		UI.TableBoxes.SaveReportTable.renderData([]);

		//Begin saving process and poll until completion
		Manager.PollForSavedData = true;
		AJAX.doGETRequest("@Url.Content("~/upload/confirmchangesv3?transactionGUID=")" + Manager.Config.TransactionGUID, function (response) {
			//Stop polling for saved data
			Manager.PollForSavedData = false;

			//Update buttons
			updateStageButtons(false, false, false, true);

			//Finish up
			UI.StatusBars.SaveProgress.setValue(totalItems, totalItems, "items");
			setTimeout(function () {
				alert("All items have been processed. Please review the summary for any issues.");
			}, 10);

		}, function (error) {
			//Stop processing and log errors
			Manager.PollForSavedData = false;
			(error.Status || []).forEach(message => {
				UI.TableBoxes.SaveReportTable.appendRow({ Type: "Error Saving Data", Message: message });
			});
		});

		//Start polling for saved data
		pollSavingData();

		//Helper function
		function pollSavingData() {
			if (!Manager.PollForSavedData) {
				return;
			}

			AJAX.doGETRequest("@Url.Content("~/upload/getsavingstatus?transactionGUID=")" + Manager.Config.TransactionGUID + "&continueSavingData=" + Manager.ContinueProcessing, function (response) {
				//Update status bar
				totalItems = response.Data.TotalItems || totalItems;
				UI.StatusBars.SaveProgress.setValue(response.Data.TotalProcessed || 0, totalItems, "items");

				//Log messages
				(response?.Data?.Messages || []).forEach(messageItem => {
					UI.TableBoxes.SaveReportTable.appendRow({ Type: messageItem.Type, Message: messageItem.Message });
				});

				//Wait and then poll again
				setTimeout(pollSavingData, 500);
			}, function (error) {
				//Log errors
				(error.Status || []).forEach(message => {
					UI.TableBoxes.SaveReportTable.appendRow({ Type: "Error Monitoring Save Process", Message: message });
				});
			});
		}
	}
	//

	//Finish All
	function finishAll() {
		//Go to the RMTL search and look for data for the rating that was just uploaded
		window.location.href = "@Url.Content("~/rmtl/search?RatingRowID=")" + Manager.Config.Rating.RowID;
	}
	//

	//Find an item in the Manager's LookupGraph
	function lookupItem(rowID) {
		return Manager.LookupGraph.find(item => item.RowId == rowID);
	}

	//Get the lookup URL for something based on the current transaction
	function getURLForRowIDLookup(rowID) {
		return "@Url.Content( "~/upload/lookupgraphitem" )?transactionGUID=" + Manager.Config.TransactionGUID + "&itemRowID=" + rowID;
	}

	//Manage stage button states
	function updateStageButtons(enableProcessData, enableUploadData, enableSaveData, enableFinishAll) {
		UI.StageButtons.ProcessData.prop("disabled", !enableProcessData);
		UI.StageButtons.UploadData.prop("disabled", !enableUploadData);
		UI.StageButtons.SaveData.prop("disabled", !enableSaveData);
		UI.StageButtons.FinishAll.prop("disabled", !enableFinishAll);
	}
	//

	//Helper function
	function trueIfAdmin() {
		return @Html.Raw( AccountServices.IsUserAnAdmin() ? "true" : "false" );
	}
	
</script>
<style type="text/css">
	html body .container { width: 98vw; }
	input, select, textarea { max-width: none; }
	.mainUI { padding: 10px 0; }
	.stageButton { padding: 5px 10px; min-width: 400px; font-size: 18px; }
	.stageButton[disabled] { opacity: 0.5; cursor: not-allowed; }

	.tabBox { }
	.tabBox .tabButtons { display: flex; gap: 1px; }
	.tabBox .tabButtons button { border-radius: 0; border: 1px solid #AAA; padding: 5px; }
	.tabBox .tabButtons button:first-child { border-radius: 5px 0 0 5px; }
	.tabBox .tabButtons button:last-child { border-radius: 0 5px 5px 0; }
	.tabBox .tabButtons button.current {  }
	.tabBox .tabList {  }
	.tabBox .tabList .tabPanel {  }
	.tabBox .tabList .tabPanel:not(.current) { display: none; }

	.inputForm { display: flex; flex-direction: column; gap: 5px; background-color: #F5F5F5; padding: 5px; }
	.inputForm .inputFormRow { display: flex; gap: 5px; align-items: baseline; }
	.inputForm .inputFormRow > * { height: 30px; }
	.inputForm .inputFormRow select { flex: 1 1 auto; border-radius: 3px; }
	.inputForm .inputFormRow select:is(:focus, :hover) { cursor: pointer; }
	.inputForm .inputFormRow input[type='file'] { flex: 1 1 auto; border-radius: 3px; padding: 4px 5px; }
	.inputForm .inputFormRow input[type='file']:is(:focus, :hover) { cursor: pointer; background-color: rgba(0,0,0,0.1); }
	.inputForm .inputFormRow label { display: flex; gap: 5px; align-items: baseline; font-weight: normal; padding: 3px 10px; border-radius: 3px; margin: 0; }
	.inputForm .inputFormRow label:is(:focus, :hover) { cursor: pointer; background-color: rgba(0,0,0,0.1); }
	.inputForm .inputFormRow button { width: 200px; }

	.inputBox {  }
	.inputBox .inputSection { margin-bottom: 20px; padding: 0 20px; }
	.inputBox select { display: block; width: 100%; height: 30px; padding: 5px 10px; }
	.inputBox input[type='file'] { display: block; width: 100%; height: 30px; background-color: #F5F5F5; padding: 4px 5px; border-radius: 3px; }
	.inputBox input[type='file']:is(:hover, :focus) { cursor: pointer; background-color: #EEE; }
	.inputBox .checkBoxWrapper { display: flex; align-items: baseline; width: 100%; font-weight: normal; }
	.inputBox .checkBoxWrapper:is(:hover, :focus) { background-color: #EEE; cursor: pointer; }
	.inputBox .checkBoxWrapper input { margin: 5px; }

	.statusBar { margin-bottom: 10px; }
	.statusBar .progressBarWrapper { display: flex; gap: 5px; }
	.statusBar .progressBarWrapper .progressBarOuter { flex: 1 1 auto; background-color: #CCC; padding: 1px; height: 30px; }
	.statusBar .progressBarWrapper .cancelButton { min-width: 200px; }
	.statusBar .progressBarWrapper .progressBarOuter .progressBarInner { background-color: #CFC; height: 28px; min-width: 75px; transition: width 0.5s; text-align: center; }
	.statusBar .progressBarWrapper .progressBarOuter .progressBarInner .progressBarLabel { text-align: center; color: #031; padding: 4px 5px; white-space: nowrap; }
	.statusBar .statusBox { padding: 5px 10px; }

	.tableBox { margin-bottom: 20px; min-width: 500px; }
	.tableBox .tableBoxTop { display: flex; gap: 10px; align-items: baseline; padding: 5px; background-color: #DDD; }
	.tableBox .tableBoxTop .tableBoxLabel { font-weight: bold; }
	.tableBox .tableBoxTop .tableBoxSaveButton { min-width:200px; margin-left: auto; }
	.tableBox table { border: 1px solid #555; margin-bottom: 10px; width: 100%; }
	.tableBox table th { border: 1px solid #CCC; padding: 5px 10px; background-color: #DDD; text-align: center; }
	.tableBox table td { border: 1px solid #CCC; padding: 5px 10px; text-align: left; }

	.tableBox[data-name='SaveReportTable'] table tbody tr td:nth-child(2) { white-space: pre-wrap; }

	.buttonsBox { display: flex; justify-content: flex-end; gap: 10px; align-items: center; position: fixed; z-index: 10; bottom: 0; left: 0; width: 100%; background-color: #EEE; padding: 10px 1vw; }
	.buttonsBox .buttonsAdvice { }

</style>

<div class="tabBox mainUI" data-name="StageTabs">
	<div class="tabButtons"></div>
	<div class="tabList">
		<div class="tabPanel inputBox" data-name="Configure">
			<h2 class="tabLabel">Stage I: Configuration</h2>
			<h4>1. Select Rating</h4>
			<div class="inputSection">
				<p>Select a Rating to upload RMTL data for.</p>
				<select data-property="RatingRowID">
					<option disabled="disabled" selected="selected">Select Rating...</option>
					@foreach( var rating in allRatings )
					{
						<option value="@rating.RowId.ToString()" data-codednotation="@rating.CodedNotation">@rating.CodedNotation - @rating.Name</option>
					}
				</select>
			</div>

			<h4>2. Select CSV File</h4>
			<div class="inputSection">
				<p>Select a CSV file to upload.</p>
				<input type="file" data-property="CSVFile" />
			</div>

			<h4>3. Select Auto-Correction Options</h4>
			<div class="inputSection">
				<p>You authorize the upload tool to attempt to automatically correct the following selected items. These changes are in addition to the UTF-8 character encoding fixes that are always performed. You are strongly advised to review the changes before saving data.</p>
				<label class="checkBoxWrapper">
					<input type="checkbox" data-property="ForceSelectedRating" checked="checked" />
					<span>Force the use of the selected Rating. The Rating indicated by the rows in the spreadsheet will be ignored.</span>
				</label>
				<label class="checkBoxWrapper">
					<input type="checkbox" data-property="ForceAllRanksMeansE1" checked="checked" />
					<span>Convert a Rank of "All" to a Rank of "E1" (E1 is the first rank at which an all-rank task will be encountered, and is therefore functionally equivalent to indicating a rank of "All").</span>
				</label>
				<label class="checkBoxWrapper">
					<input type="checkbox" data-property="ForcePayGradeLevelType" checked="checked" />
					<div>
						<div>Force the use of the Level (A/J/M) that corresponds to the Ranks:</div>
						<ul>
							<li>Apprentice = E1, E2, E3, E4</li>
							<li>Journeyman = E5, E6</li>
							<li>Master = E7, E8, E9</li>
						</ul>
					</div>
				</label>
				<label class="checkBoxWrapper">
					<input type="checkbox" data-property="RemoveUnusualCharacters" checked="checked" />
					<span>Remove unusual/non-standard text characters within cells.</span>
				</label>
				<label class="checkBoxWrapper">
					<input type="checkbox" data-property="FixExcelRatio" checked="checked" />
					<span>Attempt to fix incorrect automatic formatting of the Development Ratio column.</span>
				</label>
				<label class="checkBoxWrapper">
					<input type="checkbox" data-property="RemoveExtraWhiteSpace" checked="checked" />
					<span>Remove extraneous white space (i.e., extra spaces and tabs) within cells.</span>
				</label>
				<label class="checkBoxWrapper">
					<input type="checkbox" data-property="CloseMatchConcepts" checked="checked" />
					<span>When an invalid controlled vocabulary term is provided, but there is a close match in the system, use the close match instead.</span>
				</label>
			</div>

			<h4>4. (Optional) Select Checks to Skip</h4>
			<div class="inputSection">
				<p>You may skip checks for Part 2 and/or Part 3 data as part of a curation process. Checking any of these options will disable saving.</p>
				<label class="checkBoxWrapper">
					<input type="checkbox" data-property="SkipPart2Checks" />
					<div>
						<div>Skip Part 2 Checks (treat the value as "N/A") for the following columns:</div>
						<ul class="columnList part2Columns"></ul>
					</div>
				</label>
				<label class="checkBoxWrapper">
					<input type="checkbox" data-property="SkipPart3Checks" />
					<div>
						<div>Skip Part 3 Checks (treat the value as "N/A") for the following columns:</div>
					<ul class="columnList part3Columns"></ul>
					</div>
				</label>
			</div>
			<div class="buttonsBox" data-buttonsbox="ProcessData">
				<div class="buttonsAdvice">Select a rating and CSV file above, along with any additional configuration. Then press the "Begin Processing Data" button.</div>
				<button class="blueButton stageButton" data-action="ProcessData">Begin Processing Data</button>
			</div>
		</div>
		<div class="tabPanel" data-name="PreProcessing">
			<h2 class="tabLabel">Stage II: Pre-Processing</h2>
			<div class="statusBar" data-name="PreProcessingProgress"></div>
			<div class="tabBox" data-name="PreProcessingTabs">
				<div class="tabButtons"></div>
				<div class="tabList">
					<div class="tabPanel" data-name="Summary">
						<h3 class="tabLabel">Pre-Processing Summary</h3>
						<p>Summary of items encountered while pre-processing the spreadsheet.</p>
						<div class="tableBox" data-name="PreProcessing_Summary" data-label="Pre-Processing - Summary" data-columnKeys="Total|Errors|Warnings|AutoCorrections" data-columnLabels="Total Rows|Errors|Warnings|Automatic Corrections"></div>
						<p>The following values (if any) were found in the spreadsheet, but have no matching controlled value in the database.</p>
						<div class="tableBox" data-name="PreProcessing_MissingControlledValues_Summary" data-label="Pre-Processing - Missing Controlled Values Summary" data-columnKeys="Total|Column|Type|ConceptScheme|Value" data-columnLabels="Total|Column|Type|Concept Scheme|Value"></div>
					</div>
					<div class="tabPanel" data-name="Errors">
						<h3 class="tabLabel">Pre-Processing Errors</h3>
						<p>Errors encountered while pre-processing the spreadsheet.</p>
						<div class="tableBox" data-name="PreProcessing_Errors" data-label="Pre-Processing - Errors" data-enablesave="true" data-columnKeys="RowNumber|Type|Column|Message|Value" data-columnLabels="Row #|Issue Type|Column|Message|Value"></div>
					</div>
					<div class="tabPanel" data-name="Warnings">
						<h3 class="tabLabel">Pre-Processing Warnings</h3>
						<p>Warnings encountered while pre-processing the spreadsheet.</p>
						<div class="tableBox" data-name="PreProcessing_Warnings" data-label="Pre-Processing Results - Warnings" data-enablesave="true" data-columnKeys="RowNumber|Type|Column|Message" data-columnLabels="Row #|Issue Type|Column|Message"></div>
					</div>
					<div class="tabPanel" data-name="AutoCorrections">
						<h3 class="tabLabel">Pre-Processing Auto-Corrections</h3>
						<p>Cases where a value in a cell in the spreadsheet was a close (but not exact) match to a value from a controlled vocabulary. The system will use the corresponding known value shown for each cell below instead of the actual value provided for each cell below if you proceed with the upload. If this is not the desired behavior, you will need to ensure that the system contains the exact value you want to provide, and that the spreadsheet provides an exact match to that value.</p>
						<div class="tableBox" data-name="PreProcessing_AutoCorrections" data-label="Pre-Processing Results - Automatic Corrections" data-enablesave="true" data-columnKeys="RowNumber|Type|Column|Message|FoundValue|CorrectValue" data-columnLabels="Row #|Issue Type|Column|Message|Value Found In Spreadsheet|Value That Will Be Used If You Continue"></div>
					</div>
				</div>
			</div>
			<div class="buttonsBox" data-buttonsbox="UploadData">
				<div class="buttonsAdvice">Wait for the pre-processing to finish. Then use the reports above to examine the data for any issues. If there are any issues, correct them and refresh the page to upload the data again. Otherwise, press the "Begin Uploading Data" button.</div>
				<button class="blueButton stageButton" data-action="UploadData">Begin Uploading Data</button>
			</div>
		</div>
		<div class="tabPanel" data-name="UploadReport">
			<h2 class="tabLabel">Stage III: Upload and Process Data</h2>
			<div class="statusBar" data-name="UploadProgress"></div>
			<div class="tabBox" data-name="UploadTabs">
				<div class="tabButtons"></div>
				<div class="tabList">
					<div class="tabPanel" data-name="Summary">
						<h3 class="tabLabel">Summary</h3>
						<div class="tableBox" data-name="UploadSummaryTable" data-label="Upload Summary" data-columnKeys="Total|ServerErrors|ProcessingErrors|Warnings|Messages" data-columnLabels="Total Rows|Server Errors|Processing Errors|Warnings|Messages"></div>
						<div class="tableBox" data-name="ResourceSummaryTable" data-label="Resource Summary" data-columnKeys="TypeLabel|Total|ExistingItems|NewItems|ValueChanges|ReferenceChanges|ReferenceAdditions" data-columnLabels="Type|Total Items|Existing Items|New Items|Existing Items With Value Changes|Existing Items With Reference Changes|Existing Items With Reference Additions"></div>
					</div>
					<div class="tabPanel" data-name="ServerErrors">
						<h3 class="tabLabel">Server Errors</h3>
						<p>Server errors occur when there is an unexpected issue that prevents the server from being able to process a row. These errors will prevent data from being saved, because it would result in erroneous data being entered into the system.</p>
						<div class="tableBox" data-name="UploadReport_ServerErrors" data-label="Upload Report - Server Errors" data-enablesave="true" data-columnKeys="RowNumber|Type|Message" data-columnLabels="Row #|Type|Message"></div>
					</div>
					<div class="tabPanel" data-name="ProcessingErrors">
						<h3 class="tabLabel">Processing Errors</h3>
						<p>Processing errors occur when the server detects an error in the data, but is (usually) able to continue processing the row. These errors will prevent data from being saved, because it would result in erroneous data being entered into the system.</p>
						<div class="tableBox" data-name="UploadReport_ProcessingErrors" data-label="Upload Report - Processing Errors" data-enablesave="true" data-columnKeys="RowNumber|Type|Message" data-columnLabels="Row #|Type|Message"></div>
					</div>
					<div class="tabPanel" data-name="Warnings">
						<h3 class="tabLabel">Warnings</h3>
						<p>Warnings occur when the server detects data that may be erroneous. Review these carefully. If the data is correct, you may continue.</p>
						<div class="tableBox" data-name="UploadReport_Warnings" data-label="Upload Report - Warnings" data-enablesave="true" data-columnKeys="RowNumber|Type|Message" data-columnLabels="Row #|Type|Message"></div>
					</div>
					<div class="tabPanel" data-name="Messages">
						<h3 class="tabLabel">Messages</h3>
						<p>Messages are miscellaneous information the server may provide about the data for a row. Review this information carefully before continuing.</p>
						<div class="tableBox" data-name="UploadReport_Messages" data-label="Upload Report - Messages" data-enablesave="true" data-columnKeys="RowNumber|Type|Message" data-columnLabels="Row #|Type|Message"></div>
					</div>
					<div class="tabPanel" data-name="NewItems">
						<h3 class="tabLabel">New Items</h3>
						<p>Items that were detected in the spreadsheet, but not found in the database, will appear below.</p>
						<div class="resourceSetsBox" data-name="NewItems" data-label="New Items" data-extraColumnKeys="" data-extraColumnLabels=""></div>
					</div>
					<div class="tabPanel" data-name="ValueChanges">
						<h3 class="tabLabel">Value Changes</h3>
						<p>Modifications detected to values for properties of existing items in the database will appear below.</p>
						<div class="resourceSetsBox" data-name="ValueChanges" data-label="Value Changes" data-extraColumnKeys="Predicate|OldValue|NewValue" data-extraColumnLabels="Property|Old Value|New Value"></div>
					</div>
					<div class="tabPanel" data-name="ReferenceChanges">
						<h3 class="tabLabel">Reference Changes</h3>
						<p>Modifications detected to references from an existing item in the database to another item (that may be new or existing) will appear below.</p>
						<div class="resourceSetsBox" data-name="ReferenceChanges" data-label="Reference Changes" data-extraColumnKeys="Predicate|OldReferenceType|OldReference|NewReferenceType|NewReference" data-extraColumnLabels="Property|Old Reference to Type|Old Reference to Data|New Reference to Type|New Reference to Data"></div>
					</div>
					<div class="tabPanel" data-name="ReferenceAdditions">
						<h3 class="tabLabel">Reference Additions</h3>
						<p>Additions detected to references from an existing item in the database to another item (that may be new or existing) will appear below.</p>
						<div class="resourceSetsBox" data-name="ReferenceAdditions" data-label="Reference Additions" data-extraColumnKeys="Predicate|AddedReferenceType|AddedReferenceData" data-extraColumnLabels="Property|Reference to Type|Reference to Data"></div>
					</div>
				</div>
			</div>
			<div class="buttonsBox" data-buttonsbox="SaveData">
				<div class="buttonsAdvice">Wait for the uploading to finish. Then use the reports above to examine the data for any issues. If there are any issues, correct them and refresh the page to upload the data again. Otherwise, press the "Begin Saving Data" button.</div>
				<button class="blueButton stageButton" data-action="SaveData">Begin Saving Data</button>
			</div>
		</div>
		<div class="tabPanel" data-name="SaveData">
			<h2 class="tabLabel">Stage IV: Save Data</h2>
			<div class="statusBar" data-name="SaveProgress"></div>
			<div class="tableBox" data-name="SaveReportTable" data-label="Upload and Save Report - Messages" data-enablesave="true" data-columnKeys="Type|Message" data-columnLabels="Type|Message"></div>
			<div class="buttonsBox" data-buttonsbox="Finish">
				<div class="buttonsAdvice">Wait for the saving to finish. Then use the reports above to examine the data for any issues. Carefully consider how to address any issues that are found. Otherwise, press the "Finish and Review Updated Data" button.</div>
				<button class="blueButton stageButton" data-action="FinishAll">Finish and Review Updated Data</button>
			</div>
		</div>
	</div>
</div>
